reify_in_context : Attempting to reify: reduce2'
reify_preprocess : Attempting to preprocess: reduce2'
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list Z -> list Z)
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list Z -> list Z)
reify_in_context : Attempting to reify:
(let machine_wordsize := 64 in
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let machine_wordsize := 64 in
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun machine_wordsize : Z =>
  let weight := UniformWeight.uweight machine_wordsize in
  fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
  let p_a := Positional.to_associational weight (2 * n) p in
  let r_a := sat_reduce base s c (2 * n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (2 * n)) p
  then
   let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
   let r_a0 := sat_reduce base s c (S n) p_a0 in
   let r_rows0 := Rows.from_associational weight (S n) r_a0 in
   let r_flat0 := Rows.flatten weight (S n) r_rows0 in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
  else
   let p_a0 :=
     Positional.to_associational weight (S n)
       (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
   let r_a0 := sat_reduce base s c (S n) p_a0 in
   let r_rows0 := Rows.from_associational weight (S n) r_a0 in
   let r_flat0 := Rows.flatten weight (S n) r_rows0 in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if
    is_bounded_by (List.repeat bound0 (S n))
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)) 64)
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list Z -> list Z)
reify_in_context : Attempting to reify: 64
reify_preprocess : Attempting to preprocess: 64
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun machine_wordsize : Z =>
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun machine_wordsize : Z =>
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z)
  =>
  let p_a := Positional.to_associational weight (2 * n) p in
  let r_a := sat_reduce base s c (2 * n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (2 * n)) p
  then
   let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
   let r_a0 := sat_reduce base s c (S n) p_a0 in
   let r_rows0 := Rows.from_associational weight (S n) r_a0 in
   let r_flat0 := Rows.flatten weight (S n) r_rows0 in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
  else
   let p_a0 :=
     Positional.to_associational weight (S n)
       (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
   let r_a0 := sat_reduce base s c (S n) p_a0 in
   let r_rows0 := Rows.from_associational weight (S n) r_a0 in
   let r_flat0 := Rows.flatten weight (S n) r_rows0 in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if
    is_bounded_by (List.repeat bound0 (S n))
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (UniformWeight.uweight machine_wordsize))
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list Z -> list Z)
reify_in_context : Attempting to reify: (UniformWeight.uweight machine_wordsize)
reify_preprocess : Attempting to preprocess:
(UniformWeight.uweight machine_wordsize)
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: machine_wordsize
reify_in_context : Attempting to reify: UniformWeight.uweight
reify_preprocess : Attempting to preprocess: UniformWeight.uweight
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_in_context : Attempting to reify: (fun lgr : Z => weight lgr 1)
reify_preprocess : Attempting to preprocess: (fun lgr : Z => weight lgr 1)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight lgr 1)
reify_preprocess : Attempting to preprocess: (weight lgr 1)
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight lgr)
reify_preprocess : Attempting to preprocess: (weight lgr)
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_in_context : Attempting to reify: lgr
reify_in_context : Attempting to reify: weight
reify_preprocess : Attempting to preprocess: weight
reify_base_type : Attempting to reify: (Z -> Z -> nat -> Z)
reify_base_type : Attempting to reify: (Z -> Z -> nat -> Z)
reify_in_context : Attempting to reify:
(fun (limbwidth_num limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun (limbwidth_num limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun (limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun i : nat => 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun i : nat => 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(- (- (limbwidth_num * Z.of_nat i) / limbwidth_den))
reify_preprocess : Attempting to preprocess:
(- (- (limbwidth_num * Z.of_nat i) / limbwidth_den))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(- (limbwidth_num * Z.of_nat i) / limbwidth_den)
reify_preprocess : Attempting to preprocess:
(- (limbwidth_num * Z.of_nat i) / limbwidth_den)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: limbwidth_den
reify_in_context : Attempting to reify: (Z.div (- (limbwidth_num * Z.of_nat i)))
reify_preprocess : Attempting to preprocess:
(Z.div (- (limbwidth_num * Z.of_nat i)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (- (limbwidth_num * Z.of_nat i))
reify_preprocess : Attempting to preprocess: (- (limbwidth_num * Z.of_nat i))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (limbwidth_num * Z.of_nat i)
reify_preprocess : Attempting to preprocess: (limbwidth_num * Z.of_nat i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.of_nat i)
reify_preprocess : Attempting to preprocess: (Z.of_nat i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Z.of_nat
reify_preprocess : Attempting to preprocess: Z.of_nat
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: (Z.mul limbwidth_num)
reify_preprocess : Attempting to preprocess: (Z.mul limbwidth_num)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: limbwidth_num
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (Z.pow 2)
reify_preprocess : Attempting to preprocess: (Z.pow 2)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: 2
reify_preprocess : Attempting to preprocess: 2
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.pow
reify_preprocess : Attempting to preprocess: Z.pow
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z)
 =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z)
 =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun (c : list (Z * Z)) (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (p : list Z) =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun p : list Z =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun p : list Z =>
 let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let p_a := Positional.to_associational weight (2 * n) p in
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun p_a : list (Z * Z) =>
  let r_a := sat_reduce base s c (2 * n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (2 * n)) p
  then
   let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
   let r_a0 := sat_reduce base s c (S n) p_a0 in
   let r_rows0 := Rows.from_associational weight (S n) r_a0 in
   let r_flat0 := Rows.flatten weight (S n) r_rows0 in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
  else
   let p_a0 :=
     Positional.to_associational weight (S n)
       (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
   let r_a0 := sat_reduce base s c (S n) p_a0 in
   let r_rows0 := Rows.from_associational weight (S n) r_a0 in
   let r_flat0 := Rows.flatten weight (S n) r_rows0 in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if
    is_bounded_by (List.repeat bound0 (S n))
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (Positional.to_associational weight (2 * n) p))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify:
(Positional.to_associational weight (2 * n) p)
reify_preprocess : Attempting to preprocess:
(Positional.to_associational weight (2 * n) p)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(Positional.to_associational weight (2 * n))
reify_preprocess : Attempting to preprocess:
(Positional.to_associational weight (2 * n))
reify_base_type : Attempting to reify: (list Z -> list (Z * Z))
reify_in_context : Attempting to reify: (2 * n)%nat
reify_preprocess : Attempting to preprocess: (2 * n)%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (Init.Nat.mul 2)
reify_preprocess : Attempting to preprocess: (Init.Nat.mul 2)
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: 2%nat
reify_preprocess : Attempting to preprocess: 2%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: Init.Nat.mul
reify_preprocess : Attempting to preprocess: Init.Nat.mul
reify_base_type : Attempting to reify: (nat -> nat -> nat)
reify_in_context : Attempting to reify: (Positional.to_associational weight)
reify_preprocess : Attempting to preprocess:
(Positional.to_associational weight)
reify_base_type : Attempting to reify: (nat -> list Z -> list (Z * Z))
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Positional.to_associational
reify_preprocess : Attempting to preprocess: Positional.to_associational
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list Z -> list (Z * Z))
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list Z -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (xs : list Z) =>
 List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (xs : list Z) =>
 List.combine (List.map weight (List.seq 0 n)) xs)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (xs : list Z) => List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (xs : list Z) => List.combine (List.map weight (List.seq 0 n)) xs)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun xs : list Z => List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(fun xs : list Z => List.combine (List.map weight (List.seq 0 n)) xs)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(List.combine (List.map weight (List.seq 0 n)) xs)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xs
reify_in_context : Attempting to reify:
(List.combine (B:=Z) (List.map weight (List.seq 0 n)))
reify_preprocess : Attempting to preprocess:
(List.combine (B:=Z) (List.map weight (List.seq 0 n)))
reify_base_type : Attempting to reify: (list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map weight (List.seq 0 n))
reify_preprocess : Attempting to preprocess: (List.map weight (List.seq 0 n))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.seq 0 n)
reify_preprocess : Attempting to preprocess: (List.seq 0 n)
reify_base_type : Attempting to reify: (list nat)
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.seq 0)
reify_preprocess : Attempting to preprocess: (List.seq 0)
reify_base_type : Attempting to reify: (nat -> list nat)
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: List.seq
reify_preprocess : Attempting to preprocess: List.seq
reify_base_type : Attempting to reify: (nat -> nat -> list nat)
reify_in_context : Attempting to reify: (List.map weight)
reify_preprocess : Attempting to preprocess: (List.map weight)
reify_base_type : Attempting to reify: (list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (List.map (A:=nat) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=nat) (B:=Z))
reify_base_type : Attempting to reify: ((nat -> Z) -> list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.combine (A:=Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.combine (A:=Z) (B:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p_a : list (Z * Z) =>
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun p_a : list (Z * Z) =>
 let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a0 := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a0 :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a0 in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let r_a := sat_reduce base s c (2 * n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun r_a : list (Z * Z) =>
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (2 * n)) p
  then
   let p_a := Positional.to_associational weight (S n) (fst r_flat) in
   let r_a0 := sat_reduce base s c (S n) p_a in
   let r_rows0 := Rows.from_associational weight (S n) r_a0 in
   let r_flat0 := Rows.flatten weight (S n) r_rows0 in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
  else
   let p_a :=
     Positional.to_associational weight (S n)
       (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
   let r_a0 := sat_reduce base s c (S n) p_a in
   let r_rows0 := Rows.from_associational weight (S n) r_a0 in
   let r_flat0 := Rows.flatten weight (S n) r_rows0 in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if
    is_bounded_by (List.repeat bound0 (S n))
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (sat_reduce base s c (2 * n) p_a))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (sat_reduce base s c (2 * n) p_a)
reify_preprocess : Attempting to preprocess: (sat_reduce base s c (2 * n) p_a)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: p_a
reify_in_context : Attempting to reify: (sat_reduce base s c (2 * n))
reify_preprocess : Attempting to preprocess: (sat_reduce base s c (2 * n))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: (2 * n)%nat
reify_preprocess : Attempting to preprocess: (2 * n)%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (Init.Nat.mul 2)
reify_preprocess : Attempting to preprocess: (Init.Nat.mul 2)
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: 2%nat
reify_preprocess : Attempting to preprocess: 2%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: Init.Nat.mul
reify_preprocess : Attempting to preprocess: Init.Nat.mul
reify_base_type : Attempting to reify: (nat -> nat -> nat)
reify_in_context : Attempting to reify: (sat_reduce base s c)
reify_preprocess : Attempting to preprocess: (sat_reduce base s c)
reify_base_type : Attempting to reify: (nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (sat_reduce base s)
reify_preprocess : Attempting to preprocess: (sat_reduce base s)
reify_base_type : Attempting to reify:
(list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (sat_reduce base)
reify_preprocess : Attempting to preprocess: (sat_reduce base)
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: base
reify_in_context : Attempting to reify: sat_reduce
reify_preprocess : Attempting to preprocess: sat_reduce
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify:
(let machine_wordsize := 64 in
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let machine_wordsize := 64 in
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun machine_wordsize : Z =>
  let weight := UniformWeight.uweight machine_wordsize in
  fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
  let s' := fst (Rows.adjust_s weight (S (S n)) s) in
  let lo_hi := Associational.split s' p in
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) 64)
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: 64
reify_preprocess : Attempting to preprocess: 64
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun machine_wordsize : Z =>
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun machine_wordsize : Z =>
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z))
    (n : nat) (p : list (Z * Z)) =>
  let s' := fst (Rows.adjust_s weight (S (S n)) s) in
  let lo_hi := Associational.split s' p in
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) (UniformWeight.uweight machine_wordsize))
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: (UniformWeight.uweight machine_wordsize)
reify_preprocess : Attempting to preprocess:
(UniformWeight.uweight machine_wordsize)
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: machine_wordsize
reify_in_context : Attempting to reify: UniformWeight.uweight
reify_preprocess : Attempting to preprocess: UniformWeight.uweight
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_in_context : Attempting to reify: (fun lgr : Z => ModOps.weight lgr 1)
reify_preprocess : Attempting to preprocess:
(fun lgr : Z => ModOps.weight lgr 1)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (ModOps.weight lgr 1)
reify_preprocess : Attempting to preprocess: (ModOps.weight lgr 1)
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (ModOps.weight lgr)
reify_preprocess : Attempting to preprocess: (ModOps.weight lgr)
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_in_context : Attempting to reify: lgr
reify_in_context : Attempting to reify: ModOps.weight
reify_preprocess : Attempting to preprocess: ModOps.weight
reify_base_type : Attempting to reify: (Z -> Z -> nat -> Z)
reify_base_type : Attempting to reify: (Z -> Z -> nat -> Z)
reify_in_context : Attempting to reify:
(fun (limbwidth_num limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun (limbwidth_num limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun (limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun i : nat => 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun i : nat => 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(- (- (limbwidth_num * Z.of_nat i) / limbwidth_den))
reify_preprocess : Attempting to preprocess:
(- (- (limbwidth_num * Z.of_nat i) / limbwidth_den))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(- (limbwidth_num * Z.of_nat i) / limbwidth_den)
reify_preprocess : Attempting to preprocess:
(- (limbwidth_num * Z.of_nat i) / limbwidth_den)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: limbwidth_den
reify_in_context : Attempting to reify: (Z.div (- (limbwidth_num * Z.of_nat i)))
reify_preprocess : Attempting to preprocess:
(Z.div (- (limbwidth_num * Z.of_nat i)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (- (limbwidth_num * Z.of_nat i))
reify_preprocess : Attempting to preprocess: (- (limbwidth_num * Z.of_nat i))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (limbwidth_num * Z.of_nat i)
reify_preprocess : Attempting to preprocess: (limbwidth_num * Z.of_nat i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.of_nat i)
reify_preprocess : Attempting to preprocess: (Z.of_nat i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Z.of_nat
reify_preprocess : Attempting to preprocess: Z.of_nat
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: (Z.mul limbwidth_num)
reify_preprocess : Attempting to preprocess: (Z.mul limbwidth_num)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: limbwidth_num
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (Z.pow 2)
reify_preprocess : Attempting to preprocess: (Z.pow 2)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: 2
reify_preprocess : Attempting to preprocess: 2
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.pow
reify_preprocess : Attempting to preprocess: Z.pow
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z))
   (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z))
   (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun s' : Z =>
  let lo_hi := Associational.split s' p in
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) (fst (Rows.adjust_s weight (S (S n)) s)))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (fst (Rows.adjust_s weight (S (S n)) s))
reify_preprocess : Attempting to preprocess:
(fst (Rows.adjust_s weight (S (S n)) s))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (Rows.adjust_s weight (S (S n)) s)
reify_preprocess : Attempting to preprocess: (Rows.adjust_s weight (S (S n)) s)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Rows.adjust_s weight (S (S n)))
reify_preprocess : Attempting to preprocess: (Rows.adjust_s weight (S (S n)))
reify_base_type : Attempting to reify: (Z -> Z * bool)
reify_in_context : Attempting to reify: (S (S n))
reify_preprocess : Attempting to preprocess: (S (S n))
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Rows.adjust_s weight)
reify_preprocess : Attempting to preprocess: (Rows.adjust_s weight)
reify_base_type : Attempting to reify: (nat -> Z -> Z * bool)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.adjust_s
reify_preprocess : Attempting to preprocess: Rows.adjust_s
reify_base_type : Attempting to reify: ((nat -> Z) -> nat -> Z -> Z * bool)
reify_base_type : Attempting to reify: ((nat -> Z) -> nat -> Z -> Z * bool)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(fun (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun s : Z =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(fun s : Z =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map weight (List.rev (List.seq 0 fuel)))
reify_preprocess : Attempting to preprocess:
(List.map weight (List.rev (List.seq 0 fuel)))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.rev (List.seq 0 fuel))
reify_preprocess : Attempting to preprocess: (List.rev (List.seq 0 fuel))
reify_base_type : Attempting to reify: (list nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.seq 0 fuel)
reify_preprocess : Attempting to preprocess: (List.seq 0 fuel)
reify_base_type : Attempting to reify: (list nat)
reify_in_context : Attempting to reify: fuel
reify_in_context : Attempting to reify: (List.seq 0)
reify_preprocess : Attempting to preprocess: (List.seq 0)
reify_base_type : Attempting to reify: (nat -> list nat)
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: List.seq
reify_preprocess : Attempting to preprocess: List.seq
reify_base_type : Attempting to reify: (nat -> nat -> list nat)
reify_in_context : Attempting to reify: (List.rev (A:=nat))
reify_preprocess : Attempting to preprocess: (List.rev (A:=nat))
reify_base_type : Attempting to reify: (list nat -> list nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.map weight)
reify_preprocess : Attempting to preprocess: (List.map weight)
reify_base_type : Attempting to reify: (list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (List.map (A:=nat) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=nat) (B:=Z))
reify_base_type : Attempting to reify: ((nat -> Z) -> list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false))
reify_base_type : Attempting to reify: (list Z -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (s, false)
reify_preprocess : Attempting to preprocess: (s, false)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: false
reify_preprocess : Attempting to preprocess: false
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (pair s)
reify_preprocess : Attempting to preprocess: (pair s)
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0))
reify_base_type : Attempting to reify: (Z * bool -> list Z -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (w_i : Z) '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_preprocess : Attempting to preprocess:
(fun (w_i : Z) '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_preprocess : Attempting to preprocess:
(fun '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(let
 '(v, found_adjustment) := res in
  let res := (v, found_adjustment) in
  if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(let
 '(v, found_adjustment) := res in
  let res := (v, found_adjustment) in
  if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(Prod.prod_rect_nodep
   (fun (v : Z) (found_adjustment : bool) =>
    let res := (v, found_adjustment) in
    if found_adjustment
    then res
    else if w_i mod s =? 0 then (w_i, true) else res) res)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: res
reify_in_context : Attempting to reify:
(Prod.prod_rect_nodep
   (fun (v : Z) (found_adjustment : bool) =>
    let res := (v, found_adjustment) in
    if found_adjustment
    then res
    else if w_i mod s =? 0 then (w_i, true) else res))
reify_preprocess : Attempting to preprocess:
(Prod.prod_rect_nodep
   (fun (v : Z) (found_adjustment : bool) =>
    let res := (v, found_adjustment) in
    if found_adjustment
    then res
    else if w_i mod s =? 0 then (w_i, true) else res))
reify_base_type : Attempting to reify: (Z * bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun (v : Z) (found_adjustment : bool) =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun (v : Z) (found_adjustment : bool) =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun found_adjustment : bool =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun found_adjustment : bool =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
((fun res : Z * bool =>
  if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
   (v, found_adjustment))
reify_base_type : Attempting to reify: (Z * bool)%type
reify_in_context : Attempting to reify: (v, found_adjustment)
reify_preprocess : Attempting to preprocess: (v, found_adjustment)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: found_adjustment
reify_in_context : Attempting to reify: (pair v)
reify_preprocess : Attempting to preprocess: (pair v)
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: v
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun res : Z * bool =>
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun res : Z * bool =>
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res)
   (fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res)
   found_adjustment)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: found_adjustment
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res)
   (fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res)
   (fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res))
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true))
   (fun _ : unit => res) (w_i mod s =? 0))
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (w_i mod s =? 0)
reify_preprocess : Attempting to preprocess: (w_i mod s =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (w_i mod s))
reify_preprocess : Attempting to preprocess: (Z.eqb (w_i mod s))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (w_i mod s)
reify_preprocess : Attempting to preprocess: (w_i mod s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.modulo w_i)
reify_preprocess : Attempting to preprocess: (Z.modulo w_i)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: w_i
reify_in_context : Attempting to reify: Z.modulo
reify_preprocess : Attempting to preprocess: Z.modulo
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true))
   (fun _ : unit => res))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true))
   (fun _ : unit => res))
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => res)
reify_preprocess : Attempting to preprocess: (fun _ : unit => res)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: res
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true)))
reify_base_type : Attempting to reify: ((unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => (w_i, true))
reify_preprocess : Attempting to preprocess: (fun _ : unit => (w_i, true))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (w_i, true)
reify_preprocess : Attempting to preprocess: (w_i, true)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: true
reify_preprocess : Attempting to preprocess: true
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (pair w_i)
reify_preprocess : Attempting to preprocess: (pair w_i)
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: w_i
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (Z * bool))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (Z * bool))
reify_base_type : Attempting to reify:
((unit -> Z * bool) -> (unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res))
reify_base_type : Attempting to reify: ((unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => res)
reify_preprocess : Attempting to preprocess: (fun _ : unit => res)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: res
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (Z * bool))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (Z * bool))
reify_base_type : Attempting to reify:
((unit -> Z * bool) -> (unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: Prod.prod_rect_nodep
reify_preprocess : Attempting to preprocess: Prod.prod_rect_nodep
reify_base_type : Attempting to reify:
((Z -> bool -> Z * bool) -> Z * bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right (A:=Z * bool) (B:=Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=Z * bool) (B:=Z))
reify_base_type : Attempting to reify:
((Z -> Z * bool -> Z * bool) -> Z * bool -> list Z -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * bool -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun s' : Z =>
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun s' : Z =>
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun lo_hi : list (Z * Z) * list (Z * Z) =>
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) (Associational.split s' p))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (Associational.split s' p)
reify_preprocess : Attempting to preprocess: (Associational.split s' p)
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: (Associational.split s')
reify_preprocess : Attempting to preprocess: (Associational.split s')
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_in_context : Attempting to reify: s'
reify_in_context : Attempting to reify: Associational.split
reify_preprocess : Attempting to preprocess: Associational.split
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (p : list (Z * Z)) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (p : list (Z * Z)) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
((fun hi_lo : list (Z * Z) * list (Z * Z) =>
  (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
   (List.partition (fun t : Z * Z => fst t mod s =? 0) p))
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_in_context : Attempting to reify:
(List.partition (fun t : Z * Z => fst t mod s =? 0) p)
reify_preprocess : Attempting to preprocess:
(List.partition (fun t : Z * Z => fst t mod s =? 0) p)
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.partition (fun t : Z * Z => fst t mod s =? 0))
reify_preprocess : Attempting to preprocess:
(List.partition (fun t : Z * Z => fst t mod s =? 0))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun t : Z * Z => fst t mod s =? 0)
reify_preprocess : Attempting to preprocess: (fun t : Z * Z => fst t mod s =? 0)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t mod s =? 0)
reify_preprocess : Attempting to preprocess: (fst t mod s =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (fst t mod s))
reify_preprocess : Attempting to preprocess: (Z.eqb (fst t mod s))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst t mod s)
reify_preprocess : Attempting to preprocess: (fst t mod s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.modulo (fst t))
reify_preprocess : Attempting to preprocess: (Z.modulo (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.modulo
reify_preprocess : Attempting to preprocess: Z.modulo
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify: (List.partition (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.partition (A:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> bool) -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun hi_lo : list (Z * Z) * list (Z * Z) =>
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(fun hi_lo : list (Z * Z) * list (Z * Z) =>
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_preprocess : Attempting to preprocess:
(snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_preprocess : Attempting to preprocess:
(List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst hi_lo)
reify_preprocess : Attempting to preprocess: (fst hi_lo)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: hi_lo
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun t : Z * Z => (fst t / s, snd t)))
reify_preprocess : Attempting to preprocess:
(List.map (fun t : Z * Z => (fst t / s, snd t)))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun t : Z * Z => (fst t / s, snd t))
reify_preprocess : Attempting to preprocess:
(fun t : Z * Z => (fst t / s, snd t))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t / s, snd t)
reify_preprocess : Attempting to preprocess: (fst t / s, snd t)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t / s))
reify_preprocess : Attempting to preprocess: (pair (fst t / s))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t / s)
reify_preprocess : Attempting to preprocess: (fst t / s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.div (fst t))
reify_preprocess : Attempting to preprocess: (Z.div (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (snd hi_lo))
reify_preprocess : Attempting to preprocess: (pair (snd hi_lo))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd hi_lo)
reify_preprocess : Attempting to preprocess: (snd hi_lo)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: hi_lo
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun lo_hi : list (Z * Z) * list (Z * Z) =>
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun lo_hi : list (Z * Z) * list (Z * Z) =>
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun coef : list (Z * Z) =>
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r)
   (Associational.sat_mul_const base ((1, s' / s) :: nil) c))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify:
(Associational.sat_mul_const base ((1, s' / s) :: nil) c)
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base ((1, s' / s) :: nil) c)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify:
(Associational.sat_mul_const base ((1, s' / s) :: nil))
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base ((1, s' / s) :: nil))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: ((1, s' / s) :: nil)%list
reify_preprocess : Attempting to preprocess: ((1, s' / s) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (1, s' / s))
reify_preprocess : Attempting to preprocess: (cons (1, s' / s))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (1, s' / s)
reify_preprocess : Attempting to preprocess: (1, s' / s)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (s' / s)
reify_preprocess : Attempting to preprocess: (s' / s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.div s')
reify_preprocess : Attempting to preprocess: (Z.div s')
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: s'
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair 1)
reify_preprocess : Attempting to preprocess: (pair 1)
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_mul_const base)
reify_preprocess : Attempting to preprocess: (Associational.sat_mul_const base)
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: base
reify_in_context : Attempting to reify: Associational.sat_mul_const
reify_preprocess : Attempting to preprocess: Associational.sat_mul_const
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: q
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t t')
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t)
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t)
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s)
reify_preprocess : Attempting to preprocess: (Associational.sat_multerm_const s)
reify_base_type : Attempting to reify: (Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Associational.sat_multerm_const
reify_preprocess : Attempting to preprocess: Associational.sat_multerm_const
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 1)
reify_preprocess : Attempting to preprocess: (snd t =? 1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? -1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? -1)
reify_preprocess : Attempting to preprocess: (snd t =? -1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (-1)
reify_preprocess : Attempting to preprocess: (-1)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 0))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 0)
reify_preprocess : Attempting to preprocess: (snd t =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_in_context : Attempting to reify:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s (snd t))
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s (snd t))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s)
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s)
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Definitions.Z.mul_split
reify_preprocess : Attempting to preprocess: Definitions.Z.mul_split
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t' * s, snd xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t' * s, snd xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s, snd xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s, snd xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd xy)
reify_preprocess : Attempting to preprocess: (snd xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t' * s))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t' * s))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.mul (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', fst xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', fst xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', fst xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t', fst xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst xy)
reify_preprocess : Attempting to preprocess: (fst xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', - snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', - snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', - snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', - snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', - snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', - snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (- snd t')
reify_preprocess : Attempting to preprocess: (- snd t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun coef : list (Z * Z) =>
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun coef : list (Z * Z) =>
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun hi : list (Z * Z) => let r := (fst lo_hi ++ hi)%list in r)
   (Associational.sat_mul_const base coef (snd lo_hi)))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify:
(Associational.sat_mul_const base coef (snd lo_hi))
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base coef (snd lo_hi))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (snd lo_hi)
reify_preprocess : Attempting to preprocess: (snd lo_hi)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: lo_hi
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_mul_const base coef)
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base coef)
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: coef
reify_in_context : Attempting to reify: (Associational.sat_mul_const base)
reify_preprocess : Attempting to preprocess: (Associational.sat_mul_const base)
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: base
reify_in_context : Attempting to reify: Associational.sat_mul_const
reify_preprocess : Attempting to preprocess: Associational.sat_mul_const
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: q
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t t')
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t)
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t)
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s)
reify_preprocess : Attempting to preprocess: (Associational.sat_multerm_const s)
reify_base_type : Attempting to reify: (Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Associational.sat_multerm_const
reify_preprocess : Attempting to preprocess: Associational.sat_multerm_const
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 1)
reify_preprocess : Attempting to preprocess: (snd t =? 1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? -1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? -1)
reify_preprocess : Attempting to preprocess: (snd t =? -1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (-1)
reify_preprocess : Attempting to preprocess: (-1)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 0))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 0)
reify_preprocess : Attempting to preprocess: (snd t =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_in_context : Attempting to reify:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s (snd t))
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s (snd t))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s)
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s)
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Definitions.Z.mul_split
reify_preprocess : Attempting to preprocess: Definitions.Z.mul_split
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t' * s, snd xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t' * s, snd xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s, snd xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s, snd xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd xy)
reify_preprocess : Attempting to preprocess: (snd xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t' * s))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t' * s))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.mul (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', fst xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', fst xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', fst xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t', fst xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst xy)
reify_preprocess : Attempting to preprocess: (fst xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', - snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', - snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', - snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', - snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', - snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', - snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (- snd t')
reify_preprocess : Attempting to preprocess: (- snd t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun hi : list (Z * Z) => let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun hi : list (Z * Z) => let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun r : list (Z * Z) => r) (fst lo_hi ++ hi)%list)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (fst lo_hi ++ hi)%list
reify_preprocess : Attempting to preprocess: (fst lo_hi ++ hi)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: hi
reify_in_context : Attempting to reify: (app (fst lo_hi))
reify_preprocess : Attempting to preprocess: (app (fst lo_hi))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst lo_hi)
reify_preprocess : Attempting to preprocess: (fst lo_hi)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: lo_hi
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (app (A:=Z * Z))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun r : list (Z * Z) => r)
reify_preprocess : Attempting to preprocess: (fun r : list (Z * Z) => r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r
reify_in_context : Attempting to reify:
(fun r_a : list (Z * Z) =>
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun r_a : list (Z * Z) =>
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a0 := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a0 := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a0 in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun r_rows : list (list Z) =>
  let r_flat := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (2 * n)) p
  then
   let p_a := Positional.to_associational weight (S n) (fst r_flat) in
   let r_a := sat_reduce base s c (S n) p_a in
   let r_rows0 := Rows.from_associational weight (S n) r_a in
   let r_flat0 := Rows.flatten weight (S n) r_rows0 in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
  else
   let p_a :=
     Positional.to_associational weight (S n)
       (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
   let r_a := sat_reduce base s c (S n) p_a in
   let r_rows0 := Rows.from_associational weight (S n) r_a in
   let r_flat0 := Rows.flatten weight (S n) r_rows0 in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if
    is_bounded_by (List.repeat bound0 (S n))
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (Rows.from_associational weight (S n) r_a))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify:
(Rows.from_associational weight (S n) r_a)
reify_preprocess : Attempting to preprocess:
(Rows.from_associational weight (S n) r_a)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: r_a
reify_in_context : Attempting to reify: (Rows.from_associational weight (S n))
reify_preprocess : Attempting to preprocess:
(Rows.from_associational weight (S n))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Rows.from_associational weight)
reify_preprocess : Attempting to preprocess: (Rows.from_associational weight)
reify_base_type : Attempting to reify: (nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.from_associational
reify_preprocess : Attempting to preprocess: Rows.from_associational
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(Rows.from_columns (Columns.from_associational weight n p))
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: (Columns.from_associational weight n p)
reify_preprocess : Attempting to preprocess:
(Columns.from_associational weight n p)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: (Columns.from_associational weight n)
reify_preprocess : Attempting to preprocess:
(Columns.from_associational weight n)
reify_base_type : Attempting to reify: (list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (Columns.from_associational weight)
reify_preprocess : Attempting to preprocess: (Columns.from_associational weight)
reify_base_type : Attempting to reify: (nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Columns.from_associational
reify_preprocess : Attempting to preprocess: Columns.from_associational
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n) p)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Columns.nils n)
reify_preprocess : Attempting to preprocess: (Columns.nils n)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: Columns.nils
reify_preprocess : Attempting to preprocess: Columns.nils
reify_base_type : Attempting to reify: (nat -> list (list Z))
reify_base_type : Attempting to reify: (nat -> list (list Z))
reify_in_context : Attempting to reify: (fun n : nat => List.repeat nil n)
reify_preprocess : Attempting to preprocess: (fun n : nat => List.repeat nil n)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.repeat nil n)
reify_preprocess : Attempting to preprocess: (List.repeat nil n)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.repeat nil)
reify_preprocess : Attempting to preprocess: (List.repeat nil)
reify_base_type : Attempting to reify: (nat -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=list Z))
reify_base_type : Attempting to reify: (list Z -> nat -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)))
reify_base_type : Attempting to reify:
(list (list Z) -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (t : Z * Z) (ls : list (list Z)) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_preprocess : Attempting to preprocess:
(fun (t : Z * Z) (ls : list (list Z)) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls : list (list Z) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_preprocess : Attempting to preprocess:
(fun ls : list (list Z) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_in_context : Attempting to reify:
(Positional.place weight t (Init.Nat.pred n))
reify_preprocess : Attempting to preprocess:
(Positional.place weight t (Init.Nat.pred n))
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: (Init.Nat.pred n)
reify_preprocess : Attempting to preprocess: (Init.Nat.pred n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: Init.Nat.pred
reify_preprocess : Attempting to preprocess: Init.Nat.pred
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Positional.place weight t)
reify_preprocess : Attempting to preprocess: (Positional.place weight t)
reify_base_type : Attempting to reify: (nat -> nat * Z)
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: (Positional.place weight)
reify_preprocess : Attempting to preprocess: (Positional.place weight)
reify_base_type : Attempting to reify: (Z * Z -> nat -> nat * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Positional.place
reify_preprocess : Attempting to preprocess: Positional.place
reify_base_type : Attempting to reify: ((nat -> Z) -> Z * Z -> nat -> nat * Z)
reify_base_type : Attempting to reify: ((nat -> Z) -> Z * Z -> nat -> nat * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(fun (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun i : nat =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(fun i : nat =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i tt)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: tt
reify_preprocess : Attempting to preprocess: tt
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i)
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i)
reify_base_type : Attempting to reify: (unit -> nat * Z)
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt))
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt))
reify_base_type : Attempting to reify: (nat -> unit -> nat * Z)
reify_in_context : Attempting to reify:
(fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: ((fun _ : nat => unit -> nat * Z) i')
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
((fun i : nat =>
  if fst t mod weight i =? 0
  then (i, let c := fst t / weight i in c * snd t)
  else place_i' tt) (S i'))
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: (S i')
reify_preprocess : Attempting to preprocess: (S i')
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: i'
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify:
(fun i : nat =>
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun i : nat =>
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t))
   (fun _ : unit => place_i' tt) (fst t mod weight i =? 0))
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t mod weight i =? 0)
reify_preprocess : Attempting to preprocess: (fst t mod weight i =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (fst t mod weight i))
reify_preprocess : Attempting to preprocess: (Z.eqb (fst t mod weight i))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst t mod weight i)
reify_preprocess : Attempting to preprocess: (fst t mod weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight i)
reify_preprocess : Attempting to preprocess: (weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (Z.modulo (fst t))
reify_preprocess : Attempting to preprocess: (Z.modulo (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.modulo
reify_preprocess : Attempting to preprocess: Z.modulo
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t))
   (fun _ : unit => place_i' tt))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t))
   (fun _ : unit => place_i' tt))
reify_base_type : Attempting to reify: (bool -> nat * Z)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => place_i' tt)
reify_preprocess : Attempting to preprocess: (fun _ : unit => place_i' tt)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (place_i' tt)
reify_preprocess : Attempting to preprocess: (place_i' tt)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: tt
reify_preprocess : Attempting to preprocess: tt
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: place_i'
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t)))
reify_base_type : Attempting to reify: ((unit -> nat * Z) -> bool -> nat * Z)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => (i, let c := fst t / weight i in c * snd t))
reify_preprocess : Attempting to preprocess:
(fun _ : unit => (i, let c := fst t / weight i in c * snd t))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(i, let c := fst t / weight i in c * snd t)
reify_preprocess : Attempting to preprocess:
(i, let c := fst t / weight i in c * snd t)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (let c := fst t / weight i in c * snd t)
reify_preprocess : Attempting to preprocess:
(let c := fst t / weight i in c * snd t)
reify_preprocess : Attempting to preprocess:
((fun c : Z => c * snd t) (fst t / weight i))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t / weight i)
reify_preprocess : Attempting to preprocess: (fst t / weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight i)
reify_preprocess : Attempting to preprocess: (weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (Z.div (fst t))
reify_preprocess : Attempting to preprocess: (Z.div (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (fun c : Z => c * snd t)
reify_preprocess : Attempting to preprocess: (fun c : Z => c * snd t)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (c * snd t)
reify_preprocess : Attempting to preprocess: (c * snd t)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul c)
reify_preprocess : Attempting to preprocess: (Z.mul c)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair i)
reify_preprocess : Attempting to preprocess: (pair i)
reify_base_type : Attempting to reify: (Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (nat -> Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (nat * Z))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (nat * Z))
reify_base_type : Attempting to reify:
((unit -> nat * Z) -> (unit -> nat * Z) -> bool -> nat * Z)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t)))
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t)))
reify_base_type : Attempting to reify:
((nat -> (unit -> nat * Z) -> unit -> nat * Z) -> nat -> unit -> nat * Z)
reify_base_type : Attempting to reify: unit
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => (0%nat, fst t * snd t))
reify_preprocess : Attempting to preprocess:
(fun _ : unit => (0%nat, fst t * snd t))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (0%nat, fst t * snd t)
reify_preprocess : Attempting to preprocess: (0%nat, fst t * snd t)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * snd t)
reify_preprocess : Attempting to preprocess: (fst t * snd t)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair 0%nat)
reify_preprocess : Attempting to preprocess: (pair 0%nat)
reify_base_type : Attempting to reify: (Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (nat -> Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: NatUtil.nat_rect_arrow_nodep
reify_preprocess : Attempting to preprocess: NatUtil.nat_rect_arrow_nodep
reify_base_type : Attempting to reify:
((unit -> nat * Z) ->
 (nat -> (unit -> nat * Z) -> unit -> nat * Z) -> nat -> unit -> nat * Z)
reify_base_type : Attempting to reify: unit
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)
reify_preprocess : Attempting to preprocess:
(fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)
reify_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Columns.cons_to_nth (fst p) (snd p) ls)
reify_preprocess : Attempting to preprocess:
(Columns.cons_to_nth (fst p) (snd p) ls)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: ls
reify_in_context : Attempting to reify: (Columns.cons_to_nth (fst p) (snd p))
reify_preprocess : Attempting to preprocess:
(Columns.cons_to_nth (fst p) (snd p))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: (snd p)
reify_preprocess : Attempting to preprocess: (snd p)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (nat * Z -> Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Columns.cons_to_nth (fst p))
reify_preprocess : Attempting to preprocess: (Columns.cons_to_nth (fst p))
reify_base_type : Attempting to reify: (Z -> list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: (fst p)
reify_preprocess : Attempting to preprocess: (fst p)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (nat * Z -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Columns.cons_to_nth
reify_preprocess : Attempting to preprocess: Columns.cons_to_nth
reify_base_type : Attempting to reify:
(nat -> Z -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify:
(nat -> Z -> list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (i : nat) (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(fun (i : nat) (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(fun (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun xs : list (list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(fun xs : list (list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xs
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list))
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun y : list Z => (x :: y)%list)
reify_preprocess : Attempting to preprocess: (fun y : list Z => (x :: y)%list)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (x :: y)%list
reify_preprocess : Attempting to preprocess: (x :: y)%list
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: y
reify_in_context : Attempting to reify: (cons x)
reify_preprocess : Attempting to preprocess: (cons x)
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Crypto.Util.ListUtil.update_nth i)
reify_preprocess : Attempting to preprocess: (Crypto.Util.ListUtil.update_nth i)
reify_base_type : Attempting to reify:
((list Z -> list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Crypto.Util.ListUtil.update_nth
reify_preprocess : Attempting to preprocess: Crypto.Util.ListUtil.update_nth
reify_base_type : Attempting to reify:
(nat -> (list Z -> list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (A:=list (list Z)) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list (list Z)) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (list Z) -> list (list Z)) ->
 list (list Z) -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Rows.from_columns
reify_preprocess : Attempting to preprocess: Rows.from_columns
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_preprocess : Attempting to preprocess:
(snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.from_columns' (Rows.max_column_size inp) (inp, nil))
reify_preprocess : Attempting to preprocess:
(Rows.from_columns' (Rows.max_column_size inp) (inp, nil))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_in_context : Attempting to reify: (inp, nil)
reify_preprocess : Attempting to preprocess: (inp, nil)
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair inp)
reify_preprocess : Attempting to preprocess: (pair inp)
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.from_columns' (Rows.max_column_size inp))
reify_preprocess : Attempting to preprocess:
(Rows.from_columns' (Rows.max_column_size inp))
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z) * list (list Z))
reify_in_context : Attempting to reify: (Rows.max_column_size inp)
reify_preprocess : Attempting to preprocess: (Rows.max_column_size inp)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: Rows.max_column_size
reify_preprocess : Attempting to preprocess: Rows.max_column_size
reify_base_type : Attempting to reify: (list (list Z) -> nat)
reify_base_type : Attempting to reify: (list (list Z) -> nat)
reify_in_context : Attempting to reify:
(fun x : list (list Z) =>
 List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_preprocess : Attempting to preprocess:
(fun x : list (list Z) =>
 List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_preprocess : Attempting to preprocess:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => length c) x)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => length c) x)
reify_base_type : Attempting to reify: (list nat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: (List.map (fun c : list Z => length c))
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => length c))
reify_base_type : Attempting to reify: (list (list Z) -> list nat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (fun c : list Z => length c)
reify_preprocess : Attempting to preprocess: (fun c : list Z => length c)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (length c)
reify_preprocess : Attempting to preprocess: (length c)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (length (A:=Z))
reify_preprocess : Attempting to preprocess: (length (A:=Z))
reify_base_type : Attempting to reify: (list Z -> nat)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=list Z) (B:=nat))
reify_preprocess : Attempting to preprocess: (List.map (A:=list Z) (B:=nat))
reify_base_type : Attempting to reify:
((list Z -> nat) -> list (list Z) -> list nat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat)
reify_preprocess : Attempting to preprocess:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat)
reify_base_type : Attempting to reify: (list nat -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.fold_right (fun a b : nat => Nat.max a b))
reify_preprocess : Attempting to preprocess:
(List.fold_right (fun a b : nat => Nat.max a b))
reify_base_type : Attempting to reify: (nat -> list nat -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (fun a b : nat => Nat.max a b)
reify_preprocess : Attempting to preprocess: (fun a b : nat => Nat.max a b)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (fun b : nat => Nat.max a b)
reify_preprocess : Attempting to preprocess: (fun b : nat => Nat.max a b)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (Nat.max a b)
reify_preprocess : Attempting to preprocess: (Nat.max a b)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: b
reify_in_context : Attempting to reify: (Nat.max a)
reify_preprocess : Attempting to preprocess: (Nat.max a)
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: a
reify_in_context : Attempting to reify: Nat.max
reify_preprocess : Attempting to preprocess: Nat.max
reify_base_type : Attempting to reify: (nat -> nat -> nat)
reify_in_context : Attempting to reify: (List.fold_right (A:=nat) (B:=nat))
reify_preprocess : Attempting to preprocess: (List.fold_right (A:=nat) (B:=nat))
reify_base_type : Attempting to reify:
((nat -> nat -> nat) -> nat -> list nat -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: Rows.from_columns'
reify_preprocess : Attempting to preprocess: Rows.from_columns'
reify_base_type : Attempting to reify:
(nat -> list (list Z) * list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify:
(nat -> list (list Z) * list (list Z) -> list (list Z) * list (list Z))
reify_in_context : Attempting to reify:
(fun (n : nat) (start_state : list (list Z) * list (list Z)) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (start_state : list (list Z) * list (list Z)) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun start_state : list (list Z) * list (list Z) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_preprocess : Attempting to preprocess:
(fun start_state : list (list Z) * list (list Z) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat 0 n)
reify_preprocess : Attempting to preprocess: (List.repeat 0 n)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.repeat 0)
reify_preprocess : Attempting to preprocess: (List.repeat 0)
reify_base_type : Attempting to reify: (nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat (A:=Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=Z))
reify_base_type : Attempting to reify: (Z -> nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state)
reify_base_type : Attempting to reify: (list Z -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: start_state
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)))
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list Z -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : Z) (state : list (list Z) * list (list Z)) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun (_ : Z) (state : list (list Z) * list (list Z)) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun state : list (list Z) * list (list Z) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun state : list (list Z) * list (list Z) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
((fun cols'_row : list (list Z) * list Z =>
  (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
   (Rows.extract_row (fst state)))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_in_context : Attempting to reify: (Rows.extract_row (fst state))
reify_preprocess : Attempting to preprocess: (Rows.extract_row (fst state))
reify_base_type : Attempting to reify: (list (list Z) * list Z)%type
reify_in_context : Attempting to reify: (fst state)
reify_preprocess : Attempting to preprocess: (fst state)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Rows.extract_row
reify_preprocess : Attempting to preprocess: Rows.extract_row
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z) * list Z)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z) * list Z)
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 (List.map (fun c : list Z => List.tl c) inp,
 List.map (fun c : list Z => List.hd 0 c) inp))
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 (List.map (fun c : list Z => List.tl c) inp,
 List.map (fun c : list Z => List.hd 0 c) inp))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.tl c) inp,
List.map (fun c : list Z => List.hd 0 c) inp)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.tl c) inp,
List.map (fun c : list Z => List.hd 0 c) inp)
reify_base_type : Attempting to reify: (list (list Z) * list Z)%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.hd 0 c) inp)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.hd 0 c) inp)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.hd 0 c))
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.hd 0 c))
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun c : list Z => List.hd 0 c)
reify_preprocess : Attempting to preprocess: (fun c : list Z => List.hd 0 c)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd 0 c)
reify_preprocess : Attempting to preprocess: (List.hd 0 c)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (List.hd 0)
reify_preprocess : Attempting to preprocess: (List.hd 0)
reify_base_type : Attempting to reify: (list Z -> Z)
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd (A:=Z))
reify_preprocess : Attempting to preprocess: (List.hd (A:=Z))
reify_base_type : Attempting to reify: (Z -> list Z -> Z)
reify_in_context : Attempting to reify: List.hd
reify_preprocess : Attempting to preprocess: List.hd
reify_base_type : Attempting to reify: (forall A : Type, A -> list A -> A)
reify_base_type : Attempting to reify: (Z -> list Z -> Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_in_context : Attempting to reify:
(fun (default : Z) (l : list Z) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (default : Z) (l : list Z) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l : list Z => match l with
                   | nil => default
                   | (x :: _)%list => x
                   end)
reify_preprocess : Attempting to preprocess:
(fun l : list Z => match l with
                   | nil => default
                   | (x :: _)%list => x
                   end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case Z (fun _ : unit => default)
   (fun (x : Z) (_ : list Z) => x) l)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case Z (fun _ : unit => default)
   (fun (x : Z) (_ : list Z) => x))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case Z (fun _ : unit => default)
   (fun (x : Z) (_ : list Z) => x))
reify_base_type : Attempting to reify: (list Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun (x : Z) (_ : list Z) => x)
reify_preprocess : Attempting to preprocess: (fun (x : Z) (_ : list Z) => x)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : list Z => x)
reify_preprocess : Attempting to preprocess: (fun _ : list Z => x)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case Z (fun _ : unit => default))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case Z (fun _ : unit => default))
reify_base_type : Attempting to reify: ((Z -> list Z -> Z) -> list Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => default)
reify_preprocess : Attempting to preprocess: (fun _ : unit => default)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case Z)
reify_preprocess : Attempting to preprocess: (ListUtil.Thunked.list_case Z)
reify_base_type : Attempting to reify:
((unit -> Z) -> (Z -> list Z -> Z) -> list Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=list Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=list Z) (B:=Z))
reify_base_type : Attempting to reify:
((list Z -> Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(pair (List.map (fun c : list Z => List.tl c) inp))
reify_preprocess : Attempting to preprocess:
(pair (List.map (fun c : list Z => List.tl c) inp))
reify_base_type : Attempting to reify: (list Z -> list (list Z) * list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.tl c) inp)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.tl c) inp)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.map (fun c : list Z => List.tl c))
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.tl c))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun c : list Z => List.tl c)
reify_preprocess : Attempting to preprocess: (fun c : list Z => List.tl c)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.tl c)
reify_preprocess : Attempting to preprocess: (List.tl c)
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (List.tl (A:=Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list Z => match l with
                   | nil => nil
                   | (_ :: m)%list => m
                   end)
reify_preprocess : Attempting to preprocess:
(fun l : list Z => match l with
                   | nil => nil
                   | (_ :: m)%list => m
                   end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil)
   (fun (_ : Z) (m : list Z) => m) l)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil)
   (fun (_ : Z) (m : list Z) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil)
   (fun (_ : Z) (m : list Z) => m))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun (_ : Z) (m : list Z) => m)
reify_preprocess : Attempting to preprocess: (fun (_ : Z) (m : list Z) => m)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list Z => m)
reify_preprocess : Attempting to preprocess: (fun m : list Z => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((Z -> list Z -> list Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case (list Z))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) -> (Z -> list Z -> list Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=list Z) (B:=list Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=list Z) (B:=list Z))
reify_base_type : Attempting to reify:
((list Z -> list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (list Z) -> list Z -> list (list Z) * list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun cols'_row : list (list Z) * list Z =>
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun cols'_row : list (list Z) * list Z =>
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_type : Attempting to reify: (list (list Z) * list Z)%type
reify_base_type : Attempting to reify: (list (list Z) * list Z)%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd state ++ snd cols'_row :: nil)%list
reify_preprocess : Attempting to preprocess:
(snd state ++ snd cols'_row :: nil)%list
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd cols'_row :: nil)%list
reify_preprocess : Attempting to preprocess: (snd cols'_row :: nil)%list
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (snd cols'_row))
reify_preprocess : Attempting to preprocess: (cons (snd cols'_row))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd cols'_row)
reify_preprocess : Attempting to preprocess: (snd cols'_row)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cols'_row
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list (list Z) * list Z -> list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify:
(list Z -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app (snd state))
reify_preprocess : Attempting to preprocess: (app (snd state))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd state)
reify_preprocess : Attempting to preprocess: (snd state)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app (A:=list Z))
reify_preprocess : Attempting to preprocess: (app (A:=list Z))
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst cols'_row))
reify_preprocess : Attempting to preprocess: (pair (fst cols'_row))
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst cols'_row)
reify_preprocess : Attempting to preprocess: (fst cols'_row)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cols'_row
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list (list Z) * list Z -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (A:=list (list Z) * list (list Z)) (B:=Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list (list Z) * list (list Z)) (B:=Z))
reify_base_type : Attempting to reify:
((Z -> list (list Z) * list (list Z) -> list (list Z) * list (list Z)) ->
 list (list Z) * list (list Z) -> list Z -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun r_rows : list (list Z) =>
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun r_rows : list (list Z) =>
 let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows0 := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows0 in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let r_flat := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun r_flat : list Z * Z =>
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (2 * n)) p
  then
   let p_a := Positional.to_associational weight (S n) (fst r_flat) in
   let r_a := sat_reduce base s c (S n) p_a in
   let r_rows := Rows.from_associational weight (S n) r_a in
   let r_flat0 := Rows.flatten weight (S n) r_rows in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
  else
   let p_a :=
     Positional.to_associational weight (S n)
       (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
   let r_a := sat_reduce base s c (S n) p_a in
   let r_rows := Rows.from_associational weight (S n) r_a in
   let r_flat0 := Rows.flatten weight (S n) r_rows in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if
    is_bounded_by (List.repeat bound0 (S n))
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (Rows.flatten weight (S n) r_rows))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (Rows.flatten weight (S n) r_rows)
reify_preprocess : Attempting to preprocess: (Rows.flatten weight (S n) r_rows)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: r_rows
reify_in_context : Attempting to reify: (Rows.flatten weight (S n))
reify_preprocess : Attempting to preprocess: (Rows.flatten weight (S n))
reify_base_type : Attempting to reify: (list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Rows.flatten weight)
reify_preprocess : Attempting to preprocess: (Rows.flatten weight)
reify_base_type : Attempting to reify: (nat -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.flatten
reify_preprocess : Attempting to preprocess: Rows.flatten
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
((fun default : list Z =>
  Rows.flatten' weight (List.hd default inp, 0)
    (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
   (Positional.zeros n))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (Positional.zeros n)
reify_preprocess : Attempting to preprocess: (Positional.zeros n)
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: Positional.zeros
reify_preprocess : Attempting to preprocess: Positional.zeros
reify_base_type : Attempting to reify: (nat -> list Z)
reify_base_type : Attempting to reify: (nat -> list Z)
reify_in_context : Attempting to reify: (fun n : nat => List.repeat 0 n)
reify_preprocess : Attempting to preprocess: (fun n : nat => List.repeat 0 n)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.repeat 0 n)
reify_preprocess : Attempting to preprocess: (List.repeat 0 n)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.repeat 0)
reify_preprocess : Attempting to preprocess: (List.repeat 0)
reify_base_type : Attempting to reify: (nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat (A:=Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=Z))
reify_base_type : Attempting to reify: (Z -> nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun default : list Z =>
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun default : list Z =>
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify:
(List.hd default (List.tl inp) :: List.tl (List.tl inp))%list
reify_preprocess : Attempting to preprocess:
(List.hd default (List.tl inp) :: List.tl (List.tl inp))%list
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.tl (List.tl inp))
reify_preprocess : Attempting to preprocess: (List.tl (List.tl inp))
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: (List.tl inp)
reify_preprocess : Attempting to preprocess: (List.tl inp)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.tl (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m) l)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_preprocess : Attempting to preprocess:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list (list Z) => m)
reify_preprocess : Attempting to preprocess: (fun m : list (list Z) => m)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)))
reify_base_type : Attempting to reify:
((unit -> list (list Z)) ->
 (list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.tl (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m) l)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_preprocess : Attempting to preprocess:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list (list Z) => m)
reify_preprocess : Attempting to preprocess: (fun m : list (list Z) => m)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)))
reify_base_type : Attempting to reify:
((unit -> list (list Z)) ->
 (list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (List.hd default (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(cons (List.hd default (List.tl inp)))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd default (List.tl inp))
reify_preprocess : Attempting to preprocess: (List.hd default (List.tl inp))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (List.tl inp)
reify_preprocess : Attempting to preprocess: (List.tl inp)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.tl (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m) l)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_preprocess : Attempting to preprocess:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list (list Z) => m)
reify_preprocess : Attempting to preprocess: (fun m : list (list Z) => m)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)))
reify_base_type : Attempting to reify:
((unit -> list (list Z)) ->
 (list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd default)
reify_preprocess : Attempting to preprocess: (List.hd default)
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (List.hd (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.hd (A:=list Z))
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify: List.hd
reify_preprocess : Attempting to preprocess: List.hd
reify_base_type : Attempting to reify: (forall A : Type, A -> list A -> A)
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_in_context : Attempting to reify:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x) l)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_preprocess : Attempting to preprocess:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : list (list Z) => x)
reify_preprocess : Attempting to preprocess: (fun _ : list (list Z) => x)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => default)
reify_preprocess : Attempting to preprocess: (fun _ : unit => default)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case (list Z))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) ->
 (list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify:
(list Z -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.flatten' weight (List.hd default inp, 0))
reify_preprocess : Attempting to preprocess:
(Rows.flatten' weight (List.hd default inp, 0))
reify_base_type : Attempting to reify: (list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: (List.hd default inp, 0)
reify_preprocess : Attempting to preprocess: (List.hd default inp, 0)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (List.hd default inp))
reify_preprocess : Attempting to preprocess: (pair (List.hd default inp))
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd default inp)
reify_preprocess : Attempting to preprocess: (List.hd default inp)
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.hd default)
reify_preprocess : Attempting to preprocess: (List.hd default)
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (List.hd (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.hd (A:=list Z))
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify: List.hd
reify_preprocess : Attempting to preprocess: List.hd
reify_base_type : Attempting to reify: (forall A : Type, A -> list A -> A)
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_in_context : Attempting to reify:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x) l)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_preprocess : Attempting to preprocess:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : list (list Z) => x)
reify_preprocess : Attempting to preprocess: (fun _ : list (list Z) => x)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => default)
reify_preprocess : Attempting to preprocess: (fun _ : unit => default)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case (list Z))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) ->
 (list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Rows.flatten' weight)
reify_preprocess : Attempting to preprocess: (Rows.flatten' weight)
reify_base_type : Attempting to reify:
(list Z * Z -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.flatten'
reify_preprocess : Attempting to preprocess: Rows.flatten'
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(fun (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state)
reify_base_type : Attempting to reify: (list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: start_state
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)))
reify_base_type : Attempting to reify:
(list Z * Z -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (next_row : list Z) (state : list Z * Z) =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(fun (next_row : list Z) (state : list Z * Z) =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun state : list Z * Z =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(fun state : list Z * Z =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
((fun out_carry : list Z * Z => (fst out_carry, snd state + snd out_carry))
   (Rows.sum_rows weight (fst state) next_row))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify:
(Rows.sum_rows weight (fst state) next_row)
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows weight (fst state) next_row)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: next_row
reify_in_context : Attempting to reify: (Rows.sum_rows weight (fst state))
reify_preprocess : Attempting to preprocess: (Rows.sum_rows weight (fst state))
reify_base_type : Attempting to reify: (list Z -> list Z * Z)
reify_in_context : Attempting to reify: (fst state)
reify_preprocess : Attempting to preprocess: (fst state)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Rows.sum_rows weight)
reify_preprocess : Attempting to preprocess: (Rows.sum_rows weight)
reify_base_type : Attempting to reify: (list Z -> list Z -> list Z * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.sum_rows
reify_preprocess : Attempting to preprocess: Rows.sum_rows
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z -> list Z -> list Z * Z)
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z -> list Z -> list Z * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (row1 row2 : list Z) =>
 fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (row1 row2 : list Z) =>
 fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun row1 row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fun row1 row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fun row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2)
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_in_context : Attempting to reify: row2
reify_in_context : Attempting to reify:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1)
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1)
reify_base_type : Attempting to reify: (list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify: row1
reify_in_context : Attempting to reify: (Rows.sum_rows' weight (nil, 0, 0%nat))
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows' weight (nil, 0, 0%nat))
reify_base_type : Attempting to reify: (list Z -> list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify: (nil, 0, 0%nat)
reify_preprocess : Attempting to preprocess: (nil, 0, 0%nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (pair (nil, 0))
reify_preprocess : Attempting to preprocess: (pair (nil, 0))
reify_base_type : Attempting to reify: (nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (nil, 0)
reify_preprocess : Attempting to preprocess: (nil, 0)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair nil)
reify_preprocess : Attempting to preprocess: (pair nil)
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z * Z -> nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (Rows.sum_rows' weight)
reify_preprocess : Attempting to preprocess: (Rows.sum_rows' weight)
reify_base_type : Attempting to reify:
(list Z * Z * nat -> list Z -> list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.sum_rows'
reify_preprocess : Attempting to preprocess: Rows.sum_rows'
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z * nat -> list Z -> list Z -> list Z * Z * nat)
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z * nat -> list Z -> list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (start_state : list Z * Z * nat) (row1 row2 : list Z)
 =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (start_state : list Z * Z * nat) (row1 row2 : list Z)
 =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (start_state : list Z * Z * nat) (row1 row2 : list Z) =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun (start_state : list Z * Z * nat) (row1 row2 : list Z) =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun row1 row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun row1 row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.rev (List.combine row1 row2))
reify_preprocess : Attempting to preprocess: (List.rev (List.combine row1 row2))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.combine row1 row2)
reify_preprocess : Attempting to preprocess: (List.combine row1 row2)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: row2
reify_in_context : Attempting to reify: (List.combine (B:=Z) row1)
reify_preprocess : Attempting to preprocess: (List.combine (B:=Z) row1)
reify_base_type : Attempting to reify: (list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: row1
reify_in_context : Attempting to reify: (List.combine (A:=Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.combine (A:=Z) (B:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.rev (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.rev (A:=Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state)
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: start_state
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)))
reify_base_type : Attempting to reify:
(list Z * Z * nat -> list (Z * Z) -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (next : Z * Z) (state : list Z * Z * nat) =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun (next : Z * Z) (state : list Z * Z * nat) =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun state : list Z * Z * nat =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun state : list Z * Z * nat =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
((fun i : nat =>
  let low_high' :=
    let low_high := fst state in
    let low := fst low_high in
    let high := snd low_high in
    Rewriter.Util.LetIn.Let_In
      (Definitions.Z.add_with_get_carry_full
         ((fun i0 : nat => weight (S i0) / weight i0) i) high
         (fst next) (snd next))
      (fun sum_carry : Z * Z =>
       ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
  (low_high', S i)) (snd state))
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_in_context : Attempting to reify: (snd state)
reify_preprocess : Attempting to preprocess: (snd state)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z * nat -> nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun i : nat =>
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun i : nat =>
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i : nat => weight (S i) / weight i) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i : nat => weight (S i) / weight i) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
((fun
    low_high' : (fun _ : Z * Z => (list Z * Z)%type)
                  (Definitions.Z.add_with_get_carry_full
                     ((fun i : nat => weight (S i) / weight i) i)
                     (snd (fst state)) (fst next) (snd next)) =>
  (low_high', S i))
   (let low_high := fst state in
    let low := fst low_high in
    let high := snd low_high in
    Rewriter.Util.LetIn.Let_In
      (Definitions.Z.add_with_get_carry_full
         ((fun i : nat => weight (S i) / weight i) i) high
         (fst next) (snd next))
      (fun sum_carry : Z * Z =>
       ((low ++ fst sum_carry :: nil)%list, snd sum_carry))))
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_in_context : Attempting to reify:
(let low_high := fst state in
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(let low_high := fst state in
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
((fun low_high : list Z * Z =>
  let low := fst low_high in
  let high := snd low_high in
  Rewriter.Util.LetIn.Let_In
    (Definitions.Z.add_with_get_carry_full
       ((fun i : nat => weight (S i) / weight i) i) high
       (fst next) (snd next))
    (fun sum_carry : Z * Z =>
     ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
   (fst state))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (fst state)
reify_preprocess : Attempting to preprocess: (fst state)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z * nat -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun low_high : list Z * Z =>
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(fun low_high : list Z * Z =>
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
((fun low : list Z =>
  let high := snd low_high in
  Rewriter.Util.LetIn.Let_In
    (Definitions.Z.add_with_get_carry_full
       ((fun i : nat => weight (S i) / weight i) i) high
       (fst next) (snd next))
    (fun sum_carry : Z * Z =>
     ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
   (fst low_high))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (fst low_high)
reify_preprocess : Attempting to preprocess: (fst low_high)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: low_high
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun low : list Z =>
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(fun low : list Z =>
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
((fun high : Z =>
  Rewriter.Util.LetIn.Let_In
    (Definitions.Z.add_with_get_carry_full
       ((fun i : nat => weight (S i) / weight i) i) high
       (fst next) (snd next))
    (fun sum_carry : Z * Z =>
     ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
   (snd low_high))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (snd low_high)
reify_preprocess : Attempting to preprocess: (snd low_high)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: low_high
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun high : Z =>
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(fun high : Z =>
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next) (snd next))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next) (snd next))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_in_context : Attempting to reify: (snd next)
reify_preprocess : Attempting to preprocess: (snd next)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: next
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_in_context : Attempting to reify: (fst next)
reify_preprocess : Attempting to preprocess: (fst next)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: next
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high)
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high)
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_in_context : Attempting to reify: high
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i))
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
((fun i : nat => weight (S i) / weight i) i)
reify_preprocess : Attempting to preprocess:
((fun i : nat => weight (S i) / weight i) i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: (fun i : nat => weight (S i) / weight i)
reify_preprocess : Attempting to preprocess:
(fun i : nat => weight (S i) / weight i)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (weight (S i) / weight i)
reify_preprocess : Attempting to preprocess: (weight (S i) / weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight i)
reify_preprocess : Attempting to preprocess: (weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (Z.div (weight (S i)))
reify_preprocess : Attempting to preprocess: (Z.div (weight (S i)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (weight (S i))
reify_preprocess : Attempting to preprocess: (weight (S i))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (S i)
reify_preprocess : Attempting to preprocess: (S i)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Definitions.Z.add_with_get_carry_full
reify_preprocess : Attempting to preprocess:
Definitions.Z.add_with_get_carry_full
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
(fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry))
reify_preprocess : Attempting to preprocess:
(fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((low ++ fst sum_carry :: nil)%list, snd sum_carry)
reify_preprocess : Attempting to preprocess:
((low ++ fst sum_carry :: nil)%list, snd sum_carry)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd sum_carry)
reify_preprocess : Attempting to preprocess: (snd sum_carry)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: sum_carry
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(pair (low ++ fst sum_carry :: nil)%list)
reify_preprocess : Attempting to preprocess:
(pair (low ++ fst sum_carry :: nil)%list)
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (low ++ fst sum_carry :: nil)%list
reify_preprocess : Attempting to preprocess: (low ++ fst sum_carry :: nil)%list
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst sum_carry :: nil)%list
reify_preprocess : Attempting to preprocess: (fst sum_carry :: nil)%list
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst sum_carry))
reify_preprocess : Attempting to preprocess: (cons (fst sum_carry))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst sum_carry)
reify_preprocess : Attempting to preprocess: (fst sum_carry)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: sum_carry
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app low)
reify_preprocess : Attempting to preprocess: (app low)
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: low
reify_in_context : Attempting to reify: (app (A:=Z))
reify_preprocess : Attempting to preprocess: (app (A:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun
   low_high' : (fun _ : Z * Z => (list Z * Z)%type)
                 (Definitions.Z.add_with_get_carry_full
                    ((fun i : nat => weight (S i) / weight i) i)
                    (snd (fst state)) (fst next) (snd next)) =>
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun
   low_high' : (fun _ : Z * Z => (list Z * Z)%type)
                 (Definitions.Z.add_with_get_carry_full
                    ((fun i : nat => weight (S i) / weight i) i)
                    (snd (fst state)) (fst next) (snd next)) =>
 (low_high', S i))
reify_type : Attempting to reify:
((fun _ : Z * Z => (list Z * Z)%type)
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) (snd (fst state))
      (fst next) (snd next)))
reify_base_type : Attempting to reify:
((fun _ : Z * Z => (list Z * Z)%type)
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) (snd (fst state))
      (fst next) (snd next)))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (low_high', S i)
reify_preprocess : Attempting to preprocess: (low_high', S i)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (S i)
reify_preprocess : Attempting to preprocess: (S i)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (pair low_high')
reify_preprocess : Attempting to preprocess: (pair low_high')
reify_base_type : Attempting to reify: (nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: low_high'
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z * Z -> nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.fold_right (A:=list Z * Z * nat) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list Z * Z * nat) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list Z * Z * nat -> list Z * Z * nat) ->
 list Z * Z * nat -> list (Z * Z) -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z * nat -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun out_carry : list Z * Z => (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(fun out_carry : list Z * Z => (fst out_carry, snd state + snd out_carry))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fst out_carry, snd state + snd out_carry)
reify_preprocess : Attempting to preprocess:
(fst out_carry, snd state + snd out_carry)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd state + snd out_carry)
reify_preprocess : Attempting to preprocess: (snd state + snd out_carry)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd out_carry)
reify_preprocess : Attempting to preprocess: (snd out_carry)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: out_carry
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.add (snd state))
reify_preprocess : Attempting to preprocess: (Z.add (snd state))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (snd state)
reify_preprocess : Attempting to preprocess: (snd state)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.add
reify_preprocess : Attempting to preprocess: Z.add
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair (fst out_carry))
reify_preprocess : Attempting to preprocess: (pair (fst out_carry))
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst out_carry)
reify_preprocess : Attempting to preprocess: (fst out_carry)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: out_carry
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (A:=list Z * Z) (B:=list Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list Z * Z) (B:=list Z))
reify_base_type : Attempting to reify:
((list Z -> list Z * Z -> list Z * Z) ->
 list Z * Z -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun r_flat : list Z * Z =>
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun r_flat : list Z * Z =>
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun bound : Z * Z =>
  if is_bounded_by (List.repeat bound (2 * n)) p
  then
   let p_a := Positional.to_associational weight (S n) (fst r_flat) in
   let r_a := sat_reduce base s c (S n) p_a in
   let r_rows := Rows.from_associational weight (S n) r_a in
   let r_flat0 := Rows.flatten weight (S n) r_rows in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
  else
   let p_a :=
     Positional.to_associational weight (S n)
       (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
   let r_a := sat_reduce base s c (S n) p_a in
   let r_rows := Rows.from_associational weight (S n) r_a in
   let r_flat0 := Rows.flatten weight (S n) r_rows in
   let bound0 := (0, 2 ^ machine_wordsize - 1) in
   if
    is_bounded_by (List.repeat bound0 (S n))
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   then fst r_flat0
   else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (0, 2 ^ machine_wordsize - 1))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (0, 2 ^ machine_wordsize - 1)
reify_preprocess : Attempting to preprocess: (0, 2 ^ machine_wordsize - 1)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (2 ^ machine_wordsize - 1)
reify_preprocess : Attempting to preprocess: (2 ^ machine_wordsize - 1)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.sub (2 ^ machine_wordsize))
reify_preprocess : Attempting to preprocess: (Z.sub (2 ^ machine_wordsize))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (2 ^ machine_wordsize)
reify_preprocess : Attempting to preprocess: (2 ^ machine_wordsize)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: machine_wordsize
reify_in_context : Attempting to reify: (Z.pow 2)
reify_preprocess : Attempting to preprocess: (Z.pow 2)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: 2
reify_preprocess : Attempting to preprocess: 2
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.pow
reify_preprocess : Attempting to preprocess: Z.pow
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.sub
reify_preprocess : Attempting to preprocess: Z.sub
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair 0)
reify_preprocess : Attempting to preprocess: (pair 0)
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun bound : Z * Z =>
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun bound : Z * Z =>
 if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound0 (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound0 := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound0 (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(if is_bounded_by (List.repeat bound (2 * n)) p
 then
  let p_a := Positional.to_associational weight (S n) (fst r_flat) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)
 else
  let p_a :=
    Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list Z)
   (fun _ : unit =>
    let p_a := Positional.to_associational weight (S n) (fst r_flat) in
    let r_a := sat_reduce base s c (S n) p_a in
    let r_rows := Rows.from_associational weight (S n) r_a in
    let r_flat0 := Rows.flatten weight (S n) r_rows in
    let bound := (0, 2 ^ machine_wordsize - 1) in
    if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
    then fst r_flat0
    else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (fun _ : unit =>
    let p_a :=
      Positional.to_associational weight (S n)
        (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
    let r_a := sat_reduce base s c (S n) p_a in
    let r_rows := Rows.from_associational weight (S n) r_a in
    let r_flat0 := Rows.flatten weight (S n) r_rows in
    let bound := (0, 2 ^ machine_wordsize - 1) in
    if
     is_bounded_by (List.repeat bound (S n))
       (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
    then fst r_flat0
    else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (is_bounded_by (List.repeat bound (2 * n)) p))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(is_bounded_by (List.repeat bound (2 * n)) p)
reify_preprocess : Attempting to preprocess:
(is_bounded_by (List.repeat bound (2 * n)) p)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(is_bounded_by (List.repeat bound (2 * n)))
reify_preprocess : Attempting to preprocess:
(is_bounded_by (List.repeat bound (2 * n)))
reify_base_type : Attempting to reify: (list Z -> bool)
reify_in_context : Attempting to reify: (List.repeat bound (2 * n))
reify_preprocess : Attempting to preprocess: (List.repeat bound (2 * n))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (2 * n)%nat
reify_preprocess : Attempting to preprocess: (2 * n)%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (Init.Nat.mul 2)
reify_preprocess : Attempting to preprocess: (Init.Nat.mul 2)
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: 2%nat
reify_preprocess : Attempting to preprocess: 2%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: Init.Nat.mul
reify_preprocess : Attempting to preprocess: Init.Nat.mul
reify_base_type : Attempting to reify: (nat -> nat -> nat)
reify_in_context : Attempting to reify: (List.repeat bound)
reify_preprocess : Attempting to preprocess: (List.repeat bound)
reify_base_type : Attempting to reify: (nat -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: bound
reify_in_context : Attempting to reify: (List.repeat (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=Z * Z))
reify_base_type : Attempting to reify: (Z * Z -> nat -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: is_bounded_by
reify_preprocess : Attempting to preprocess: is_bounded_by
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> bool)
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify:
(fun (bounds : list (Z * Z)) (ls : list Z) =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_preprocess : Attempting to preprocess:
(fun (bounds : list (Z * Z)) (ls : list Z) =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls : list Z =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_preprocess : Attempting to preprocess:
(fun ls : list Z =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_preprocess : Attempting to preprocess:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: ls
reify_in_context : Attempting to reify:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds)
reify_preprocess : Attempting to preprocess:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds)
reify_base_type : Attempting to reify: (list Z -> bool)
reify_in_context : Attempting to reify: bounds
reify_in_context : Attempting to reify:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)))
reify_preprocess : Attempting to preprocess:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)))
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify:
(fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r))
reify_preprocess : Attempting to preprocess:
(fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun v'' : Z => (fst r <=? v'') && (v'' <=? snd r))
reify_preprocess : Attempting to preprocess:
(fun v'' : Z => (fst r <=? v'') && (v'' <=? snd r))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: ((fst r <=? v'') && (v'' <=? snd r))
reify_preprocess : Attempting to preprocess:
((fst r <=? v'') && (v'' <=? snd r))
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (v'' <=? snd r)
reify_preprocess : Attempting to preprocess: (v'' <=? snd r)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (snd r)
reify_preprocess : Attempting to preprocess: (snd r)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.leb v'')
reify_preprocess : Attempting to preprocess: (Z.leb v'')
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: v''
reify_in_context : Attempting to reify: Z.leb
reify_preprocess : Attempting to preprocess: Z.leb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify: (andb (fst r <=? v''))
reify_preprocess : Attempting to preprocess: (andb (fst r <=? v''))
reify_base_type : Attempting to reify: (bool -> bool)
reify_in_context : Attempting to reify: (fst r <=? v'')
reify_preprocess : Attempting to preprocess: (fst r <=? v'')
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: v''
reify_in_context : Attempting to reify: (Z.leb (fst r))
reify_preprocess : Attempting to preprocess: (Z.leb (fst r))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst r)
reify_preprocess : Attempting to preprocess: (fst r)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.leb
reify_preprocess : Attempting to preprocess: Z.leb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify: andb
reify_preprocess : Attempting to preprocess: andb
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_in_context : Attempting to reify:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false) b1)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: b1
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_base_type : Attempting to reify: (bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => false)
reify_preprocess : Attempting to preprocess: (fun _ : unit => false)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: false
reify_preprocess : Attempting to preprocess: false
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_base_type : Attempting to reify: ((unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => b2)
reify_preprocess : Attempting to preprocess: (fun _ : unit => b2)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: b2
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect bool)
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect bool)
reify_base_type : Attempting to reify:
((unit -> bool) -> (unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: fold_andb_map'
reify_preprocess : Attempting to preprocess: fold_andb_map'
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify: (@fold_andb_map' (Z * Z))
reify_preprocess : Attempting to preprocess: (@fold_andb_map' (Z * Z))
reify_base_type : Attempting to reify:
(forall B : Type, (Z * Z -> B -> bool) -> list (Z * Z) -> list B -> bool)
reify_in_context : Attempting to reify: @fold_andb_map'
reify_preprocess : Attempting to preprocess: @fold_andb_map'
reify_base_type : Attempting to reify:
(forall A B : Type, (A -> B -> bool) -> list A -> list B -> bool)
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify:
(fun (A B : Type) (f : A -> B -> bool) (ls1 : list A) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (A B : Type) (f : A -> B -> bool) (ls1 : list A) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_in_context : Attempting to reify:
(fun (B : Type) (f : Z * Z -> B -> bool) (ls1 : list (Z * Z)) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (B : Type) (f : Z * Z -> B -> bool) (ls1 : list (Z * Z)) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_in_context : Attempting to reify:
(fun (f : Z * Z -> Z -> bool) (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (f : Z * Z -> Z -> bool) (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_type : Attempting to reify: (Z * Z -> Z -> bool)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: (Z -> bool)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls2 : list Z => List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun ls2 : list Z => List.fold_right andb true (dual_map f ls1 ls2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(List.fold_right andb true (dual_map f ls1 ls2))
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (dual_map f ls1 ls2)
reify_preprocess : Attempting to preprocess: (dual_map f ls1 ls2)
reify_base_type : Attempting to reify: (list bool)
reify_in_context : Attempting to reify: ls2
reify_in_context : Attempting to reify: (dual_map f ls1)
reify_preprocess : Attempting to preprocess: (dual_map f ls1)
reify_base_type : Attempting to reify: (list Z -> list bool)
reify_in_context : Attempting to reify: ls1
reify_in_context : Attempting to reify: (dual_map f)
reify_preprocess : Attempting to preprocess: (dual_map f)
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> list bool)
reify_in_context : Attempting to reify: f
reify_in_context : Attempting to reify: dual_map
reify_preprocess : Attempting to preprocess: dual_map
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> list bool)
reify_in_context : Attempting to reify: (@dual_map (Z * Z))
reify_preprocess : Attempting to preprocess: (@dual_map (Z * Z))
reify_base_type : Attempting to reify:
(forall B : Type, (Z * Z -> B -> bool) -> list (Z * Z) -> list B -> list bool)
reify_in_context : Attempting to reify: @dual_map
reify_preprocess : Attempting to preprocess: @dual_map
reify_base_type : Attempting to reify:
(forall A B : Type, (A -> B -> bool) -> list A -> list B -> list bool)
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> list bool)
reify_in_context : Attempting to reify:
(fun (A B : Type) (f : A -> B -> bool) (l1 : list A) (l2 : list B) =>
 List.map (fun x : A * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (A B : Type) (f : A -> B -> bool) (l1 : list A) (l2 : list B) =>
 List.map (fun x : A * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_in_context : Attempting to reify:
(fun (B : Type) (f : Z * Z -> B -> bool) (l1 : list (Z * Z)) (l2 : list B) =>
 List.map (fun x : Z * Z * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (B : Type) (f : Z * Z -> B -> bool) (l1 : list (Z * Z)) (l2 : list B) =>
 List.map (fun x : Z * Z * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_in_context : Attempting to reify:
(fun (f : Z * Z -> Z -> bool) (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (f : Z * Z -> Z -> bool) (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_type : Attempting to reify: (Z * Z -> Z -> bool)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: (Z -> bool)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l2 : list Z =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun l2 : list Z =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_base_type : Attempting to reify: (list bool)
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.combine l1 l2)
reify_preprocess : Attempting to preprocess: (List.combine l1 l2)
reify_base_type : Attempting to reify: (list (Z * Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l2
reify_in_context : Attempting to reify: (List.combine (B:=Z) l1)
reify_preprocess : Attempting to preprocess: (List.combine (B:=Z) l1)
reify_base_type : Attempting to reify: (list Z -> list (Z * Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l1
reify_in_context : Attempting to reify: (List.combine (A:=Z * Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.combine (A:=Z * Z) (B:=Z))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list Z -> list (Z * Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)))
reify_preprocess : Attempting to preprocess:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)))
reify_base_type : Attempting to reify: (list (Z * Z * Z) -> list bool)
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun x : Z * Z * Z => f (fst x) (snd x))
reify_preprocess : Attempting to preprocess:
(fun x : Z * Z * Z => f (fst x) (snd x))
reify_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (f (fst x) (snd x))
reify_preprocess : Attempting to preprocess: (f (fst x) (snd x))
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (snd x)
reify_preprocess : Attempting to preprocess: (snd x)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z * Z -> Z)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (f (fst x))
reify_preprocess : Attempting to preprocess: (f (fst x))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst x)
reify_preprocess : Attempting to preprocess: (fst x)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z * Z -> Z * Z)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: f
reify_in_context : Attempting to reify: (List.map (A:=Z * Z * Z) (B:=bool))
reify_preprocess : Attempting to preprocess: (List.map (A:=Z * Z * Z) (B:=bool))
reify_base_type : Attempting to reify:
((Z * Z * Z -> bool) -> list (Z * Z * Z) -> list bool)
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right andb true)
reify_preprocess : Attempting to preprocess: (List.fold_right andb true)
reify_base_type : Attempting to reify: (list bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: true
reify_preprocess : Attempting to preprocess: true
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right andb)
reify_preprocess : Attempting to preprocess: (List.fold_right andb)
reify_base_type : Attempting to reify: (bool -> list bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: andb
reify_preprocess : Attempting to preprocess: andb
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_in_context : Attempting to reify:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false) b1)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: b1
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_base_type : Attempting to reify: (bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => false)
reify_preprocess : Attempting to preprocess: (fun _ : unit => false)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: false
reify_preprocess : Attempting to preprocess: false
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_base_type : Attempting to reify: ((unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => b2)
reify_preprocess : Attempting to preprocess: (fun _ : unit => b2)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: b2
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect bool)
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect bool)
reify_base_type : Attempting to reify:
((unit -> bool) -> (unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right (A:=bool) (B:=bool))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=bool) (B:=bool))
reify_base_type : Attempting to reify:
((bool -> bool -> bool) -> bool -> list bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list Z)
   (fun _ : unit =>
    let p_a := Positional.to_associational weight (S n) (fst r_flat) in
    let r_a := sat_reduce base s c (S n) p_a in
    let r_rows := Rows.from_associational weight (S n) r_a in
    let r_flat0 := Rows.flatten weight (S n) r_rows in
    let bound := (0, 2 ^ machine_wordsize - 1) in
    if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
    then fst r_flat0
    else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (fun _ : unit =>
    let p_a :=
      Positional.to_associational weight (S n)
        (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
    let r_a := sat_reduce base s c (S n) p_a in
    let r_rows := Rows.from_associational weight (S n) r_a in
    let r_flat0 := Rows.flatten weight (S n) r_rows in
    let bound := (0, 2 ^ machine_wordsize - 1) in
    if
     is_bounded_by (List.repeat bound (S n))
       (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
    then fst r_flat0
    else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list Z)
   (fun _ : unit =>
    let p_a := Positional.to_associational weight (S n) (fst r_flat) in
    let r_a := sat_reduce base s c (S n) p_a in
    let r_rows := Rows.from_associational weight (S n) r_a in
    let r_flat0 := Rows.flatten weight (S n) r_rows in
    let bound := (0, 2 ^ machine_wordsize - 1) in
    if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
    then fst r_flat0
    else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (fun _ : unit =>
    let p_a :=
      Positional.to_associational weight (S n)
        (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
    let r_a := sat_reduce base s c (S n) p_a in
    let r_rows := Rows.from_associational weight (S n) r_a in
    let r_flat0 := Rows.flatten weight (S n) r_rows in
    let bound := (0, 2 ^ machine_wordsize - 1) in
    if
     is_bounded_by (List.repeat bound (S n))
       (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
    then fst r_flat0
    else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)))
reify_base_type : Attempting to reify: (bool -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 let p_a :=
   Positional.to_associational weight (S n)
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 let p_a :=
   Positional.to_associational weight (S n)
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(let p_a :=
   Positional.to_associational weight (S n)
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let p_a :=
   Positional.to_associational weight (S n)
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)) in
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun p_a : list (Z * Z) =>
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (Positional.to_associational weight (S n)
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify:
(Positional.to_associational weight (S n)
   (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)))
reify_preprocess : Attempting to preprocess:
(Positional.to_associational weight (S n)
   (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (fst r_flat)
reify_preprocess : Attempting to preprocess: (fst r_flat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat))
reify_preprocess : Attempting to preprocess:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_in_context : Attempting to reify: (weight (S n) * snd r_flat)
reify_preprocess : Attempting to preprocess: (weight (S n) * snd r_flat)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd r_flat)
reify_preprocess : Attempting to preprocess: (snd r_flat)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (weight (S n)))
reify_preprocess : Attempting to preprocess: (Z.mul (weight (S n)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (weight (S n))
reify_preprocess : Attempting to preprocess: (weight (S n))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (Positional.add_to_nth 0)
reify_preprocess : Attempting to preprocess: (Positional.add_to_nth 0)
reify_base_type : Attempting to reify: (Z -> list Z -> list Z)
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: Positional.add_to_nth
reify_preprocess : Attempting to preprocess: Positional.add_to_nth
reify_base_type : Attempting to reify: (nat -> Z -> list Z -> list Z)
reify_base_type : Attempting to reify: (nat -> Z -> list Z -> list Z)
reify_in_context : Attempting to reify:
(fun (i : nat) (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun (i : nat) (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls : list Z => Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun ls : list Z => Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: ls
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y))
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun y : Z => x + y)
reify_preprocess : Attempting to preprocess: (fun y : Z => x + y)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (x + y)
reify_preprocess : Attempting to preprocess: (x + y)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: y
reify_in_context : Attempting to reify: (Z.add x)
reify_preprocess : Attempting to preprocess: (Z.add x)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: Z.add
reify_preprocess : Attempting to preprocess: Z.add
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (Crypto.Util.ListUtil.update_nth i)
reify_preprocess : Attempting to preprocess: (Crypto.Util.ListUtil.update_nth i)
reify_base_type : Attempting to reify: ((Z -> Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Crypto.Util.ListUtil.update_nth
reify_preprocess : Attempting to preprocess: Crypto.Util.ListUtil.update_nth
reify_base_type : Attempting to reify: (nat -> (Z -> Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Positional.to_associational weight (S n))
reify_preprocess : Attempting to preprocess:
(Positional.to_associational weight (S n))
reify_base_type : Attempting to reify: (list Z -> list (Z * Z))
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Positional.to_associational weight)
reify_preprocess : Attempting to preprocess:
(Positional.to_associational weight)
reify_base_type : Attempting to reify: (nat -> list Z -> list (Z * Z))
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Positional.to_associational
reify_preprocess : Attempting to preprocess: Positional.to_associational
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list Z -> list (Z * Z))
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list Z -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (xs : list Z) =>
 List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (xs : list Z) =>
 List.combine (List.map weight (List.seq 0 n)) xs)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (xs : list Z) => List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (xs : list Z) => List.combine (List.map weight (List.seq 0 n)) xs)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun xs : list Z => List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(fun xs : list Z => List.combine (List.map weight (List.seq 0 n)) xs)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(List.combine (List.map weight (List.seq 0 n)) xs)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xs
reify_in_context : Attempting to reify:
(List.combine (B:=Z) (List.map weight (List.seq 0 n)))
reify_preprocess : Attempting to preprocess:
(List.combine (B:=Z) (List.map weight (List.seq 0 n)))
reify_base_type : Attempting to reify: (list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map weight (List.seq 0 n))
reify_preprocess : Attempting to preprocess: (List.map weight (List.seq 0 n))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.seq 0 n)
reify_preprocess : Attempting to preprocess: (List.seq 0 n)
reify_base_type : Attempting to reify: (list nat)
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.seq 0)
reify_preprocess : Attempting to preprocess: (List.seq 0)
reify_base_type : Attempting to reify: (nat -> list nat)
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: List.seq
reify_preprocess : Attempting to preprocess: List.seq
reify_base_type : Attempting to reify: (nat -> nat -> list nat)
reify_in_context : Attempting to reify: (List.map weight)
reify_preprocess : Attempting to preprocess: (List.map weight)
reify_base_type : Attempting to reify: (list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (List.map (A:=nat) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=nat) (B:=Z))
reify_base_type : Attempting to reify: ((nat -> Z) -> list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.combine (A:=Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.combine (A:=Z) (B:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p_a : list (Z * Z) =>
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun p_a : list (Z * Z) =>
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun r_a : list (Z * Z) =>
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (sat_reduce base s c (S n) p_a))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (sat_reduce base s c (S n) p_a)
reify_preprocess : Attempting to preprocess: (sat_reduce base s c (S n) p_a)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: p_a
reify_in_context : Attempting to reify: (sat_reduce base s c (S n))
reify_preprocess : Attempting to preprocess: (sat_reduce base s c (S n))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (sat_reduce base s c)
reify_preprocess : Attempting to preprocess: (sat_reduce base s c)
reify_base_type : Attempting to reify: (nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (sat_reduce base s)
reify_preprocess : Attempting to preprocess: (sat_reduce base s)
reify_base_type : Attempting to reify:
(list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (sat_reduce base)
reify_preprocess : Attempting to preprocess: (sat_reduce base)
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: base
reify_in_context : Attempting to reify: sat_reduce
reify_preprocess : Attempting to preprocess: sat_reduce
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify:
(let machine_wordsize := 64 in
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let machine_wordsize := 64 in
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun machine_wordsize : Z =>
  let weight := UniformWeight.uweight machine_wordsize in
  fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
  let s' := fst (Rows.adjust_s weight (S (S n)) s) in
  let lo_hi := Associational.split s' p in
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) 64)
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: 64
reify_preprocess : Attempting to preprocess: 64
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun machine_wordsize : Z =>
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun machine_wordsize : Z =>
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z))
    (n : nat) (p : list (Z * Z)) =>
  let s' := fst (Rows.adjust_s weight (S (S n)) s) in
  let lo_hi := Associational.split s' p in
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) (UniformWeight.uweight machine_wordsize))
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: (UniformWeight.uweight machine_wordsize)
reify_preprocess : Attempting to preprocess:
(UniformWeight.uweight machine_wordsize)
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: machine_wordsize
reify_in_context : Attempting to reify: UniformWeight.uweight
reify_preprocess : Attempting to preprocess: UniformWeight.uweight
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_in_context : Attempting to reify: (fun lgr : Z => ModOps.weight lgr 1)
reify_preprocess : Attempting to preprocess:
(fun lgr : Z => ModOps.weight lgr 1)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (ModOps.weight lgr 1)
reify_preprocess : Attempting to preprocess: (ModOps.weight lgr 1)
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (ModOps.weight lgr)
reify_preprocess : Attempting to preprocess: (ModOps.weight lgr)
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_in_context : Attempting to reify: lgr
reify_in_context : Attempting to reify: ModOps.weight
reify_preprocess : Attempting to preprocess: ModOps.weight
reify_base_type : Attempting to reify: (Z -> Z -> nat -> Z)
reify_base_type : Attempting to reify: (Z -> Z -> nat -> Z)
reify_in_context : Attempting to reify:
(fun (limbwidth_num limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun (limbwidth_num limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun (limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun i : nat => 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun i : nat => 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(- (- (limbwidth_num * Z.of_nat i) / limbwidth_den))
reify_preprocess : Attempting to preprocess:
(- (- (limbwidth_num * Z.of_nat i) / limbwidth_den))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(- (limbwidth_num * Z.of_nat i) / limbwidth_den)
reify_preprocess : Attempting to preprocess:
(- (limbwidth_num * Z.of_nat i) / limbwidth_den)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: limbwidth_den
reify_in_context : Attempting to reify: (Z.div (- (limbwidth_num * Z.of_nat i)))
reify_preprocess : Attempting to preprocess:
(Z.div (- (limbwidth_num * Z.of_nat i)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (- (limbwidth_num * Z.of_nat i))
reify_preprocess : Attempting to preprocess: (- (limbwidth_num * Z.of_nat i))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (limbwidth_num * Z.of_nat i)
reify_preprocess : Attempting to preprocess: (limbwidth_num * Z.of_nat i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.of_nat i)
reify_preprocess : Attempting to preprocess: (Z.of_nat i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Z.of_nat
reify_preprocess : Attempting to preprocess: Z.of_nat
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: (Z.mul limbwidth_num)
reify_preprocess : Attempting to preprocess: (Z.mul limbwidth_num)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: limbwidth_num
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (Z.pow 2)
reify_preprocess : Attempting to preprocess: (Z.pow 2)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: 2
reify_preprocess : Attempting to preprocess: 2
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.pow
reify_preprocess : Attempting to preprocess: Z.pow
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z))
   (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z))
   (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun s' : Z =>
  let lo_hi := Associational.split s' p in
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) (fst (Rows.adjust_s weight (S (S n)) s)))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (fst (Rows.adjust_s weight (S (S n)) s))
reify_preprocess : Attempting to preprocess:
(fst (Rows.adjust_s weight (S (S n)) s))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (Rows.adjust_s weight (S (S n)) s)
reify_preprocess : Attempting to preprocess: (Rows.adjust_s weight (S (S n)) s)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Rows.adjust_s weight (S (S n)))
reify_preprocess : Attempting to preprocess: (Rows.adjust_s weight (S (S n)))
reify_base_type : Attempting to reify: (Z -> Z * bool)
reify_in_context : Attempting to reify: (S (S n))
reify_preprocess : Attempting to preprocess: (S (S n))
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Rows.adjust_s weight)
reify_preprocess : Attempting to preprocess: (Rows.adjust_s weight)
reify_base_type : Attempting to reify: (nat -> Z -> Z * bool)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.adjust_s
reify_preprocess : Attempting to preprocess: Rows.adjust_s
reify_base_type : Attempting to reify: ((nat -> Z) -> nat -> Z -> Z * bool)
reify_base_type : Attempting to reify: ((nat -> Z) -> nat -> Z -> Z * bool)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(fun (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun s : Z =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(fun s : Z =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map weight (List.rev (List.seq 0 fuel)))
reify_preprocess : Attempting to preprocess:
(List.map weight (List.rev (List.seq 0 fuel)))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.rev (List.seq 0 fuel))
reify_preprocess : Attempting to preprocess: (List.rev (List.seq 0 fuel))
reify_base_type : Attempting to reify: (list nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.seq 0 fuel)
reify_preprocess : Attempting to preprocess: (List.seq 0 fuel)
reify_base_type : Attempting to reify: (list nat)
reify_in_context : Attempting to reify: fuel
reify_in_context : Attempting to reify: (List.seq 0)
reify_preprocess : Attempting to preprocess: (List.seq 0)
reify_base_type : Attempting to reify: (nat -> list nat)
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: List.seq
reify_preprocess : Attempting to preprocess: List.seq
reify_base_type : Attempting to reify: (nat -> nat -> list nat)
reify_in_context : Attempting to reify: (List.rev (A:=nat))
reify_preprocess : Attempting to preprocess: (List.rev (A:=nat))
reify_base_type : Attempting to reify: (list nat -> list nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.map weight)
reify_preprocess : Attempting to preprocess: (List.map weight)
reify_base_type : Attempting to reify: (list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (List.map (A:=nat) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=nat) (B:=Z))
reify_base_type : Attempting to reify: ((nat -> Z) -> list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false))
reify_base_type : Attempting to reify: (list Z -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (s, false)
reify_preprocess : Attempting to preprocess: (s, false)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: false
reify_preprocess : Attempting to preprocess: false
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (pair s)
reify_preprocess : Attempting to preprocess: (pair s)
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0))
reify_base_type : Attempting to reify: (Z * bool -> list Z -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (w_i : Z) '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_preprocess : Attempting to preprocess:
(fun (w_i : Z) '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_preprocess : Attempting to preprocess:
(fun '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(let
 '(v, found_adjustment) := res in
  let res := (v, found_adjustment) in
  if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(let
 '(v, found_adjustment) := res in
  let res := (v, found_adjustment) in
  if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(Prod.prod_rect_nodep
   (fun (v : Z) (found_adjustment : bool) =>
    let res := (v, found_adjustment) in
    if found_adjustment
    then res
    else if w_i mod s =? 0 then (w_i, true) else res) res)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: res
reify_in_context : Attempting to reify:
(Prod.prod_rect_nodep
   (fun (v : Z) (found_adjustment : bool) =>
    let res := (v, found_adjustment) in
    if found_adjustment
    then res
    else if w_i mod s =? 0 then (w_i, true) else res))
reify_preprocess : Attempting to preprocess:
(Prod.prod_rect_nodep
   (fun (v : Z) (found_adjustment : bool) =>
    let res := (v, found_adjustment) in
    if found_adjustment
    then res
    else if w_i mod s =? 0 then (w_i, true) else res))
reify_base_type : Attempting to reify: (Z * bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun (v : Z) (found_adjustment : bool) =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun (v : Z) (found_adjustment : bool) =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun found_adjustment : bool =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun found_adjustment : bool =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
((fun res : Z * bool =>
  if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
   (v, found_adjustment))
reify_base_type : Attempting to reify: (Z * bool)%type
reify_in_context : Attempting to reify: (v, found_adjustment)
reify_preprocess : Attempting to preprocess: (v, found_adjustment)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: found_adjustment
reify_in_context : Attempting to reify: (pair v)
reify_preprocess : Attempting to preprocess: (pair v)
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: v
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun res : Z * bool =>
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun res : Z * bool =>
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res)
   (fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res)
   found_adjustment)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: found_adjustment
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res)
   (fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res)
   (fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res))
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true))
   (fun _ : unit => res) (w_i mod s =? 0))
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (w_i mod s =? 0)
reify_preprocess : Attempting to preprocess: (w_i mod s =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (w_i mod s))
reify_preprocess : Attempting to preprocess: (Z.eqb (w_i mod s))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (w_i mod s)
reify_preprocess : Attempting to preprocess: (w_i mod s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.modulo w_i)
reify_preprocess : Attempting to preprocess: (Z.modulo w_i)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: w_i
reify_in_context : Attempting to reify: Z.modulo
reify_preprocess : Attempting to preprocess: Z.modulo
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true))
   (fun _ : unit => res))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true))
   (fun _ : unit => res))
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => res)
reify_preprocess : Attempting to preprocess: (fun _ : unit => res)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: res
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true)))
reify_base_type : Attempting to reify: ((unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => (w_i, true))
reify_preprocess : Attempting to preprocess: (fun _ : unit => (w_i, true))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (w_i, true)
reify_preprocess : Attempting to preprocess: (w_i, true)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: true
reify_preprocess : Attempting to preprocess: true
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (pair w_i)
reify_preprocess : Attempting to preprocess: (pair w_i)
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: w_i
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (Z * bool))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (Z * bool))
reify_base_type : Attempting to reify:
((unit -> Z * bool) -> (unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res))
reify_base_type : Attempting to reify: ((unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => res)
reify_preprocess : Attempting to preprocess: (fun _ : unit => res)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: res
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (Z * bool))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (Z * bool))
reify_base_type : Attempting to reify:
((unit -> Z * bool) -> (unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: Prod.prod_rect_nodep
reify_preprocess : Attempting to preprocess: Prod.prod_rect_nodep
reify_base_type : Attempting to reify:
((Z -> bool -> Z * bool) -> Z * bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right (A:=Z * bool) (B:=Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=Z * bool) (B:=Z))
reify_base_type : Attempting to reify:
((Z -> Z * bool -> Z * bool) -> Z * bool -> list Z -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * bool -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun s' : Z =>
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun s' : Z =>
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun lo_hi : list (Z * Z) * list (Z * Z) =>
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) (Associational.split s' p))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (Associational.split s' p)
reify_preprocess : Attempting to preprocess: (Associational.split s' p)
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: (Associational.split s')
reify_preprocess : Attempting to preprocess: (Associational.split s')
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_in_context : Attempting to reify: s'
reify_in_context : Attempting to reify: Associational.split
reify_preprocess : Attempting to preprocess: Associational.split
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (p : list (Z * Z)) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (p : list (Z * Z)) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
((fun hi_lo : list (Z * Z) * list (Z * Z) =>
  (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
   (List.partition (fun t : Z * Z => fst t mod s =? 0) p))
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_in_context : Attempting to reify:
(List.partition (fun t : Z * Z => fst t mod s =? 0) p)
reify_preprocess : Attempting to preprocess:
(List.partition (fun t : Z * Z => fst t mod s =? 0) p)
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.partition (fun t : Z * Z => fst t mod s =? 0))
reify_preprocess : Attempting to preprocess:
(List.partition (fun t : Z * Z => fst t mod s =? 0))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun t : Z * Z => fst t mod s =? 0)
reify_preprocess : Attempting to preprocess: (fun t : Z * Z => fst t mod s =? 0)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t mod s =? 0)
reify_preprocess : Attempting to preprocess: (fst t mod s =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (fst t mod s))
reify_preprocess : Attempting to preprocess: (Z.eqb (fst t mod s))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst t mod s)
reify_preprocess : Attempting to preprocess: (fst t mod s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.modulo (fst t))
reify_preprocess : Attempting to preprocess: (Z.modulo (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.modulo
reify_preprocess : Attempting to preprocess: Z.modulo
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify: (List.partition (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.partition (A:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> bool) -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun hi_lo : list (Z * Z) * list (Z * Z) =>
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(fun hi_lo : list (Z * Z) * list (Z * Z) =>
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_preprocess : Attempting to preprocess:
(snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_preprocess : Attempting to preprocess:
(List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst hi_lo)
reify_preprocess : Attempting to preprocess: (fst hi_lo)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: hi_lo
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun t : Z * Z => (fst t / s, snd t)))
reify_preprocess : Attempting to preprocess:
(List.map (fun t : Z * Z => (fst t / s, snd t)))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun t : Z * Z => (fst t / s, snd t))
reify_preprocess : Attempting to preprocess:
(fun t : Z * Z => (fst t / s, snd t))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t / s, snd t)
reify_preprocess : Attempting to preprocess: (fst t / s, snd t)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t / s))
reify_preprocess : Attempting to preprocess: (pair (fst t / s))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t / s)
reify_preprocess : Attempting to preprocess: (fst t / s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.div (fst t))
reify_preprocess : Attempting to preprocess: (Z.div (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (snd hi_lo))
reify_preprocess : Attempting to preprocess: (pair (snd hi_lo))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd hi_lo)
reify_preprocess : Attempting to preprocess: (snd hi_lo)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: hi_lo
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun lo_hi : list (Z * Z) * list (Z * Z) =>
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun lo_hi : list (Z * Z) * list (Z * Z) =>
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun coef : list (Z * Z) =>
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r)
   (Associational.sat_mul_const base ((1, s' / s) :: nil) c))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify:
(Associational.sat_mul_const base ((1, s' / s) :: nil) c)
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base ((1, s' / s) :: nil) c)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify:
(Associational.sat_mul_const base ((1, s' / s) :: nil))
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base ((1, s' / s) :: nil))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: ((1, s' / s) :: nil)%list
reify_preprocess : Attempting to preprocess: ((1, s' / s) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (1, s' / s))
reify_preprocess : Attempting to preprocess: (cons (1, s' / s))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (1, s' / s)
reify_preprocess : Attempting to preprocess: (1, s' / s)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (s' / s)
reify_preprocess : Attempting to preprocess: (s' / s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.div s')
reify_preprocess : Attempting to preprocess: (Z.div s')
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: s'
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair 1)
reify_preprocess : Attempting to preprocess: (pair 1)
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_mul_const base)
reify_preprocess : Attempting to preprocess: (Associational.sat_mul_const base)
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: base
reify_in_context : Attempting to reify: Associational.sat_mul_const
reify_preprocess : Attempting to preprocess: Associational.sat_mul_const
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: q
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t t')
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t)
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t)
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s)
reify_preprocess : Attempting to preprocess: (Associational.sat_multerm_const s)
reify_base_type : Attempting to reify: (Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Associational.sat_multerm_const
reify_preprocess : Attempting to preprocess: Associational.sat_multerm_const
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 1)
reify_preprocess : Attempting to preprocess: (snd t =? 1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? -1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? -1)
reify_preprocess : Attempting to preprocess: (snd t =? -1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (-1)
reify_preprocess : Attempting to preprocess: (-1)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 0))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 0)
reify_preprocess : Attempting to preprocess: (snd t =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_in_context : Attempting to reify:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s (snd t))
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s (snd t))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s)
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s)
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Definitions.Z.mul_split
reify_preprocess : Attempting to preprocess: Definitions.Z.mul_split
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t' * s, snd xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t' * s, snd xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s, snd xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s, snd xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd xy)
reify_preprocess : Attempting to preprocess: (snd xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t' * s))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t' * s))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.mul (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', fst xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', fst xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', fst xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t', fst xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst xy)
reify_preprocess : Attempting to preprocess: (fst xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', - snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', - snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', - snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', - snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', - snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', - snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (- snd t')
reify_preprocess : Attempting to preprocess: (- snd t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun coef : list (Z * Z) =>
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun coef : list (Z * Z) =>
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun hi : list (Z * Z) => let r := (fst lo_hi ++ hi)%list in r)
   (Associational.sat_mul_const base coef (snd lo_hi)))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify:
(Associational.sat_mul_const base coef (snd lo_hi))
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base coef (snd lo_hi))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (snd lo_hi)
reify_preprocess : Attempting to preprocess: (snd lo_hi)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: lo_hi
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_mul_const base coef)
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base coef)
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: coef
reify_in_context : Attempting to reify: (Associational.sat_mul_const base)
reify_preprocess : Attempting to preprocess: (Associational.sat_mul_const base)
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: base
reify_in_context : Attempting to reify: Associational.sat_mul_const
reify_preprocess : Attempting to preprocess: Associational.sat_mul_const
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: q
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t t')
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t)
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t)
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s)
reify_preprocess : Attempting to preprocess: (Associational.sat_multerm_const s)
reify_base_type : Attempting to reify: (Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Associational.sat_multerm_const
reify_preprocess : Attempting to preprocess: Associational.sat_multerm_const
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 1)
reify_preprocess : Attempting to preprocess: (snd t =? 1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? -1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? -1)
reify_preprocess : Attempting to preprocess: (snd t =? -1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (-1)
reify_preprocess : Attempting to preprocess: (-1)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 0))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 0)
reify_preprocess : Attempting to preprocess: (snd t =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_in_context : Attempting to reify:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s (snd t))
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s (snd t))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s)
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s)
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Definitions.Z.mul_split
reify_preprocess : Attempting to preprocess: Definitions.Z.mul_split
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t' * s, snd xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t' * s, snd xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s, snd xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s, snd xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd xy)
reify_preprocess : Attempting to preprocess: (snd xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t' * s))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t' * s))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.mul (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', fst xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', fst xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', fst xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t', fst xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst xy)
reify_preprocess : Attempting to preprocess: (fst xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', - snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', - snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', - snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', - snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', - snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', - snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (- snd t')
reify_preprocess : Attempting to preprocess: (- snd t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun hi : list (Z * Z) => let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun hi : list (Z * Z) => let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun r : list (Z * Z) => r) (fst lo_hi ++ hi)%list)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (fst lo_hi ++ hi)%list
reify_preprocess : Attempting to preprocess: (fst lo_hi ++ hi)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: hi
reify_in_context : Attempting to reify: (app (fst lo_hi))
reify_preprocess : Attempting to preprocess: (app (fst lo_hi))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst lo_hi)
reify_preprocess : Attempting to preprocess: (fst lo_hi)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: lo_hi
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (app (A:=Z * Z))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun r : list (Z * Z) => r)
reify_preprocess : Attempting to preprocess: (fun r : list (Z * Z) => r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r
reify_in_context : Attempting to reify:
(fun r_a : list (Z * Z) =>
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun r_a : list (Z * Z) =>
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun r_rows : list (list Z) =>
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (Rows.from_associational weight (S n) r_a))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify:
(Rows.from_associational weight (S n) r_a)
reify_preprocess : Attempting to preprocess:
(Rows.from_associational weight (S n) r_a)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: r_a
reify_in_context : Attempting to reify: (Rows.from_associational weight (S n))
reify_preprocess : Attempting to preprocess:
(Rows.from_associational weight (S n))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Rows.from_associational weight)
reify_preprocess : Attempting to preprocess: (Rows.from_associational weight)
reify_base_type : Attempting to reify: (nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.from_associational
reify_preprocess : Attempting to preprocess: Rows.from_associational
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(Rows.from_columns (Columns.from_associational weight n p))
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: (Columns.from_associational weight n p)
reify_preprocess : Attempting to preprocess:
(Columns.from_associational weight n p)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: (Columns.from_associational weight n)
reify_preprocess : Attempting to preprocess:
(Columns.from_associational weight n)
reify_base_type : Attempting to reify: (list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (Columns.from_associational weight)
reify_preprocess : Attempting to preprocess: (Columns.from_associational weight)
reify_base_type : Attempting to reify: (nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Columns.from_associational
reify_preprocess : Attempting to preprocess: Columns.from_associational
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n) p)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Columns.nils n)
reify_preprocess : Attempting to preprocess: (Columns.nils n)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: Columns.nils
reify_preprocess : Attempting to preprocess: Columns.nils
reify_base_type : Attempting to reify: (nat -> list (list Z))
reify_base_type : Attempting to reify: (nat -> list (list Z))
reify_in_context : Attempting to reify: (fun n : nat => List.repeat nil n)
reify_preprocess : Attempting to preprocess: (fun n : nat => List.repeat nil n)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.repeat nil n)
reify_preprocess : Attempting to preprocess: (List.repeat nil n)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.repeat nil)
reify_preprocess : Attempting to preprocess: (List.repeat nil)
reify_base_type : Attempting to reify: (nat -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=list Z))
reify_base_type : Attempting to reify: (list Z -> nat -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)))
reify_base_type : Attempting to reify:
(list (list Z) -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (t : Z * Z) (ls : list (list Z)) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_preprocess : Attempting to preprocess:
(fun (t : Z * Z) (ls : list (list Z)) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls : list (list Z) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_preprocess : Attempting to preprocess:
(fun ls : list (list Z) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_in_context : Attempting to reify:
(Positional.place weight t (Init.Nat.pred n))
reify_preprocess : Attempting to preprocess:
(Positional.place weight t (Init.Nat.pred n))
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: (Init.Nat.pred n)
reify_preprocess : Attempting to preprocess: (Init.Nat.pred n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: Init.Nat.pred
reify_preprocess : Attempting to preprocess: Init.Nat.pred
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Positional.place weight t)
reify_preprocess : Attempting to preprocess: (Positional.place weight t)
reify_base_type : Attempting to reify: (nat -> nat * Z)
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: (Positional.place weight)
reify_preprocess : Attempting to preprocess: (Positional.place weight)
reify_base_type : Attempting to reify: (Z * Z -> nat -> nat * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Positional.place
reify_preprocess : Attempting to preprocess: Positional.place
reify_base_type : Attempting to reify: ((nat -> Z) -> Z * Z -> nat -> nat * Z)
reify_base_type : Attempting to reify: ((nat -> Z) -> Z * Z -> nat -> nat * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(fun (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun i : nat =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(fun i : nat =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i tt)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: tt
reify_preprocess : Attempting to preprocess: tt
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i)
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i)
reify_base_type : Attempting to reify: (unit -> nat * Z)
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt))
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt))
reify_base_type : Attempting to reify: (nat -> unit -> nat * Z)
reify_in_context : Attempting to reify:
(fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: ((fun _ : nat => unit -> nat * Z) i')
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
((fun i : nat =>
  if fst t mod weight i =? 0
  then (i, let c := fst t / weight i in c * snd t)
  else place_i' tt) (S i'))
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: (S i')
reify_preprocess : Attempting to preprocess: (S i')
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: i'
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify:
(fun i : nat =>
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun i : nat =>
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t))
   (fun _ : unit => place_i' tt) (fst t mod weight i =? 0))
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t mod weight i =? 0)
reify_preprocess : Attempting to preprocess: (fst t mod weight i =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (fst t mod weight i))
reify_preprocess : Attempting to preprocess: (Z.eqb (fst t mod weight i))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst t mod weight i)
reify_preprocess : Attempting to preprocess: (fst t mod weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight i)
reify_preprocess : Attempting to preprocess: (weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (Z.modulo (fst t))
reify_preprocess : Attempting to preprocess: (Z.modulo (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.modulo
reify_preprocess : Attempting to preprocess: Z.modulo
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t))
   (fun _ : unit => place_i' tt))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t))
   (fun _ : unit => place_i' tt))
reify_base_type : Attempting to reify: (bool -> nat * Z)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => place_i' tt)
reify_preprocess : Attempting to preprocess: (fun _ : unit => place_i' tt)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (place_i' tt)
reify_preprocess : Attempting to preprocess: (place_i' tt)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: tt
reify_preprocess : Attempting to preprocess: tt
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: place_i'
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t)))
reify_base_type : Attempting to reify: ((unit -> nat * Z) -> bool -> nat * Z)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => (i, let c := fst t / weight i in c * snd t))
reify_preprocess : Attempting to preprocess:
(fun _ : unit => (i, let c := fst t / weight i in c * snd t))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(i, let c := fst t / weight i in c * snd t)
reify_preprocess : Attempting to preprocess:
(i, let c := fst t / weight i in c * snd t)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (let c := fst t / weight i in c * snd t)
reify_preprocess : Attempting to preprocess:
(let c := fst t / weight i in c * snd t)
reify_preprocess : Attempting to preprocess:
((fun c : Z => c * snd t) (fst t / weight i))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t / weight i)
reify_preprocess : Attempting to preprocess: (fst t / weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight i)
reify_preprocess : Attempting to preprocess: (weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (Z.div (fst t))
reify_preprocess : Attempting to preprocess: (Z.div (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (fun c : Z => c * snd t)
reify_preprocess : Attempting to preprocess: (fun c : Z => c * snd t)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (c * snd t)
reify_preprocess : Attempting to preprocess: (c * snd t)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul c)
reify_preprocess : Attempting to preprocess: (Z.mul c)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair i)
reify_preprocess : Attempting to preprocess: (pair i)
reify_base_type : Attempting to reify: (Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (nat -> Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (nat * Z))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (nat * Z))
reify_base_type : Attempting to reify:
((unit -> nat * Z) -> (unit -> nat * Z) -> bool -> nat * Z)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t)))
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t)))
reify_base_type : Attempting to reify:
((nat -> (unit -> nat * Z) -> unit -> nat * Z) -> nat -> unit -> nat * Z)
reify_base_type : Attempting to reify: unit
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => (0%nat, fst t * snd t))
reify_preprocess : Attempting to preprocess:
(fun _ : unit => (0%nat, fst t * snd t))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (0%nat, fst t * snd t)
reify_preprocess : Attempting to preprocess: (0%nat, fst t * snd t)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * snd t)
reify_preprocess : Attempting to preprocess: (fst t * snd t)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair 0%nat)
reify_preprocess : Attempting to preprocess: (pair 0%nat)
reify_base_type : Attempting to reify: (Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (nat -> Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: NatUtil.nat_rect_arrow_nodep
reify_preprocess : Attempting to preprocess: NatUtil.nat_rect_arrow_nodep
reify_base_type : Attempting to reify:
((unit -> nat * Z) ->
 (nat -> (unit -> nat * Z) -> unit -> nat * Z) -> nat -> unit -> nat * Z)
reify_base_type : Attempting to reify: unit
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)
reify_preprocess : Attempting to preprocess:
(fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)
reify_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Columns.cons_to_nth (fst p) (snd p) ls)
reify_preprocess : Attempting to preprocess:
(Columns.cons_to_nth (fst p) (snd p) ls)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: ls
reify_in_context : Attempting to reify: (Columns.cons_to_nth (fst p) (snd p))
reify_preprocess : Attempting to preprocess:
(Columns.cons_to_nth (fst p) (snd p))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: (snd p)
reify_preprocess : Attempting to preprocess: (snd p)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (nat * Z -> Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Columns.cons_to_nth (fst p))
reify_preprocess : Attempting to preprocess: (Columns.cons_to_nth (fst p))
reify_base_type : Attempting to reify: (Z -> list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: (fst p)
reify_preprocess : Attempting to preprocess: (fst p)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (nat * Z -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Columns.cons_to_nth
reify_preprocess : Attempting to preprocess: Columns.cons_to_nth
reify_base_type : Attempting to reify:
(nat -> Z -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify:
(nat -> Z -> list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (i : nat) (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(fun (i : nat) (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(fun (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun xs : list (list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(fun xs : list (list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xs
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list))
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun y : list Z => (x :: y)%list)
reify_preprocess : Attempting to preprocess: (fun y : list Z => (x :: y)%list)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (x :: y)%list
reify_preprocess : Attempting to preprocess: (x :: y)%list
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: y
reify_in_context : Attempting to reify: (cons x)
reify_preprocess : Attempting to preprocess: (cons x)
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Crypto.Util.ListUtil.update_nth i)
reify_preprocess : Attempting to preprocess: (Crypto.Util.ListUtil.update_nth i)
reify_base_type : Attempting to reify:
((list Z -> list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Crypto.Util.ListUtil.update_nth
reify_preprocess : Attempting to preprocess: Crypto.Util.ListUtil.update_nth
reify_base_type : Attempting to reify:
(nat -> (list Z -> list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (A:=list (list Z)) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list (list Z)) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (list Z) -> list (list Z)) ->
 list (list Z) -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Rows.from_columns
reify_preprocess : Attempting to preprocess: Rows.from_columns
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_preprocess : Attempting to preprocess:
(snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.from_columns' (Rows.max_column_size inp) (inp, nil))
reify_preprocess : Attempting to preprocess:
(Rows.from_columns' (Rows.max_column_size inp) (inp, nil))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_in_context : Attempting to reify: (inp, nil)
reify_preprocess : Attempting to preprocess: (inp, nil)
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair inp)
reify_preprocess : Attempting to preprocess: (pair inp)
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.from_columns' (Rows.max_column_size inp))
reify_preprocess : Attempting to preprocess:
(Rows.from_columns' (Rows.max_column_size inp))
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z) * list (list Z))
reify_in_context : Attempting to reify: (Rows.max_column_size inp)
reify_preprocess : Attempting to preprocess: (Rows.max_column_size inp)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: Rows.max_column_size
reify_preprocess : Attempting to preprocess: Rows.max_column_size
reify_base_type : Attempting to reify: (list (list Z) -> nat)
reify_base_type : Attempting to reify: (list (list Z) -> nat)
reify_in_context : Attempting to reify:
(fun x : list (list Z) =>
 List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_preprocess : Attempting to preprocess:
(fun x : list (list Z) =>
 List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_preprocess : Attempting to preprocess:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => length c) x)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => length c) x)
reify_base_type : Attempting to reify: (list nat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: (List.map (fun c : list Z => length c))
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => length c))
reify_base_type : Attempting to reify: (list (list Z) -> list nat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (fun c : list Z => length c)
reify_preprocess : Attempting to preprocess: (fun c : list Z => length c)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (length c)
reify_preprocess : Attempting to preprocess: (length c)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (length (A:=Z))
reify_preprocess : Attempting to preprocess: (length (A:=Z))
reify_base_type : Attempting to reify: (list Z -> nat)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=list Z) (B:=nat))
reify_preprocess : Attempting to preprocess: (List.map (A:=list Z) (B:=nat))
reify_base_type : Attempting to reify:
((list Z -> nat) -> list (list Z) -> list nat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat)
reify_preprocess : Attempting to preprocess:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat)
reify_base_type : Attempting to reify: (list nat -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.fold_right (fun a b : nat => Nat.max a b))
reify_preprocess : Attempting to preprocess:
(List.fold_right (fun a b : nat => Nat.max a b))
reify_base_type : Attempting to reify: (nat -> list nat -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (fun a b : nat => Nat.max a b)
reify_preprocess : Attempting to preprocess: (fun a b : nat => Nat.max a b)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (fun b : nat => Nat.max a b)
reify_preprocess : Attempting to preprocess: (fun b : nat => Nat.max a b)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (Nat.max a b)
reify_preprocess : Attempting to preprocess: (Nat.max a b)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: b
reify_in_context : Attempting to reify: (Nat.max a)
reify_preprocess : Attempting to preprocess: (Nat.max a)
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: a
reify_in_context : Attempting to reify: Nat.max
reify_preprocess : Attempting to preprocess: Nat.max
reify_base_type : Attempting to reify: (nat -> nat -> nat)
reify_in_context : Attempting to reify: (List.fold_right (A:=nat) (B:=nat))
reify_preprocess : Attempting to preprocess: (List.fold_right (A:=nat) (B:=nat))
reify_base_type : Attempting to reify:
((nat -> nat -> nat) -> nat -> list nat -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: Rows.from_columns'
reify_preprocess : Attempting to preprocess: Rows.from_columns'
reify_base_type : Attempting to reify:
(nat -> list (list Z) * list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify:
(nat -> list (list Z) * list (list Z) -> list (list Z) * list (list Z))
reify_in_context : Attempting to reify:
(fun (n : nat) (start_state : list (list Z) * list (list Z)) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (start_state : list (list Z) * list (list Z)) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun start_state : list (list Z) * list (list Z) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_preprocess : Attempting to preprocess:
(fun start_state : list (list Z) * list (list Z) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat 0 n)
reify_preprocess : Attempting to preprocess: (List.repeat 0 n)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.repeat 0)
reify_preprocess : Attempting to preprocess: (List.repeat 0)
reify_base_type : Attempting to reify: (nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat (A:=Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=Z))
reify_base_type : Attempting to reify: (Z -> nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state)
reify_base_type : Attempting to reify: (list Z -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: start_state
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)))
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list Z -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : Z) (state : list (list Z) * list (list Z)) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun (_ : Z) (state : list (list Z) * list (list Z)) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun state : list (list Z) * list (list Z) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun state : list (list Z) * list (list Z) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
((fun cols'_row : list (list Z) * list Z =>
  (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
   (Rows.extract_row (fst state)))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_in_context : Attempting to reify: (Rows.extract_row (fst state))
reify_preprocess : Attempting to preprocess: (Rows.extract_row (fst state))
reify_base_type : Attempting to reify: (list (list Z) * list Z)%type
reify_in_context : Attempting to reify: (fst state)
reify_preprocess : Attempting to preprocess: (fst state)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Rows.extract_row
reify_preprocess : Attempting to preprocess: Rows.extract_row
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z) * list Z)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z) * list Z)
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 (List.map (fun c : list Z => List.tl c) inp,
 List.map (fun c : list Z => List.hd 0 c) inp))
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 (List.map (fun c : list Z => List.tl c) inp,
 List.map (fun c : list Z => List.hd 0 c) inp))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.tl c) inp,
List.map (fun c : list Z => List.hd 0 c) inp)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.tl c) inp,
List.map (fun c : list Z => List.hd 0 c) inp)
reify_base_type : Attempting to reify: (list (list Z) * list Z)%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.hd 0 c) inp)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.hd 0 c) inp)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.hd 0 c))
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.hd 0 c))
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun c : list Z => List.hd 0 c)
reify_preprocess : Attempting to preprocess: (fun c : list Z => List.hd 0 c)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd 0 c)
reify_preprocess : Attempting to preprocess: (List.hd 0 c)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (List.hd 0)
reify_preprocess : Attempting to preprocess: (List.hd 0)
reify_base_type : Attempting to reify: (list Z -> Z)
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd (A:=Z))
reify_preprocess : Attempting to preprocess: (List.hd (A:=Z))
reify_base_type : Attempting to reify: (Z -> list Z -> Z)
reify_in_context : Attempting to reify: List.hd
reify_preprocess : Attempting to preprocess: List.hd
reify_base_type : Attempting to reify: (forall A : Type, A -> list A -> A)
reify_base_type : Attempting to reify: (Z -> list Z -> Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_in_context : Attempting to reify:
(fun (default : Z) (l : list Z) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (default : Z) (l : list Z) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l : list Z => match l with
                   | nil => default
                   | (x :: _)%list => x
                   end)
reify_preprocess : Attempting to preprocess:
(fun l : list Z => match l with
                   | nil => default
                   | (x :: _)%list => x
                   end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case Z (fun _ : unit => default)
   (fun (x : Z) (_ : list Z) => x) l)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case Z (fun _ : unit => default)
   (fun (x : Z) (_ : list Z) => x))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case Z (fun _ : unit => default)
   (fun (x : Z) (_ : list Z) => x))
reify_base_type : Attempting to reify: (list Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun (x : Z) (_ : list Z) => x)
reify_preprocess : Attempting to preprocess: (fun (x : Z) (_ : list Z) => x)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : list Z => x)
reify_preprocess : Attempting to preprocess: (fun _ : list Z => x)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case Z (fun _ : unit => default))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case Z (fun _ : unit => default))
reify_base_type : Attempting to reify: ((Z -> list Z -> Z) -> list Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => default)
reify_preprocess : Attempting to preprocess: (fun _ : unit => default)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case Z)
reify_preprocess : Attempting to preprocess: (ListUtil.Thunked.list_case Z)
reify_base_type : Attempting to reify:
((unit -> Z) -> (Z -> list Z -> Z) -> list Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=list Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=list Z) (B:=Z))
reify_base_type : Attempting to reify:
((list Z -> Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(pair (List.map (fun c : list Z => List.tl c) inp))
reify_preprocess : Attempting to preprocess:
(pair (List.map (fun c : list Z => List.tl c) inp))
reify_base_type : Attempting to reify: (list Z -> list (list Z) * list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.tl c) inp)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.tl c) inp)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.map (fun c : list Z => List.tl c))
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.tl c))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun c : list Z => List.tl c)
reify_preprocess : Attempting to preprocess: (fun c : list Z => List.tl c)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.tl c)
reify_preprocess : Attempting to preprocess: (List.tl c)
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (List.tl (A:=Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list Z => match l with
                   | nil => nil
                   | (_ :: m)%list => m
                   end)
reify_preprocess : Attempting to preprocess:
(fun l : list Z => match l with
                   | nil => nil
                   | (_ :: m)%list => m
                   end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil)
   (fun (_ : Z) (m : list Z) => m) l)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil)
   (fun (_ : Z) (m : list Z) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil)
   (fun (_ : Z) (m : list Z) => m))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun (_ : Z) (m : list Z) => m)
reify_preprocess : Attempting to preprocess: (fun (_ : Z) (m : list Z) => m)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list Z => m)
reify_preprocess : Attempting to preprocess: (fun m : list Z => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((Z -> list Z -> list Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case (list Z))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) -> (Z -> list Z -> list Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=list Z) (B:=list Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=list Z) (B:=list Z))
reify_base_type : Attempting to reify:
((list Z -> list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (list Z) -> list Z -> list (list Z) * list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun cols'_row : list (list Z) * list Z =>
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun cols'_row : list (list Z) * list Z =>
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_type : Attempting to reify: (list (list Z) * list Z)%type
reify_base_type : Attempting to reify: (list (list Z) * list Z)%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd state ++ snd cols'_row :: nil)%list
reify_preprocess : Attempting to preprocess:
(snd state ++ snd cols'_row :: nil)%list
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd cols'_row :: nil)%list
reify_preprocess : Attempting to preprocess: (snd cols'_row :: nil)%list
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (snd cols'_row))
reify_preprocess : Attempting to preprocess: (cons (snd cols'_row))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd cols'_row)
reify_preprocess : Attempting to preprocess: (snd cols'_row)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cols'_row
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list (list Z) * list Z -> list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify:
(list Z -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app (snd state))
reify_preprocess : Attempting to preprocess: (app (snd state))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd state)
reify_preprocess : Attempting to preprocess: (snd state)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app (A:=list Z))
reify_preprocess : Attempting to preprocess: (app (A:=list Z))
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst cols'_row))
reify_preprocess : Attempting to preprocess: (pair (fst cols'_row))
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst cols'_row)
reify_preprocess : Attempting to preprocess: (fst cols'_row)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cols'_row
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list (list Z) * list Z -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (A:=list (list Z) * list (list Z)) (B:=Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list (list Z) * list (list Z)) (B:=Z))
reify_base_type : Attempting to reify:
((Z -> list (list Z) * list (list Z) -> list (list Z) * list (list Z)) ->
 list (list Z) * list (list Z) -> list Z -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun r_rows : list (list Z) =>
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun r_rows : list (list Z) =>
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun r_flat0 : list Z * Z =>
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if
   is_bounded_by (List.repeat bound (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (Rows.flatten weight (S n) r_rows))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (Rows.flatten weight (S n) r_rows)
reify_preprocess : Attempting to preprocess: (Rows.flatten weight (S n) r_rows)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: r_rows
reify_in_context : Attempting to reify: (Rows.flatten weight (S n))
reify_preprocess : Attempting to preprocess: (Rows.flatten weight (S n))
reify_base_type : Attempting to reify: (list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Rows.flatten weight)
reify_preprocess : Attempting to preprocess: (Rows.flatten weight)
reify_base_type : Attempting to reify: (nat -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.flatten
reify_preprocess : Attempting to preprocess: Rows.flatten
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
((fun default : list Z =>
  Rows.flatten' weight (List.hd default inp, 0)
    (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
   (Positional.zeros n))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (Positional.zeros n)
reify_preprocess : Attempting to preprocess: (Positional.zeros n)
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: Positional.zeros
reify_preprocess : Attempting to preprocess: Positional.zeros
reify_base_type : Attempting to reify: (nat -> list Z)
reify_base_type : Attempting to reify: (nat -> list Z)
reify_in_context : Attempting to reify: (fun n : nat => List.repeat 0 n)
reify_preprocess : Attempting to preprocess: (fun n : nat => List.repeat 0 n)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.repeat 0 n)
reify_preprocess : Attempting to preprocess: (List.repeat 0 n)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.repeat 0)
reify_preprocess : Attempting to preprocess: (List.repeat 0)
reify_base_type : Attempting to reify: (nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat (A:=Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=Z))
reify_base_type : Attempting to reify: (Z -> nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun default : list Z =>
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun default : list Z =>
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify:
(List.hd default (List.tl inp) :: List.tl (List.tl inp))%list
reify_preprocess : Attempting to preprocess:
(List.hd default (List.tl inp) :: List.tl (List.tl inp))%list
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.tl (List.tl inp))
reify_preprocess : Attempting to preprocess: (List.tl (List.tl inp))
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: (List.tl inp)
reify_preprocess : Attempting to preprocess: (List.tl inp)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.tl (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m) l)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_preprocess : Attempting to preprocess:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list (list Z) => m)
reify_preprocess : Attempting to preprocess: (fun m : list (list Z) => m)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)))
reify_base_type : Attempting to reify:
((unit -> list (list Z)) ->
 (list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.tl (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m) l)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_preprocess : Attempting to preprocess:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list (list Z) => m)
reify_preprocess : Attempting to preprocess: (fun m : list (list Z) => m)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)))
reify_base_type : Attempting to reify:
((unit -> list (list Z)) ->
 (list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (List.hd default (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(cons (List.hd default (List.tl inp)))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd default (List.tl inp))
reify_preprocess : Attempting to preprocess: (List.hd default (List.tl inp))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (List.tl inp)
reify_preprocess : Attempting to preprocess: (List.tl inp)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.tl (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m) l)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_preprocess : Attempting to preprocess:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list (list Z) => m)
reify_preprocess : Attempting to preprocess: (fun m : list (list Z) => m)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)))
reify_base_type : Attempting to reify:
((unit -> list (list Z)) ->
 (list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd default)
reify_preprocess : Attempting to preprocess: (List.hd default)
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (List.hd (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.hd (A:=list Z))
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify: List.hd
reify_preprocess : Attempting to preprocess: List.hd
reify_base_type : Attempting to reify: (forall A : Type, A -> list A -> A)
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_in_context : Attempting to reify:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x) l)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_preprocess : Attempting to preprocess:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : list (list Z) => x)
reify_preprocess : Attempting to preprocess: (fun _ : list (list Z) => x)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => default)
reify_preprocess : Attempting to preprocess: (fun _ : unit => default)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case (list Z))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) ->
 (list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify:
(list Z -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.flatten' weight (List.hd default inp, 0))
reify_preprocess : Attempting to preprocess:
(Rows.flatten' weight (List.hd default inp, 0))
reify_base_type : Attempting to reify: (list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: (List.hd default inp, 0)
reify_preprocess : Attempting to preprocess: (List.hd default inp, 0)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (List.hd default inp))
reify_preprocess : Attempting to preprocess: (pair (List.hd default inp))
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd default inp)
reify_preprocess : Attempting to preprocess: (List.hd default inp)
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.hd default)
reify_preprocess : Attempting to preprocess: (List.hd default)
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (List.hd (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.hd (A:=list Z))
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify: List.hd
reify_preprocess : Attempting to preprocess: List.hd
reify_base_type : Attempting to reify: (forall A : Type, A -> list A -> A)
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_in_context : Attempting to reify:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x) l)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_preprocess : Attempting to preprocess:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : list (list Z) => x)
reify_preprocess : Attempting to preprocess: (fun _ : list (list Z) => x)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => default)
reify_preprocess : Attempting to preprocess: (fun _ : unit => default)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case (list Z))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) ->
 (list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Rows.flatten' weight)
reify_preprocess : Attempting to preprocess: (Rows.flatten' weight)
reify_base_type : Attempting to reify:
(list Z * Z -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.flatten'
reify_preprocess : Attempting to preprocess: Rows.flatten'
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(fun (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state)
reify_base_type : Attempting to reify: (list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: start_state
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)))
reify_base_type : Attempting to reify:
(list Z * Z -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (next_row : list Z) (state : list Z * Z) =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(fun (next_row : list Z) (state : list Z * Z) =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun state : list Z * Z =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(fun state : list Z * Z =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
((fun out_carry : list Z * Z => (fst out_carry, snd state + snd out_carry))
   (Rows.sum_rows weight (fst state) next_row))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify:
(Rows.sum_rows weight (fst state) next_row)
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows weight (fst state) next_row)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: next_row
reify_in_context : Attempting to reify: (Rows.sum_rows weight (fst state))
reify_preprocess : Attempting to preprocess: (Rows.sum_rows weight (fst state))
reify_base_type : Attempting to reify: (list Z -> list Z * Z)
reify_in_context : Attempting to reify: (fst state)
reify_preprocess : Attempting to preprocess: (fst state)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Rows.sum_rows weight)
reify_preprocess : Attempting to preprocess: (Rows.sum_rows weight)
reify_base_type : Attempting to reify: (list Z -> list Z -> list Z * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.sum_rows
reify_preprocess : Attempting to preprocess: Rows.sum_rows
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z -> list Z -> list Z * Z)
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z -> list Z -> list Z * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (row1 row2 : list Z) =>
 fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (row1 row2 : list Z) =>
 fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun row1 row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fun row1 row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fun row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2)
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_in_context : Attempting to reify: row2
reify_in_context : Attempting to reify:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1)
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1)
reify_base_type : Attempting to reify: (list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify: row1
reify_in_context : Attempting to reify: (Rows.sum_rows' weight (nil, 0, 0%nat))
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows' weight (nil, 0, 0%nat))
reify_base_type : Attempting to reify: (list Z -> list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify: (nil, 0, 0%nat)
reify_preprocess : Attempting to preprocess: (nil, 0, 0%nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (pair (nil, 0))
reify_preprocess : Attempting to preprocess: (pair (nil, 0))
reify_base_type : Attempting to reify: (nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (nil, 0)
reify_preprocess : Attempting to preprocess: (nil, 0)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair nil)
reify_preprocess : Attempting to preprocess: (pair nil)
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z * Z -> nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (Rows.sum_rows' weight)
reify_preprocess : Attempting to preprocess: (Rows.sum_rows' weight)
reify_base_type : Attempting to reify:
(list Z * Z * nat -> list Z -> list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.sum_rows'
reify_preprocess : Attempting to preprocess: Rows.sum_rows'
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z * nat -> list Z -> list Z -> list Z * Z * nat)
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z * nat -> list Z -> list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (start_state : list Z * Z * nat) (row1 row2 : list Z)
 =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (start_state : list Z * Z * nat) (row1 row2 : list Z)
 =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (start_state : list Z * Z * nat) (row1 row2 : list Z) =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun (start_state : list Z * Z * nat) (row1 row2 : list Z) =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun row1 row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun row1 row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.rev (List.combine row1 row2))
reify_preprocess : Attempting to preprocess: (List.rev (List.combine row1 row2))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.combine row1 row2)
reify_preprocess : Attempting to preprocess: (List.combine row1 row2)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: row2
reify_in_context : Attempting to reify: (List.combine (B:=Z) row1)
reify_preprocess : Attempting to preprocess: (List.combine (B:=Z) row1)
reify_base_type : Attempting to reify: (list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: row1
reify_in_context : Attempting to reify: (List.combine (A:=Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.combine (A:=Z) (B:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.rev (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.rev (A:=Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state)
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: start_state
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)))
reify_base_type : Attempting to reify:
(list Z * Z * nat -> list (Z * Z) -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (next : Z * Z) (state : list Z * Z * nat) =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun (next : Z * Z) (state : list Z * Z * nat) =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun state : list Z * Z * nat =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun state : list Z * Z * nat =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
((fun i : nat =>
  let low_high' :=
    let low_high := fst state in
    let low := fst low_high in
    let high := snd low_high in
    Rewriter.Util.LetIn.Let_In
      (Definitions.Z.add_with_get_carry_full
         ((fun i0 : nat => weight (S i0) / weight i0) i) high
         (fst next) (snd next))
      (fun sum_carry : Z * Z =>
       ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
  (low_high', S i)) (snd state))
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_in_context : Attempting to reify: (snd state)
reify_preprocess : Attempting to preprocess: (snd state)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z * nat -> nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun i : nat =>
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun i : nat =>
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i : nat => weight (S i) / weight i) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i : nat => weight (S i) / weight i) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
((fun
    low_high' : (fun _ : Z * Z => (list Z * Z)%type)
                  (Definitions.Z.add_with_get_carry_full
                     ((fun i : nat => weight (S i) / weight i) i)
                     (snd (fst state)) (fst next) (snd next)) =>
  (low_high', S i))
   (let low_high := fst state in
    let low := fst low_high in
    let high := snd low_high in
    Rewriter.Util.LetIn.Let_In
      (Definitions.Z.add_with_get_carry_full
         ((fun i : nat => weight (S i) / weight i) i) high
         (fst next) (snd next))
      (fun sum_carry : Z * Z =>
       ((low ++ fst sum_carry :: nil)%list, snd sum_carry))))
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_in_context : Attempting to reify:
(let low_high := fst state in
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(let low_high := fst state in
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
((fun low_high : list Z * Z =>
  let low := fst low_high in
  let high := snd low_high in
  Rewriter.Util.LetIn.Let_In
    (Definitions.Z.add_with_get_carry_full
       ((fun i : nat => weight (S i) / weight i) i) high
       (fst next) (snd next))
    (fun sum_carry : Z * Z =>
     ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
   (fst state))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (fst state)
reify_preprocess : Attempting to preprocess: (fst state)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z * nat -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun low_high : list Z * Z =>
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(fun low_high : list Z * Z =>
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
((fun low : list Z =>
  let high := snd low_high in
  Rewriter.Util.LetIn.Let_In
    (Definitions.Z.add_with_get_carry_full
       ((fun i : nat => weight (S i) / weight i) i) high
       (fst next) (snd next))
    (fun sum_carry : Z * Z =>
     ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
   (fst low_high))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (fst low_high)
reify_preprocess : Attempting to preprocess: (fst low_high)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: low_high
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun low : list Z =>
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(fun low : list Z =>
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
((fun high : Z =>
  Rewriter.Util.LetIn.Let_In
    (Definitions.Z.add_with_get_carry_full
       ((fun i : nat => weight (S i) / weight i) i) high
       (fst next) (snd next))
    (fun sum_carry : Z * Z =>
     ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
   (snd low_high))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (snd low_high)
reify_preprocess : Attempting to preprocess: (snd low_high)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: low_high
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun high : Z =>
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(fun high : Z =>
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next) (snd next))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next) (snd next))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_in_context : Attempting to reify: (snd next)
reify_preprocess : Attempting to preprocess: (snd next)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: next
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_in_context : Attempting to reify: (fst next)
reify_preprocess : Attempting to preprocess: (fst next)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: next
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high)
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high)
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_in_context : Attempting to reify: high
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i))
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
((fun i : nat => weight (S i) / weight i) i)
reify_preprocess : Attempting to preprocess:
((fun i : nat => weight (S i) / weight i) i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: (fun i : nat => weight (S i) / weight i)
reify_preprocess : Attempting to preprocess:
(fun i : nat => weight (S i) / weight i)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (weight (S i) / weight i)
reify_preprocess : Attempting to preprocess: (weight (S i) / weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight i)
reify_preprocess : Attempting to preprocess: (weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (Z.div (weight (S i)))
reify_preprocess : Attempting to preprocess: (Z.div (weight (S i)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (weight (S i))
reify_preprocess : Attempting to preprocess: (weight (S i))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (S i)
reify_preprocess : Attempting to preprocess: (S i)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Definitions.Z.add_with_get_carry_full
reify_preprocess : Attempting to preprocess:
Definitions.Z.add_with_get_carry_full
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
(fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry))
reify_preprocess : Attempting to preprocess:
(fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((low ++ fst sum_carry :: nil)%list, snd sum_carry)
reify_preprocess : Attempting to preprocess:
((low ++ fst sum_carry :: nil)%list, snd sum_carry)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd sum_carry)
reify_preprocess : Attempting to preprocess: (snd sum_carry)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: sum_carry
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(pair (low ++ fst sum_carry :: nil)%list)
reify_preprocess : Attempting to preprocess:
(pair (low ++ fst sum_carry :: nil)%list)
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (low ++ fst sum_carry :: nil)%list
reify_preprocess : Attempting to preprocess: (low ++ fst sum_carry :: nil)%list
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst sum_carry :: nil)%list
reify_preprocess : Attempting to preprocess: (fst sum_carry :: nil)%list
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst sum_carry))
reify_preprocess : Attempting to preprocess: (cons (fst sum_carry))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst sum_carry)
reify_preprocess : Attempting to preprocess: (fst sum_carry)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: sum_carry
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app low)
reify_preprocess : Attempting to preprocess: (app low)
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: low
reify_in_context : Attempting to reify: (app (A:=Z))
reify_preprocess : Attempting to preprocess: (app (A:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun
   low_high' : (fun _ : Z * Z => (list Z * Z)%type)
                 (Definitions.Z.add_with_get_carry_full
                    ((fun i : nat => weight (S i) / weight i) i)
                    (snd (fst state)) (fst next) (snd next)) =>
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun
   low_high' : (fun _ : Z * Z => (list Z * Z)%type)
                 (Definitions.Z.add_with_get_carry_full
                    ((fun i : nat => weight (S i) / weight i) i)
                    (snd (fst state)) (fst next) (snd next)) =>
 (low_high', S i))
reify_type : Attempting to reify:
((fun _ : Z * Z => (list Z * Z)%type)
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) (snd (fst state))
      (fst next) (snd next)))
reify_base_type : Attempting to reify:
((fun _ : Z * Z => (list Z * Z)%type)
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) (snd (fst state))
      (fst next) (snd next)))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (low_high', S i)
reify_preprocess : Attempting to preprocess: (low_high', S i)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (S i)
reify_preprocess : Attempting to preprocess: (S i)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (pair low_high')
reify_preprocess : Attempting to preprocess: (pair low_high')
reify_base_type : Attempting to reify: (nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: low_high'
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z * Z -> nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.fold_right (A:=list Z * Z * nat) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list Z * Z * nat) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list Z * Z * nat -> list Z * Z * nat) ->
 list Z * Z * nat -> list (Z * Z) -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z * nat -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun out_carry : list Z * Z => (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(fun out_carry : list Z * Z => (fst out_carry, snd state + snd out_carry))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fst out_carry, snd state + snd out_carry)
reify_preprocess : Attempting to preprocess:
(fst out_carry, snd state + snd out_carry)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd state + snd out_carry)
reify_preprocess : Attempting to preprocess: (snd state + snd out_carry)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd out_carry)
reify_preprocess : Attempting to preprocess: (snd out_carry)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: out_carry
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.add (snd state))
reify_preprocess : Attempting to preprocess: (Z.add (snd state))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (snd state)
reify_preprocess : Attempting to preprocess: (snd state)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.add
reify_preprocess : Attempting to preprocess: Z.add
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair (fst out_carry))
reify_preprocess : Attempting to preprocess: (pair (fst out_carry))
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst out_carry)
reify_preprocess : Attempting to preprocess: (fst out_carry)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: out_carry
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (A:=list Z * Z) (B:=list Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list Z * Z) (B:=list Z))
reify_base_type : Attempting to reify:
((list Z -> list Z * Z -> list Z * Z) ->
 list Z * Z -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun r_flat0 : list Z * Z =>
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun r_flat0 : list Z * Z =>
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(let bound := (0, 2 ^ machine_wordsize - 1) in
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
((fun bound : Z * Z =>
  if
   is_bounded_by (List.repeat bound (S n))
     (Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
  then fst r_flat
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   (0, 2 ^ machine_wordsize - 1))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (0, 2 ^ machine_wordsize - 1)
reify_preprocess : Attempting to preprocess: (0, 2 ^ machine_wordsize - 1)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (2 ^ machine_wordsize - 1)
reify_preprocess : Attempting to preprocess: (2 ^ machine_wordsize - 1)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.sub (2 ^ machine_wordsize))
reify_preprocess : Attempting to preprocess: (Z.sub (2 ^ machine_wordsize))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (2 ^ machine_wordsize)
reify_preprocess : Attempting to preprocess: (2 ^ machine_wordsize)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: machine_wordsize
reify_in_context : Attempting to reify: (Z.pow 2)
reify_preprocess : Attempting to preprocess: (Z.pow 2)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: 2
reify_preprocess : Attempting to preprocess: 2
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.pow
reify_preprocess : Attempting to preprocess: Z.pow
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.sub
reify_preprocess : Attempting to preprocess: Z.sub
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair 0)
reify_preprocess : Attempting to preprocess: (pair 0)
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun bound : Z * Z =>
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(fun bound : Z * Z =>
 if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(if
  is_bounded_by (List.repeat bound (S n))
    (Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list Z) (fun _ : unit => fst r_flat)
   (fun _ : unit =>
    Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   (is_bounded_by (List.repeat bound (S n))
      (Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(is_bounded_by (List.repeat bound (S n))
   (Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)))
reify_preprocess : Attempting to preprocess:
(is_bounded_by (List.repeat bound (S n))
   (Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)))
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (fst r_flat0)
reify_preprocess : Attempting to preprocess: (fst r_flat0)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat0
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat0))
reify_preprocess : Attempting to preprocess:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat0))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_in_context : Attempting to reify: (weight (S n) * snd r_flat0)
reify_preprocess : Attempting to preprocess: (weight (S n) * snd r_flat0)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd r_flat0)
reify_preprocess : Attempting to preprocess: (snd r_flat0)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat0
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (weight (S n)))
reify_preprocess : Attempting to preprocess: (Z.mul (weight (S n)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (weight (S n))
reify_preprocess : Attempting to preprocess: (weight (S n))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (Positional.add_to_nth 0)
reify_preprocess : Attempting to preprocess: (Positional.add_to_nth 0)
reify_base_type : Attempting to reify: (Z -> list Z -> list Z)
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: Positional.add_to_nth
reify_preprocess : Attempting to preprocess: Positional.add_to_nth
reify_base_type : Attempting to reify: (nat -> Z -> list Z -> list Z)
reify_base_type : Attempting to reify: (nat -> Z -> list Z -> list Z)
reify_in_context : Attempting to reify:
(fun (i : nat) (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun (i : nat) (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls : list Z => Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun ls : list Z => Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: ls
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y))
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun y : Z => x + y)
reify_preprocess : Attempting to preprocess: (fun y : Z => x + y)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (x + y)
reify_preprocess : Attempting to preprocess: (x + y)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: y
reify_in_context : Attempting to reify: (Z.add x)
reify_preprocess : Attempting to preprocess: (Z.add x)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: Z.add
reify_preprocess : Attempting to preprocess: Z.add
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (Crypto.Util.ListUtil.update_nth i)
reify_preprocess : Attempting to preprocess: (Crypto.Util.ListUtil.update_nth i)
reify_base_type : Attempting to reify: ((Z -> Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Crypto.Util.ListUtil.update_nth
reify_preprocess : Attempting to preprocess: Crypto.Util.ListUtil.update_nth
reify_base_type : Attempting to reify: (nat -> (Z -> Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(is_bounded_by (List.repeat bound (S n)))
reify_preprocess : Attempting to preprocess:
(is_bounded_by (List.repeat bound (S n)))
reify_base_type : Attempting to reify: (list Z -> bool)
reify_in_context : Attempting to reify: (List.repeat bound (S n))
reify_preprocess : Attempting to preprocess: (List.repeat bound (S n))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (List.repeat bound)
reify_preprocess : Attempting to preprocess: (List.repeat bound)
reify_base_type : Attempting to reify: (nat -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: bound
reify_in_context : Attempting to reify: (List.repeat (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=Z * Z))
reify_base_type : Attempting to reify: (Z * Z -> nat -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: is_bounded_by
reify_preprocess : Attempting to preprocess: is_bounded_by
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> bool)
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify:
(fun (bounds : list (Z * Z)) (ls : list Z) =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_preprocess : Attempting to preprocess:
(fun (bounds : list (Z * Z)) (ls : list Z) =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls : list Z =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_preprocess : Attempting to preprocess:
(fun ls : list Z =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_preprocess : Attempting to preprocess:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: ls
reify_in_context : Attempting to reify:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds)
reify_preprocess : Attempting to preprocess:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds)
reify_base_type : Attempting to reify: (list Z -> bool)
reify_in_context : Attempting to reify: bounds
reify_in_context : Attempting to reify:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)))
reify_preprocess : Attempting to preprocess:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)))
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify:
(fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r))
reify_preprocess : Attempting to preprocess:
(fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun v'' : Z => (fst r <=? v'') && (v'' <=? snd r))
reify_preprocess : Attempting to preprocess:
(fun v'' : Z => (fst r <=? v'') && (v'' <=? snd r))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: ((fst r <=? v'') && (v'' <=? snd r))
reify_preprocess : Attempting to preprocess:
((fst r <=? v'') && (v'' <=? snd r))
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (v'' <=? snd r)
reify_preprocess : Attempting to preprocess: (v'' <=? snd r)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (snd r)
reify_preprocess : Attempting to preprocess: (snd r)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.leb v'')
reify_preprocess : Attempting to preprocess: (Z.leb v'')
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: v''
reify_in_context : Attempting to reify: Z.leb
reify_preprocess : Attempting to preprocess: Z.leb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify: (andb (fst r <=? v''))
reify_preprocess : Attempting to preprocess: (andb (fst r <=? v''))
reify_base_type : Attempting to reify: (bool -> bool)
reify_in_context : Attempting to reify: (fst r <=? v'')
reify_preprocess : Attempting to preprocess: (fst r <=? v'')
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: v''
reify_in_context : Attempting to reify: (Z.leb (fst r))
reify_preprocess : Attempting to preprocess: (Z.leb (fst r))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst r)
reify_preprocess : Attempting to preprocess: (fst r)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.leb
reify_preprocess : Attempting to preprocess: Z.leb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify: andb
reify_preprocess : Attempting to preprocess: andb
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_in_context : Attempting to reify:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false) b1)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: b1
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_base_type : Attempting to reify: (bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => false)
reify_preprocess : Attempting to preprocess: (fun _ : unit => false)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: false
reify_preprocess : Attempting to preprocess: false
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_base_type : Attempting to reify: ((unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => b2)
reify_preprocess : Attempting to preprocess: (fun _ : unit => b2)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: b2
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect bool)
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect bool)
reify_base_type : Attempting to reify:
((unit -> bool) -> (unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: fold_andb_map'
reify_preprocess : Attempting to preprocess: fold_andb_map'
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify: (@fold_andb_map' (Z * Z))
reify_preprocess : Attempting to preprocess: (@fold_andb_map' (Z * Z))
reify_base_type : Attempting to reify:
(forall B : Type, (Z * Z -> B -> bool) -> list (Z * Z) -> list B -> bool)
reify_in_context : Attempting to reify: @fold_andb_map'
reify_preprocess : Attempting to preprocess: @fold_andb_map'
reify_base_type : Attempting to reify:
(forall A B : Type, (A -> B -> bool) -> list A -> list B -> bool)
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify:
(fun (A B : Type) (f : A -> B -> bool) (ls1 : list A) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (A B : Type) (f : A -> B -> bool) (ls1 : list A) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_in_context : Attempting to reify:
(fun (B : Type) (f : Z * Z -> B -> bool) (ls1 : list (Z * Z)) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (B : Type) (f : Z * Z -> B -> bool) (ls1 : list (Z * Z)) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_in_context : Attempting to reify:
(fun (f : Z * Z -> Z -> bool) (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (f : Z * Z -> Z -> bool) (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_type : Attempting to reify: (Z * Z -> Z -> bool)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: (Z -> bool)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls2 : list Z => List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun ls2 : list Z => List.fold_right andb true (dual_map f ls1 ls2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(List.fold_right andb true (dual_map f ls1 ls2))
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (dual_map f ls1 ls2)
reify_preprocess : Attempting to preprocess: (dual_map f ls1 ls2)
reify_base_type : Attempting to reify: (list bool)
reify_in_context : Attempting to reify: ls2
reify_in_context : Attempting to reify: (dual_map f ls1)
reify_preprocess : Attempting to preprocess: (dual_map f ls1)
reify_base_type : Attempting to reify: (list Z -> list bool)
reify_in_context : Attempting to reify: ls1
reify_in_context : Attempting to reify: (dual_map f)
reify_preprocess : Attempting to preprocess: (dual_map f)
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> list bool)
reify_in_context : Attempting to reify: f
reify_in_context : Attempting to reify: dual_map
reify_preprocess : Attempting to preprocess: dual_map
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> list bool)
reify_in_context : Attempting to reify: (@dual_map (Z * Z))
reify_preprocess : Attempting to preprocess: (@dual_map (Z * Z))
reify_base_type : Attempting to reify:
(forall B : Type, (Z * Z -> B -> bool) -> list (Z * Z) -> list B -> list bool)
reify_in_context : Attempting to reify: @dual_map
reify_preprocess : Attempting to preprocess: @dual_map
reify_base_type : Attempting to reify:
(forall A B : Type, (A -> B -> bool) -> list A -> list B -> list bool)
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> list bool)
reify_in_context : Attempting to reify:
(fun (A B : Type) (f : A -> B -> bool) (l1 : list A) (l2 : list B) =>
 List.map (fun x : A * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (A B : Type) (f : A -> B -> bool) (l1 : list A) (l2 : list B) =>
 List.map (fun x : A * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_in_context : Attempting to reify:
(fun (B : Type) (f : Z * Z -> B -> bool) (l1 : list (Z * Z)) (l2 : list B) =>
 List.map (fun x : Z * Z * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (B : Type) (f : Z * Z -> B -> bool) (l1 : list (Z * Z)) (l2 : list B) =>
 List.map (fun x : Z * Z * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_in_context : Attempting to reify:
(fun (f : Z * Z -> Z -> bool) (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (f : Z * Z -> Z -> bool) (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_type : Attempting to reify: (Z * Z -> Z -> bool)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: (Z -> bool)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l2 : list Z =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun l2 : list Z =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_base_type : Attempting to reify: (list bool)
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.combine l1 l2)
reify_preprocess : Attempting to preprocess: (List.combine l1 l2)
reify_base_type : Attempting to reify: (list (Z * Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l2
reify_in_context : Attempting to reify: (List.combine (B:=Z) l1)
reify_preprocess : Attempting to preprocess: (List.combine (B:=Z) l1)
reify_base_type : Attempting to reify: (list Z -> list (Z * Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l1
reify_in_context : Attempting to reify: (List.combine (A:=Z * Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.combine (A:=Z * Z) (B:=Z))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list Z -> list (Z * Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)))
reify_preprocess : Attempting to preprocess:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)))
reify_base_type : Attempting to reify: (list (Z * Z * Z) -> list bool)
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun x : Z * Z * Z => f (fst x) (snd x))
reify_preprocess : Attempting to preprocess:
(fun x : Z * Z * Z => f (fst x) (snd x))
reify_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (f (fst x) (snd x))
reify_preprocess : Attempting to preprocess: (f (fst x) (snd x))
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (snd x)
reify_preprocess : Attempting to preprocess: (snd x)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z * Z -> Z)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (f (fst x))
reify_preprocess : Attempting to preprocess: (f (fst x))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst x)
reify_preprocess : Attempting to preprocess: (fst x)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z * Z -> Z * Z)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: f
reify_in_context : Attempting to reify: (List.map (A:=Z * Z * Z) (B:=bool))
reify_preprocess : Attempting to preprocess: (List.map (A:=Z * Z * Z) (B:=bool))
reify_base_type : Attempting to reify:
((Z * Z * Z -> bool) -> list (Z * Z * Z) -> list bool)
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right andb true)
reify_preprocess : Attempting to preprocess: (List.fold_right andb true)
reify_base_type : Attempting to reify: (list bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: true
reify_preprocess : Attempting to preprocess: true
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right andb)
reify_preprocess : Attempting to preprocess: (List.fold_right andb)
reify_base_type : Attempting to reify: (bool -> list bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: andb
reify_preprocess : Attempting to preprocess: andb
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_in_context : Attempting to reify:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false) b1)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: b1
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_base_type : Attempting to reify: (bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => false)
reify_preprocess : Attempting to preprocess: (fun _ : unit => false)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: false
reify_preprocess : Attempting to preprocess: false
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_base_type : Attempting to reify: ((unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => b2)
reify_preprocess : Attempting to preprocess: (fun _ : unit => b2)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: b2
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect bool)
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect bool)
reify_base_type : Attempting to reify:
((unit -> bool) -> (unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right (A:=bool) (B:=bool))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=bool) (B:=bool))
reify_base_type : Attempting to reify:
((bool -> bool -> bool) -> bool -> list bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list Z) (fun _ : unit => fst r_flat)
   (fun _ : unit =>
    Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list Z) (fun _ : unit => fst r_flat)
   (fun _ : unit =>
    Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)))
reify_base_type : Attempting to reify: (bool -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (fst r_flat)
reify_preprocess : Attempting to preprocess: (fst r_flat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat))
reify_preprocess : Attempting to preprocess:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_in_context : Attempting to reify: (weight (S n) * snd r_flat)
reify_preprocess : Attempting to preprocess: (weight (S n) * snd r_flat)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd r_flat)
reify_preprocess : Attempting to preprocess: (snd r_flat)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (weight (S n)))
reify_preprocess : Attempting to preprocess: (Z.mul (weight (S n)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (weight (S n))
reify_preprocess : Attempting to preprocess: (weight (S n))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (Positional.add_to_nth 0)
reify_preprocess : Attempting to preprocess: (Positional.add_to_nth 0)
reify_base_type : Attempting to reify: (Z -> list Z -> list Z)
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: Positional.add_to_nth
reify_preprocess : Attempting to preprocess: Positional.add_to_nth
reify_base_type : Attempting to reify: (nat -> Z -> list Z -> list Z)
reify_base_type : Attempting to reify: (nat -> Z -> list Z -> list Z)
reify_in_context : Attempting to reify:
(fun (i : nat) (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun (i : nat) (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls : list Z => Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun ls : list Z => Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: ls
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y))
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun y : Z => x + y)
reify_preprocess : Attempting to preprocess: (fun y : Z => x + y)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (x + y)
reify_preprocess : Attempting to preprocess: (x + y)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: y
reify_in_context : Attempting to reify: (Z.add x)
reify_preprocess : Attempting to preprocess: (Z.add x)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: Z.add
reify_preprocess : Attempting to preprocess: Z.add
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (Crypto.Util.ListUtil.update_nth i)
reify_preprocess : Attempting to preprocess: (Crypto.Util.ListUtil.update_nth i)
reify_base_type : Attempting to reify: ((Z -> Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Crypto.Util.ListUtil.update_nth
reify_preprocess : Attempting to preprocess: Crypto.Util.ListUtil.update_nth
reify_base_type : Attempting to reify: (nat -> (Z -> Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list Z) (fun _ : unit => fst r_flat))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list Z) (fun _ : unit => fst r_flat))
reify_base_type : Attempting to reify: ((unit -> list Z) -> bool -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => fst r_flat)
reify_preprocess : Attempting to preprocess: (fun _ : unit => fst r_flat)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (fst r_flat)
reify_preprocess : Attempting to preprocess: (fst r_flat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list Z))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) -> (unit -> list Z) -> bool -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list Z)
   (fun _ : unit =>
    let p_a := Positional.to_associational weight (S n) (fst r_flat) in
    let r_a := sat_reduce base s c (S n) p_a in
    let r_rows := Rows.from_associational weight (S n) r_a in
    let r_flat0 := Rows.flatten weight (S n) r_rows in
    let bound := (0, 2 ^ machine_wordsize - 1) in
    if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
    then fst r_flat0
    else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list Z)
   (fun _ : unit =>
    let p_a := Positional.to_associational weight (S n) (fst r_flat) in
    let r_a := sat_reduce base s c (S n) p_a in
    let r_rows := Rows.from_associational weight (S n) r_a in
    let r_flat0 := Rows.flatten weight (S n) r_rows in
    let bound := (0, 2 ^ machine_wordsize - 1) in
    if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
    then fst r_flat0
    else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0)))
reify_base_type : Attempting to reify: ((unit -> list Z) -> bool -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 let p_a := Positional.to_associational weight (S n) (fst r_flat) in
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 let p_a := Positional.to_associational weight (S n) (fst r_flat) in
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(let p_a := Positional.to_associational weight (S n) (fst r_flat) in
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let p_a := Positional.to_associational weight (S n) (fst r_flat) in
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun p_a : list (Z * Z) =>
  let r_a := sat_reduce base s c (S n) p_a in
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (Positional.to_associational weight (S n) (fst r_flat)))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify:
(Positional.to_associational weight (S n) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(Positional.to_associational weight (S n) (fst r_flat))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (fst r_flat)
reify_preprocess : Attempting to preprocess: (fst r_flat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Positional.to_associational weight (S n))
reify_preprocess : Attempting to preprocess:
(Positional.to_associational weight (S n))
reify_base_type : Attempting to reify: (list Z -> list (Z * Z))
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Positional.to_associational weight)
reify_preprocess : Attempting to preprocess:
(Positional.to_associational weight)
reify_base_type : Attempting to reify: (nat -> list Z -> list (Z * Z))
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Positional.to_associational
reify_preprocess : Attempting to preprocess: Positional.to_associational
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list Z -> list (Z * Z))
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list Z -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (xs : list Z) =>
 List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (xs : list Z) =>
 List.combine (List.map weight (List.seq 0 n)) xs)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (xs : list Z) => List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (xs : list Z) => List.combine (List.map weight (List.seq 0 n)) xs)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun xs : list Z => List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(fun xs : list Z => List.combine (List.map weight (List.seq 0 n)) xs)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.combine (List.map weight (List.seq 0 n)) xs)
reify_preprocess : Attempting to preprocess:
(List.combine (List.map weight (List.seq 0 n)) xs)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xs
reify_in_context : Attempting to reify:
(List.combine (B:=Z) (List.map weight (List.seq 0 n)))
reify_preprocess : Attempting to preprocess:
(List.combine (B:=Z) (List.map weight (List.seq 0 n)))
reify_base_type : Attempting to reify: (list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map weight (List.seq 0 n))
reify_preprocess : Attempting to preprocess: (List.map weight (List.seq 0 n))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.seq 0 n)
reify_preprocess : Attempting to preprocess: (List.seq 0 n)
reify_base_type : Attempting to reify: (list nat)
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.seq 0)
reify_preprocess : Attempting to preprocess: (List.seq 0)
reify_base_type : Attempting to reify: (nat -> list nat)
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: List.seq
reify_preprocess : Attempting to preprocess: List.seq
reify_base_type : Attempting to reify: (nat -> nat -> list nat)
reify_in_context : Attempting to reify: (List.map weight)
reify_preprocess : Attempting to preprocess: (List.map weight)
reify_base_type : Attempting to reify: (list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (List.map (A:=nat) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=nat) (B:=Z))
reify_base_type : Attempting to reify: ((nat -> Z) -> list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.combine (A:=Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.combine (A:=Z) (B:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p_a : list (Z * Z) =>
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun p_a : list (Z * Z) =>
 let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let r_a := sat_reduce base s c (S n) p_a in
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun r_a : list (Z * Z) =>
  let r_rows := Rows.from_associational weight (S n) r_a in
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (sat_reduce base s c (S n) p_a))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (sat_reduce base s c (S n) p_a)
reify_preprocess : Attempting to preprocess: (sat_reduce base s c (S n) p_a)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: p_a
reify_in_context : Attempting to reify: (sat_reduce base s c (S n))
reify_preprocess : Attempting to preprocess: (sat_reduce base s c (S n))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (sat_reduce base s c)
reify_preprocess : Attempting to preprocess: (sat_reduce base s c)
reify_base_type : Attempting to reify: (nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (sat_reduce base s)
reify_preprocess : Attempting to preprocess: (sat_reduce base s)
reify_base_type : Attempting to reify:
(list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (sat_reduce base)
reify_preprocess : Attempting to preprocess: (sat_reduce base)
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: base
reify_in_context : Attempting to reify: sat_reduce
reify_preprocess : Attempting to preprocess: sat_reduce
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify:
(let machine_wordsize := 64 in
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let machine_wordsize := 64 in
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun machine_wordsize : Z =>
  let weight := UniformWeight.uweight machine_wordsize in
  fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
  let s' := fst (Rows.adjust_s weight (S (S n)) s) in
  let lo_hi := Associational.split s' p in
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) 64)
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: 64
reify_preprocess : Attempting to preprocess: 64
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun machine_wordsize : Z =>
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun machine_wordsize : Z =>
 let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let weight := UniformWeight.uweight machine_wordsize in
 fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z))
    (n : nat) (p : list (Z * Z)) =>
  let s' := fst (Rows.adjust_s weight (S (S n)) s) in
  let lo_hi := Associational.split s' p in
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) (UniformWeight.uweight machine_wordsize))
reify_base_type : Attempting to reify:
(Z -> Z -> list (Z * Z) -> nat -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: (UniformWeight.uweight machine_wordsize)
reify_preprocess : Attempting to preprocess:
(UniformWeight.uweight machine_wordsize)
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: machine_wordsize
reify_in_context : Attempting to reify: UniformWeight.uweight
reify_preprocess : Attempting to preprocess: UniformWeight.uweight
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_in_context : Attempting to reify: (fun lgr : Z => ModOps.weight lgr 1)
reify_preprocess : Attempting to preprocess:
(fun lgr : Z => ModOps.weight lgr 1)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (ModOps.weight lgr 1)
reify_preprocess : Attempting to preprocess: (ModOps.weight lgr 1)
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (ModOps.weight lgr)
reify_preprocess : Attempting to preprocess: (ModOps.weight lgr)
reify_base_type : Attempting to reify: (Z -> nat -> Z)
reify_in_context : Attempting to reify: lgr
reify_in_context : Attempting to reify: ModOps.weight
reify_preprocess : Attempting to preprocess: ModOps.weight
reify_base_type : Attempting to reify: (Z -> Z -> nat -> Z)
reify_base_type : Attempting to reify: (Z -> Z -> nat -> Z)
reify_in_context : Attempting to reify:
(fun (limbwidth_num limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun (limbwidth_num limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun (limbwidth_den : Z) (i : nat) =>
 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun i : nat => 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(fun i : nat => 2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_preprocess : Attempting to preprocess:
(2 ^ (- (- (limbwidth_num * Z.of_nat i) / limbwidth_den)))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(- (- (limbwidth_num * Z.of_nat i) / limbwidth_den))
reify_preprocess : Attempting to preprocess:
(- (- (limbwidth_num * Z.of_nat i) / limbwidth_den))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(- (limbwidth_num * Z.of_nat i) / limbwidth_den)
reify_preprocess : Attempting to preprocess:
(- (limbwidth_num * Z.of_nat i) / limbwidth_den)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: limbwidth_den
reify_in_context : Attempting to reify: (Z.div (- (limbwidth_num * Z.of_nat i)))
reify_preprocess : Attempting to preprocess:
(Z.div (- (limbwidth_num * Z.of_nat i)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (- (limbwidth_num * Z.of_nat i))
reify_preprocess : Attempting to preprocess: (- (limbwidth_num * Z.of_nat i))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (limbwidth_num * Z.of_nat i)
reify_preprocess : Attempting to preprocess: (limbwidth_num * Z.of_nat i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.of_nat i)
reify_preprocess : Attempting to preprocess: (Z.of_nat i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Z.of_nat
reify_preprocess : Attempting to preprocess: Z.of_nat
reify_base_type : Attempting to reify: (nat -> Z)
reify_in_context : Attempting to reify: (Z.mul limbwidth_num)
reify_preprocess : Attempting to preprocess: (Z.mul limbwidth_num)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: limbwidth_num
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (Z.pow 2)
reify_preprocess : Attempting to preprocess: (Z.pow 2)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: 2
reify_preprocess : Attempting to preprocess: 2
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.pow
reify_preprocess : Attempting to preprocess: Z.pow
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z))
   (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (base s : Z) (c : list (Z * Z))
   (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (base s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (c : list (Z * Z)) (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (p : list (Z * Z)) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let s' := fst (Rows.adjust_s weight (S (S n)) s) in
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun s' : Z =>
  let lo_hi := Associational.split s' p in
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) (fst (Rows.adjust_s weight (S (S n)) s)))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (fst (Rows.adjust_s weight (S (S n)) s))
reify_preprocess : Attempting to preprocess:
(fst (Rows.adjust_s weight (S (S n)) s))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (Rows.adjust_s weight (S (S n)) s)
reify_preprocess : Attempting to preprocess: (Rows.adjust_s weight (S (S n)) s)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Rows.adjust_s weight (S (S n)))
reify_preprocess : Attempting to preprocess: (Rows.adjust_s weight (S (S n)))
reify_base_type : Attempting to reify: (Z -> Z * bool)
reify_in_context : Attempting to reify: (S (S n))
reify_preprocess : Attempting to preprocess: (S (S n))
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Rows.adjust_s weight)
reify_preprocess : Attempting to preprocess: (Rows.adjust_s weight)
reify_base_type : Attempting to reify: (nat -> Z -> Z * bool)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.adjust_s
reify_preprocess : Attempting to preprocess: Rows.adjust_s
reify_base_type : Attempting to reify: ((nat -> Z) -> nat -> Z -> Z * bool)
reify_base_type : Attempting to reify: ((nat -> Z) -> nat -> Z -> Z * bool)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(fun (fuel : nat) (s : Z) =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun s : Z =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(fun s : Z =>
 List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false) (List.map weight (List.rev (List.seq 0 fuel))))
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map weight (List.rev (List.seq 0 fuel)))
reify_preprocess : Attempting to preprocess:
(List.map weight (List.rev (List.seq 0 fuel)))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.rev (List.seq 0 fuel))
reify_preprocess : Attempting to preprocess: (List.rev (List.seq 0 fuel))
reify_base_type : Attempting to reify: (list nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.seq 0 fuel)
reify_preprocess : Attempting to preprocess: (List.seq 0 fuel)
reify_base_type : Attempting to reify: (list nat)
reify_in_context : Attempting to reify: fuel
reify_in_context : Attempting to reify: (List.seq 0)
reify_preprocess : Attempting to preprocess: (List.seq 0)
reify_base_type : Attempting to reify: (nat -> list nat)
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: List.seq
reify_preprocess : Attempting to preprocess: List.seq
reify_base_type : Attempting to reify: (nat -> nat -> list nat)
reify_in_context : Attempting to reify: (List.rev (A:=nat))
reify_preprocess : Attempting to preprocess: (List.rev (A:=nat))
reify_base_type : Attempting to reify: (list nat -> list nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.map weight)
reify_preprocess : Attempting to preprocess: (List.map weight)
reify_base_type : Attempting to reify: (list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (List.map (A:=nat) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=nat) (B:=Z))
reify_base_type : Attempting to reify: ((nat -> Z) -> list nat -> list Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0)
   (s, false))
reify_base_type : Attempting to reify: (list Z -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (s, false)
reify_preprocess : Attempting to preprocess: (s, false)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: false
reify_preprocess : Attempting to preprocess: false
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (pair s)
reify_preprocess : Attempting to preprocess: (pair s)
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (w_i : Z) '(v, found_adjustment) =>
    let res0 := (v, found_adjustment) in
    if found_adjustment
    then res0
    else if w_i mod s =? 0 then (w_i, true) else res0))
reify_base_type : Attempting to reify: (Z * bool -> list Z -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (w_i : Z) '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_preprocess : Attempting to preprocess:
(fun (w_i : Z) '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_preprocess : Attempting to preprocess:
(fun '(v, found_adjustment) =>
 let res0 := (v, found_adjustment) in
 if found_adjustment then res0 else if w_i mod s =? 0 then (w_i, true) else res0)
reify_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(let
 '(v, found_adjustment) := res in
  let res := (v, found_adjustment) in
  if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(let
 '(v, found_adjustment) := res in
  let res := (v, found_adjustment) in
  if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(Prod.prod_rect_nodep
   (fun (v : Z) (found_adjustment : bool) =>
    let res := (v, found_adjustment) in
    if found_adjustment
    then res
    else if w_i mod s =? 0 then (w_i, true) else res) res)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: res
reify_in_context : Attempting to reify:
(Prod.prod_rect_nodep
   (fun (v : Z) (found_adjustment : bool) =>
    let res := (v, found_adjustment) in
    if found_adjustment
    then res
    else if w_i mod s =? 0 then (w_i, true) else res))
reify_preprocess : Attempting to preprocess:
(Prod.prod_rect_nodep
   (fun (v : Z) (found_adjustment : bool) =>
    let res := (v, found_adjustment) in
    if found_adjustment
    then res
    else if w_i mod s =? 0 then (w_i, true) else res))
reify_base_type : Attempting to reify: (Z * bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun (v : Z) (found_adjustment : bool) =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun (v : Z) (found_adjustment : bool) =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun found_adjustment : bool =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun found_adjustment : bool =>
 let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(let res := (v, found_adjustment) in
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
((fun res : Z * bool =>
  if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
   (v, found_adjustment))
reify_base_type : Attempting to reify: (Z * bool)%type
reify_in_context : Attempting to reify: (v, found_adjustment)
reify_preprocess : Attempting to preprocess: (v, found_adjustment)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: found_adjustment
reify_in_context : Attempting to reify: (pair v)
reify_preprocess : Attempting to preprocess: (pair v)
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: v
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun res : Z * bool =>
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun res : Z * bool =>
 if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(if found_adjustment then res else if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res)
   (fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res)
   found_adjustment)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: found_adjustment
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res)
   (fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res)
   (fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res))
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => if w_i mod s =? 0 then (w_i, true) else res)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(if w_i mod s =? 0 then (w_i, true) else res)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true))
   (fun _ : unit => res) (w_i mod s =? 0))
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (w_i mod s =? 0)
reify_preprocess : Attempting to preprocess: (w_i mod s =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (w_i mod s))
reify_preprocess : Attempting to preprocess: (Z.eqb (w_i mod s))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (w_i mod s)
reify_preprocess : Attempting to preprocess: (w_i mod s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.modulo w_i)
reify_preprocess : Attempting to preprocess: (Z.modulo w_i)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: w_i
reify_in_context : Attempting to reify: Z.modulo
reify_preprocess : Attempting to preprocess: Z.modulo
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true))
   (fun _ : unit => res))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true))
   (fun _ : unit => res))
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => res)
reify_preprocess : Attempting to preprocess: (fun _ : unit => res)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: res
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => (w_i, true)))
reify_base_type : Attempting to reify: ((unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => (w_i, true))
reify_preprocess : Attempting to preprocess: (fun _ : unit => (w_i, true))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (w_i, true)
reify_preprocess : Attempting to preprocess: (w_i, true)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: true
reify_preprocess : Attempting to preprocess: true
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (pair w_i)
reify_preprocess : Attempting to preprocess: (pair w_i)
reify_base_type : Attempting to reify: (bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: w_i
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (Z * bool))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (Z * bool))
reify_base_type : Attempting to reify:
((unit -> Z * bool) -> (unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (Z * bool) (fun _ : unit => res))
reify_base_type : Attempting to reify: ((unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => res)
reify_preprocess : Attempting to preprocess: (fun _ : unit => res)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: res
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (Z * bool))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (Z * bool))
reify_base_type : Attempting to reify:
((unit -> Z * bool) -> (unit -> Z * bool) -> bool -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: Prod.prod_rect_nodep
reify_preprocess : Attempting to preprocess: Prod.prod_rect_nodep
reify_base_type : Attempting to reify:
((Z -> bool -> Z * bool) -> Z * bool -> Z * bool)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right (A:=Z * bool) (B:=Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=Z * bool) (B:=Z))
reify_base_type : Attempting to reify:
((Z -> Z * bool -> Z * bool) -> Z * bool -> list Z -> Z * bool)
reify_base_type : Attempting to reify: (Z * bool)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * bool -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun s' : Z =>
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun s' : Z =>
 let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let lo_hi := Associational.split s' p in
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun lo_hi : list (Z * Z) * list (Z * Z) =>
  let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r) (Associational.split s' p))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (Associational.split s' p)
reify_preprocess : Attempting to preprocess: (Associational.split s' p)
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: (Associational.split s')
reify_preprocess : Attempting to preprocess: (Associational.split s')
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_in_context : Attempting to reify: s'
reify_in_context : Attempting to reify: Associational.split
reify_preprocess : Attempting to preprocess: Associational.split
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (p : list (Z * Z)) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (p : list (Z * Z)) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(let hi_lo := List.partition (fun t : Z * Z => fst t mod s =? 0) p in
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
((fun hi_lo : list (Z * Z) * list (Z * Z) =>
  (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
   (List.partition (fun t : Z * Z => fst t mod s =? 0) p))
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_in_context : Attempting to reify:
(List.partition (fun t : Z * Z => fst t mod s =? 0) p)
reify_preprocess : Attempting to preprocess:
(List.partition (fun t : Z * Z => fst t mod s =? 0) p)
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.partition (fun t : Z * Z => fst t mod s =? 0))
reify_preprocess : Attempting to preprocess:
(List.partition (fun t : Z * Z => fst t mod s =? 0))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun t : Z * Z => fst t mod s =? 0)
reify_preprocess : Attempting to preprocess: (fun t : Z * Z => fst t mod s =? 0)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t mod s =? 0)
reify_preprocess : Attempting to preprocess: (fst t mod s =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (fst t mod s))
reify_preprocess : Attempting to preprocess: (Z.eqb (fst t mod s))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst t mod s)
reify_preprocess : Attempting to preprocess: (fst t mod s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.modulo (fst t))
reify_preprocess : Attempting to preprocess: (Z.modulo (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.modulo
reify_preprocess : Attempting to preprocess: Z.modulo
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify: (List.partition (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.partition (A:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> bool) -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun hi_lo : list (Z * Z) * list (Z * Z) =>
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_preprocess : Attempting to preprocess:
(fun hi_lo : list (Z * Z) * list (Z * Z) =>
 (snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo)))
reify_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_preprocess : Attempting to preprocess:
(snd hi_lo, List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_preprocess : Attempting to preprocess:
(List.map (fun t : Z * Z => (fst t / s, snd t)) (fst hi_lo))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst hi_lo)
reify_preprocess : Attempting to preprocess: (fst hi_lo)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: hi_lo
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun t : Z * Z => (fst t / s, snd t)))
reify_preprocess : Attempting to preprocess:
(List.map (fun t : Z * Z => (fst t / s, snd t)))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun t : Z * Z => (fst t / s, snd t))
reify_preprocess : Attempting to preprocess:
(fun t : Z * Z => (fst t / s, snd t))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t / s, snd t)
reify_preprocess : Attempting to preprocess: (fst t / s, snd t)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t / s))
reify_preprocess : Attempting to preprocess: (pair (fst t / s))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t / s)
reify_preprocess : Attempting to preprocess: (fst t / s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.div (fst t))
reify_preprocess : Attempting to preprocess: (Z.div (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (snd hi_lo))
reify_preprocess : Attempting to preprocess: (pair (snd hi_lo))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd hi_lo)
reify_preprocess : Attempting to preprocess: (snd hi_lo)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: hi_lo
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z) * list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun lo_hi : list (Z * Z) * list (Z * Z) =>
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun lo_hi : list (Z * Z) * list (Z * Z) =>
 let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z) * list (Z * Z))%type
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let coef := Associational.sat_mul_const base ((1, s' / s) :: nil) c in
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun coef : list (Z * Z) =>
  let hi := Associational.sat_mul_const base coef (snd lo_hi) in
  let r := (fst lo_hi ++ hi)%list in r)
   (Associational.sat_mul_const base ((1, s' / s) :: nil) c))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify:
(Associational.sat_mul_const base ((1, s' / s) :: nil) c)
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base ((1, s' / s) :: nil) c)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify:
(Associational.sat_mul_const base ((1, s' / s) :: nil))
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base ((1, s' / s) :: nil))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: ((1, s' / s) :: nil)%list
reify_preprocess : Attempting to preprocess: ((1, s' / s) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (1, s' / s))
reify_preprocess : Attempting to preprocess: (cons (1, s' / s))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (1, s' / s)
reify_preprocess : Attempting to preprocess: (1, s' / s)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (s' / s)
reify_preprocess : Attempting to preprocess: (s' / s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.div s')
reify_preprocess : Attempting to preprocess: (Z.div s')
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: s'
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair 1)
reify_preprocess : Attempting to preprocess: (pair 1)
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_mul_const base)
reify_preprocess : Attempting to preprocess: (Associational.sat_mul_const base)
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: base
reify_in_context : Attempting to reify: Associational.sat_mul_const
reify_preprocess : Attempting to preprocess: Associational.sat_mul_const
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: q
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t t')
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t)
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t)
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s)
reify_preprocess : Attempting to preprocess: (Associational.sat_multerm_const s)
reify_base_type : Attempting to reify: (Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Associational.sat_multerm_const
reify_preprocess : Attempting to preprocess: Associational.sat_multerm_const
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 1)
reify_preprocess : Attempting to preprocess: (snd t =? 1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? -1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? -1)
reify_preprocess : Attempting to preprocess: (snd t =? -1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (-1)
reify_preprocess : Attempting to preprocess: (-1)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 0))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 0)
reify_preprocess : Attempting to preprocess: (snd t =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_in_context : Attempting to reify:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s (snd t))
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s (snd t))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s)
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s)
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Definitions.Z.mul_split
reify_preprocess : Attempting to preprocess: Definitions.Z.mul_split
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t' * s, snd xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t' * s, snd xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s, snd xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s, snd xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd xy)
reify_preprocess : Attempting to preprocess: (snd xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t' * s))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t' * s))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.mul (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', fst xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', fst xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', fst xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t', fst xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst xy)
reify_preprocess : Attempting to preprocess: (fst xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', - snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', - snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', - snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', - snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', - snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', - snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (- snd t')
reify_preprocess : Attempting to preprocess: (- snd t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun coef : list (Z * Z) =>
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun coef : list (Z * Z) =>
 let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let hi := Associational.sat_mul_const base coef (snd lo_hi) in
 let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun hi : list (Z * Z) => let r := (fst lo_hi ++ hi)%list in r)
   (Associational.sat_mul_const base coef (snd lo_hi)))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify:
(Associational.sat_mul_const base coef (snd lo_hi))
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base coef (snd lo_hi))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (snd lo_hi)
reify_preprocess : Attempting to preprocess: (snd lo_hi)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: lo_hi
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_mul_const base coef)
reify_preprocess : Attempting to preprocess:
(Associational.sat_mul_const base coef)
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: coef
reify_in_context : Attempting to reify: (Associational.sat_mul_const base)
reify_preprocess : Attempting to preprocess: (Associational.sat_mul_const base)
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify: base
reify_in_context : Attempting to reify: Associational.sat_mul_const
reify_preprocess : Attempting to preprocess: Associational.sat_mul_const
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify:
(Z -> list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (p q : list (Z * Z)) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun p q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(fun q : list (Z * Z) =>
 List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
   p)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_preprocess : Attempting to preprocess:
(List.flat_map
   (fun t : Z * Z =>
    List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(fun t : Z * Z =>
 List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t') q)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: q
reify_in_context : Attempting to reify:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_preprocess : Attempting to preprocess:
(List.flat_map (fun t' : Z * Z => Associational.sat_multerm_const s t t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z => Associational.sat_multerm_const s t t')
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t t')
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t t')
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s t)
reify_preprocess : Attempting to preprocess:
(Associational.sat_multerm_const s t)
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: (Associational.sat_multerm_const s)
reify_preprocess : Attempting to preprocess: (Associational.sat_multerm_const s)
reify_base_type : Attempting to reify: (Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Associational.sat_multerm_const
reify_preprocess : Attempting to preprocess: Associational.sat_multerm_const
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_base_type : Attempting to reify: (Z -> Z * Z -> Z * Z -> list (Z * Z))
reify_in_context : Attempting to reify:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun (s : Z) (t t' : Z * Z) =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun t' : Z * Z =>
 if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 1
 then ((fst t * fst t', snd t') :: nil)%list
 else
  if snd t =? -1
  then ((fst t * fst t', - snd t') :: nil)%list
  else
   if snd t =? 0
   then nil
   else
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 1)
reify_preprocess : Attempting to preprocess: (snd t =? 1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? -1
    then ((fst t * fst t', - snd t') :: nil)%list
    else
     if snd t =? 0
     then nil
     else
      Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
        (fun xy : Z * Z =>
         ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? -1
 then ((fst t * fst t', - snd t') :: nil)%list
 else
  if snd t =? 0
  then nil
  else
   Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
     (fun xy : Z * Z =>
      ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? -1))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? -1)
reify_preprocess : Attempting to preprocess: (snd t =? -1)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (-1)
reify_preprocess : Attempting to preprocess: (-1)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
   (fun _ : unit =>
    if snd t =? 0
    then nil
    else
     Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
       (fun xy : Z * Z =>
        ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(if snd t =? 0
 then nil
 else
  Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
    (fun xy : Z * Z =>
     ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
   (snd t =? 0))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t =? 0)
reify_preprocess : Attempting to preprocess: (snd t =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (snd t))
reify_preprocess : Attempting to preprocess: (Z.eqb (snd t))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil)
   (fun _ : unit =>
    Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
      (fun xy : Z * Z =>
       ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)))
reify_base_type : Attempting to reify: (bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In (Definitions.Z.mul_split s (snd t) (snd t'))
   (fun xy : Z * Z =>
    ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list))
reify_in_context : Attempting to reify:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.mul_split s (snd t) (snd t'))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s (snd t))
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s (snd t))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Definitions.Z.mul_split s)
reify_preprocess : Attempting to preprocess: (Definitions.Z.mul_split s)
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: Definitions.Z.mul_split
reify_preprocess : Attempting to preprocess: Definitions.Z.mul_split
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun xy : Z * Z =>
 ((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', fst xy) :: (fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t' * s, snd xy) :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t' * s, snd xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t' * s, snd xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s, snd xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s, snd xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd xy)
reify_preprocess : Attempting to preprocess: (snd xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t' * s))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t' * s))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t' * s)
reify_preprocess : Attempting to preprocess: (fst t * fst t' * s)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: s
reify_in_context : Attempting to reify: (Z.mul (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', fst xy))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', fst xy))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', fst xy)
reify_preprocess : Attempting to preprocess: (fst t * fst t', fst xy)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst xy)
reify_preprocess : Attempting to preprocess: (fst xy)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xy
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', - snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', - snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', - snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', - snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', - snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', - snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', - snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (- snd t')
reify_preprocess : Attempting to preprocess: (- snd t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.opp
reify_preprocess : Attempting to preprocess: Z.opp
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z))
   (fun _ : unit => ((fst t * fst t', snd t') :: nil)%list))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fun _ : unit => ((fst t * fst t', snd t') :: nil)%list)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: ((fst t * fst t', snd t') :: nil)%list
reify_preprocess : Attempting to preprocess:
((fst t * fst t', snd t') :: nil)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst t * fst t', snd t'))
reify_preprocess : Attempting to preprocess: (cons (fst t * fst t', snd t'))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t', snd t')
reify_preprocess : Attempting to preprocess: (fst t * fst t', snd t')
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t')
reify_preprocess : Attempting to preprocess: (snd t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst t * fst t'))
reify_preprocess : Attempting to preprocess: (pair (fst t * fst t'))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * fst t')
reify_preprocess : Attempting to preprocess: (fst t * fst t')
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t')
reify_preprocess : Attempting to preprocess: (fst t')
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t'
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z * Z -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list (Z * Z)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list (Z * Z)))
reify_base_type : Attempting to reify:
((unit -> list (Z * Z)) -> (unit -> list (Z * Z)) -> bool -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.flat_map (A:=Z * Z) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (Z * Z)) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun hi : list (Z * Z) => let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(fun hi : list (Z * Z) => let r := (fst lo_hi ++ hi)%list in r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
(let r := (fst lo_hi ++ hi)%list in r)
reify_preprocess : Attempting to preprocess:
((fun r : list (Z * Z) => r) (fst lo_hi ++ hi)%list)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_in_context : Attempting to reify: (fst lo_hi ++ hi)%list
reify_preprocess : Attempting to preprocess: (fst lo_hi ++ hi)%list
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: hi
reify_in_context : Attempting to reify: (app (fst lo_hi))
reify_preprocess : Attempting to preprocess: (app (fst lo_hi))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst lo_hi)
reify_preprocess : Attempting to preprocess: (fst lo_hi)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: lo_hi
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify:
(list (Z * Z) * list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (app (A:=Z * Z))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun r : list (Z * Z) => r)
reify_preprocess : Attempting to preprocess: (fun r : list (Z * Z) => r)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r
reify_in_context : Attempting to reify:
(fun r_a : list (Z * Z) =>
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun r_a : list (Z * Z) =>
 let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let r_rows := Rows.from_associational weight (S n) r_a in
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun r_rows : list (list Z) =>
  let r_flat0 := Rows.flatten weight (S n) r_rows in
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (Rows.from_associational weight (S n) r_a))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify:
(Rows.from_associational weight (S n) r_a)
reify_preprocess : Attempting to preprocess:
(Rows.from_associational weight (S n) r_a)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: r_a
reify_in_context : Attempting to reify: (Rows.from_associational weight (S n))
reify_preprocess : Attempting to preprocess:
(Rows.from_associational weight (S n))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Rows.from_associational weight)
reify_preprocess : Attempting to preprocess: (Rows.from_associational weight)
reify_base_type : Attempting to reify: (nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.from_associational
reify_preprocess : Attempting to preprocess: Rows.from_associational
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (p : list (Z * Z)) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 Rows.from_columns (Columns.from_associational weight n p))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.from_columns (Columns.from_associational weight n p))
reify_preprocess : Attempting to preprocess:
(Rows.from_columns (Columns.from_associational weight n p))
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: (Columns.from_associational weight n p)
reify_preprocess : Attempting to preprocess:
(Columns.from_associational weight n p)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: (Columns.from_associational weight n)
reify_preprocess : Attempting to preprocess:
(Columns.from_associational weight n)
reify_base_type : Attempting to reify: (list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (Columns.from_associational weight)
reify_preprocess : Attempting to preprocess: (Columns.from_associational weight)
reify_base_type : Attempting to reify: (nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Columns.from_associational
reify_preprocess : Attempting to preprocess: Columns.from_associational
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (Z * Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (p : list (Z * Z)) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun p : list (Z * Z) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(fun p : list (Z * Z) =>
 List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p0 : nat * Z => Columns.cons_to_nth (fst p0) (snd p0) ls))
   (Columns.nils n) p)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n) p)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n) p)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
   (Columns.nils n))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Columns.nils n)
reify_preprocess : Attempting to preprocess: (Columns.nils n)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: Columns.nils
reify_preprocess : Attempting to preprocess: Columns.nils
reify_base_type : Attempting to reify: (nat -> list (list Z))
reify_base_type : Attempting to reify: (nat -> list (list Z))
reify_in_context : Attempting to reify: (fun n : nat => List.repeat nil n)
reify_preprocess : Attempting to preprocess: (fun n : nat => List.repeat nil n)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.repeat nil n)
reify_preprocess : Attempting to preprocess: (List.repeat nil n)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.repeat nil)
reify_preprocess : Attempting to preprocess: (List.repeat nil)
reify_base_type : Attempting to reify: (nat -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=list Z))
reify_base_type : Attempting to reify: (list Z -> nat -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (t : Z * Z) (ls : list (list Z)) =>
    Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
      (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)))
reify_base_type : Attempting to reify:
(list (list Z) -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (t : Z * Z) (ls : list (list Z)) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_preprocess : Attempting to preprocess:
(fun (t : Z * Z) (ls : list (list Z)) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls : list (list Z) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_preprocess : Attempting to preprocess:
(fun ls : list (list Z) =>
 Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In (Positional.place weight t (Init.Nat.pred n))
   (fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls))
reify_in_context : Attempting to reify:
(Positional.place weight t (Init.Nat.pred n))
reify_preprocess : Attempting to preprocess:
(Positional.place weight t (Init.Nat.pred n))
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: (Init.Nat.pred n)
reify_preprocess : Attempting to preprocess: (Init.Nat.pred n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: Init.Nat.pred
reify_preprocess : Attempting to preprocess: Init.Nat.pred
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Positional.place weight t)
reify_preprocess : Attempting to preprocess: (Positional.place weight t)
reify_base_type : Attempting to reify: (nat -> nat * Z)
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: (Positional.place weight)
reify_preprocess : Attempting to preprocess: (Positional.place weight)
reify_base_type : Attempting to reify: (Z * Z -> nat -> nat * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Positional.place
reify_preprocess : Attempting to preprocess: Positional.place
reify_base_type : Attempting to reify: ((nat -> Z) -> Z * Z -> nat -> nat * Z)
reify_base_type : Attempting to reify: ((nat -> Z) -> Z * Z -> nat -> nat * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(fun (t : Z * Z) (i : nat) =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun i : nat =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(fun i : nat =>
 nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i0 := S i' in
    if fst t mod weight i0 =? 0
    then (i0, let c := fst t / weight i0 in c * snd t)
    else place_i' tt) i tt)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i tt)
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i tt)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: tt
reify_preprocess : Attempting to preprocess: tt
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i)
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt) i)
reify_base_type : Attempting to reify: (unit -> nat * Z)
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt))
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t))
   (fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit)
    =>
    let i := S i' in
    if fst t mod weight i =? 0
    then (i, let c := fst t / weight i in c * snd t)
    else place_i' tt))
reify_base_type : Attempting to reify: (nat -> unit -> nat * Z)
reify_in_context : Attempting to reify:
(fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun (i' : nat) (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun (place_i' : (fun _ : nat => unit -> nat * Z) i') (_ : unit) =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: ((fun _ : nat => unit -> nat * Z) i')
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(let i := S i' in
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
((fun i : nat =>
  if fst t mod weight i =? 0
  then (i, let c := fst t / weight i in c * snd t)
  else place_i' tt) (S i'))
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: (S i')
reify_preprocess : Attempting to preprocess: (S i')
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: i'
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify:
(fun i : nat =>
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(fun i : nat =>
 if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(if fst t mod weight i =? 0
 then (i, let c := fst t / weight i in c * snd t)
 else place_i' tt)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t))
   (fun _ : unit => place_i' tt) (fst t mod weight i =? 0))
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t mod weight i =? 0)
reify_preprocess : Attempting to preprocess: (fst t mod weight i =? 0)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.eqb (fst t mod weight i))
reify_preprocess : Attempting to preprocess: (Z.eqb (fst t mod weight i))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst t mod weight i)
reify_preprocess : Attempting to preprocess: (fst t mod weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight i)
reify_preprocess : Attempting to preprocess: (weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (Z.modulo (fst t))
reify_preprocess : Attempting to preprocess: (Z.modulo (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.modulo
reify_preprocess : Attempting to preprocess: Z.modulo
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.eqb
reify_preprocess : Attempting to preprocess: Z.eqb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t))
   (fun _ : unit => place_i' tt))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t))
   (fun _ : unit => place_i' tt))
reify_base_type : Attempting to reify: (bool -> nat * Z)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => place_i' tt)
reify_preprocess : Attempting to preprocess: (fun _ : unit => place_i' tt)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (place_i' tt)
reify_preprocess : Attempting to preprocess: (place_i' tt)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_in_context : Attempting to reify: tt
reify_preprocess : Attempting to preprocess: tt
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: place_i'
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (nat * Z)
   (fun _ : unit => (i, let c := fst t / weight i in c * snd t)))
reify_base_type : Attempting to reify: ((unit -> nat * Z) -> bool -> nat * Z)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit => (i, let c := fst t / weight i in c * snd t))
reify_preprocess : Attempting to preprocess:
(fun _ : unit => (i, let c := fst t / weight i in c * snd t))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(i, let c := fst t / weight i in c * snd t)
reify_preprocess : Attempting to preprocess:
(i, let c := fst t / weight i in c * snd t)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (let c := fst t / weight i in c * snd t)
reify_preprocess : Attempting to preprocess:
(let c := fst t / weight i in c * snd t)
reify_preprocess : Attempting to preprocess:
((fun c : Z => c * snd t) (fst t / weight i))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t / weight i)
reify_preprocess : Attempting to preprocess: (fst t / weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight i)
reify_preprocess : Attempting to preprocess: (weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (Z.div (fst t))
reify_preprocess : Attempting to preprocess: (Z.div (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (fun c : Z => c * snd t)
reify_preprocess : Attempting to preprocess: (fun c : Z => c * snd t)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (c * snd t)
reify_preprocess : Attempting to preprocess: (c * snd t)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul c)
reify_preprocess : Attempting to preprocess: (Z.mul c)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair i)
reify_preprocess : Attempting to preprocess: (pair i)
reify_base_type : Attempting to reify: (Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (nat -> Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (nat * Z))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (nat * Z))
reify_base_type : Attempting to reify:
((unit -> nat * Z) -> (unit -> nat * Z) -> bool -> nat * Z)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t)))
reify_preprocess : Attempting to preprocess:
(nat_rect (fun _ : nat => unit -> nat * Z)
   (fun _ : unit => (0%nat, fst t * snd t)))
reify_base_type : Attempting to reify:
((nat -> (unit -> nat * Z) -> unit -> nat * Z) -> nat -> unit -> nat * Z)
reify_base_type : Attempting to reify: unit
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => (0%nat, fst t * snd t))
reify_preprocess : Attempting to preprocess:
(fun _ : unit => (0%nat, fst t * snd t))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (0%nat, fst t * snd t)
reify_preprocess : Attempting to preprocess: (0%nat, fst t * snd t)
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst t * snd t)
reify_preprocess : Attempting to preprocess: (fst t * snd t)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd t)
reify_preprocess : Attempting to preprocess: (snd t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (fst t))
reify_preprocess : Attempting to preprocess: (Z.mul (fst t))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (fst t)
reify_preprocess : Attempting to preprocess: (fst t)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: t
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair 0%nat)
reify_preprocess : Attempting to preprocess: (pair 0%nat)
reify_base_type : Attempting to reify: (Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (nat -> Z -> nat * Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: NatUtil.nat_rect_arrow_nodep
reify_preprocess : Attempting to preprocess: NatUtil.nat_rect_arrow_nodep
reify_base_type : Attempting to reify:
((unit -> nat * Z) ->
 (nat -> (unit -> nat * Z) -> unit -> nat * Z) -> nat -> unit -> nat * Z)
reify_base_type : Attempting to reify: unit
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)
reify_preprocess : Attempting to preprocess:
(fun p : nat * Z => Columns.cons_to_nth (fst p) (snd p) ls)
reify_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: (nat * Z)%type
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Columns.cons_to_nth (fst p) (snd p) ls)
reify_preprocess : Attempting to preprocess:
(Columns.cons_to_nth (fst p) (snd p) ls)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: ls
reify_in_context : Attempting to reify: (Columns.cons_to_nth (fst p) (snd p))
reify_preprocess : Attempting to preprocess:
(Columns.cons_to_nth (fst p) (snd p))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: (snd p)
reify_preprocess : Attempting to preprocess: (snd p)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (nat * Z -> Z)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Columns.cons_to_nth (fst p))
reify_preprocess : Attempting to preprocess: (Columns.cons_to_nth (fst p))
reify_base_type : Attempting to reify: (Z -> list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: (fst p)
reify_preprocess : Attempting to preprocess: (fst p)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: p
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (nat * Z -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Columns.cons_to_nth
reify_preprocess : Attempting to preprocess: Columns.cons_to_nth
reify_base_type : Attempting to reify:
(nat -> Z -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify:
(nat -> Z -> list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (i : nat) (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(fun (i : nat) (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(fun (x : Z) (xs : list (list Z)) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun xs : list (list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(fun xs : list (list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list) xs)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: xs
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list))
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : list Z => (x :: y)%list))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun y : list Z => (x :: y)%list)
reify_preprocess : Attempting to preprocess: (fun y : list Z => (x :: y)%list)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (x :: y)%list
reify_preprocess : Attempting to preprocess: (x :: y)%list
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: y
reify_in_context : Attempting to reify: (cons x)
reify_preprocess : Attempting to preprocess: (cons x)
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Crypto.Util.ListUtil.update_nth i)
reify_preprocess : Attempting to preprocess: (Crypto.Util.ListUtil.update_nth i)
reify_base_type : Attempting to reify:
((list Z -> list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Crypto.Util.ListUtil.update_nth
reify_preprocess : Attempting to preprocess: Crypto.Util.ListUtil.update_nth
reify_base_type : Attempting to reify:
(nat -> (list Z -> list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (A:=list (list Z)) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list (list Z)) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list (list Z) -> list (list Z)) ->
 list (list Z) -> list (Z * Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Rows.from_columns
reify_preprocess : Attempting to preprocess: Rows.from_columns
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_preprocess : Attempting to preprocess:
(snd (Rows.from_columns' (Rows.max_column_size inp) (inp, nil)))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.from_columns' (Rows.max_column_size inp) (inp, nil))
reify_preprocess : Attempting to preprocess:
(Rows.from_columns' (Rows.max_column_size inp) (inp, nil))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_in_context : Attempting to reify: (inp, nil)
reify_preprocess : Attempting to preprocess: (inp, nil)
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair inp)
reify_preprocess : Attempting to preprocess: (pair inp)
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.from_columns' (Rows.max_column_size inp))
reify_preprocess : Attempting to preprocess:
(Rows.from_columns' (Rows.max_column_size inp))
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z) * list (list Z))
reify_in_context : Attempting to reify: (Rows.max_column_size inp)
reify_preprocess : Attempting to preprocess: (Rows.max_column_size inp)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: Rows.max_column_size
reify_preprocess : Attempting to preprocess: Rows.max_column_size
reify_base_type : Attempting to reify: (list (list Z) -> nat)
reify_base_type : Attempting to reify: (list (list Z) -> nat)
reify_in_context : Attempting to reify:
(fun x : list (list Z) =>
 List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_preprocess : Attempting to preprocess:
(fun x : list (list Z) =>
 List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_preprocess : Attempting to preprocess:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat
   (List.map (fun c : list Z => length c) x))
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => length c) x)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => length c) x)
reify_base_type : Attempting to reify: (list nat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: (List.map (fun c : list Z => length c))
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => length c))
reify_base_type : Attempting to reify: (list (list Z) -> list nat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (fun c : list Z => length c)
reify_preprocess : Attempting to preprocess: (fun c : list Z => length c)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (length c)
reify_preprocess : Attempting to preprocess: (length c)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (length (A:=Z))
reify_preprocess : Attempting to preprocess: (length (A:=Z))
reify_base_type : Attempting to reify: (list Z -> nat)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=list Z) (B:=nat))
reify_preprocess : Attempting to preprocess: (List.map (A:=list Z) (B:=nat))
reify_base_type : Attempting to reify:
((list Z -> nat) -> list (list Z) -> list nat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat)
reify_preprocess : Attempting to preprocess:
(List.fold_right (fun a b : nat => Nat.max a b) 0%nat)
reify_base_type : Attempting to reify: (list nat -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.fold_right (fun a b : nat => Nat.max a b))
reify_preprocess : Attempting to preprocess:
(List.fold_right (fun a b : nat => Nat.max a b))
reify_base_type : Attempting to reify: (nat -> list nat -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (fun a b : nat => Nat.max a b)
reify_preprocess : Attempting to preprocess: (fun a b : nat => Nat.max a b)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (fun b : nat => Nat.max a b)
reify_preprocess : Attempting to preprocess: (fun b : nat => Nat.max a b)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (Nat.max a b)
reify_preprocess : Attempting to preprocess: (Nat.max a b)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: b
reify_in_context : Attempting to reify: (Nat.max a)
reify_preprocess : Attempting to preprocess: (Nat.max a)
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: a
reify_in_context : Attempting to reify: Nat.max
reify_preprocess : Attempting to preprocess: Nat.max
reify_base_type : Attempting to reify: (nat -> nat -> nat)
reify_in_context : Attempting to reify: (List.fold_right (A:=nat) (B:=nat))
reify_preprocess : Attempting to preprocess: (List.fold_right (A:=nat) (B:=nat))
reify_base_type : Attempting to reify:
((nat -> nat -> nat) -> nat -> list nat -> nat)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: Rows.from_columns'
reify_preprocess : Attempting to preprocess: Rows.from_columns'
reify_base_type : Attempting to reify:
(nat -> list (list Z) * list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify:
(nat -> list (list Z) * list (list Z) -> list (list Z) * list (list Z))
reify_in_context : Attempting to reify:
(fun (n : nat) (start_state : list (list Z) * list (list Z)) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (start_state : list (list Z) * list (list Z)) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun start_state : list (list Z) * list (list Z) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_preprocess : Attempting to preprocess:
(fun start_state : list (list Z) * list (list Z) =>
 List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state
   (List.repeat 0 n))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat 0 n)
reify_preprocess : Attempting to preprocess: (List.repeat 0 n)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.repeat 0)
reify_preprocess : Attempting to preprocess: (List.repeat 0)
reify_base_type : Attempting to reify: (nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat (A:=Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=Z))
reify_base_type : Attempting to reify: (Z -> nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)) start_state)
reify_base_type : Attempting to reify: (list Z -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: start_state
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (_ : Z) (state : list (list Z) * list (list Z)) =>
    let cols'_row := Rows.extract_row (fst state) in
    (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)))
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list Z -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : Z) (state : list (list Z) * list (list Z)) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun (_ : Z) (state : list (list Z) * list (list Z)) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun state : list (list Z) * list (list Z) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun state : list (list Z) * list (list Z) =>
 let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(let cols'_row := Rows.extract_row (fst state) in
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
((fun cols'_row : list (list Z) * list Z =>
  (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
   (Rows.extract_row (fst state)))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_in_context : Attempting to reify: (Rows.extract_row (fst state))
reify_preprocess : Attempting to preprocess: (Rows.extract_row (fst state))
reify_base_type : Attempting to reify: (list (list Z) * list Z)%type
reify_in_context : Attempting to reify: (fst state)
reify_preprocess : Attempting to preprocess: (fst state)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Rows.extract_row
reify_preprocess : Attempting to preprocess: Rows.extract_row
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z) * list Z)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z) * list Z)
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 (List.map (fun c : list Z => List.tl c) inp,
 List.map (fun c : list Z => List.hd 0 c) inp))
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 (List.map (fun c : list Z => List.tl c) inp,
 List.map (fun c : list Z => List.hd 0 c) inp))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.tl c) inp,
List.map (fun c : list Z => List.hd 0 c) inp)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.tl c) inp,
List.map (fun c : list Z => List.hd 0 c) inp)
reify_base_type : Attempting to reify: (list (list Z) * list Z)%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.hd 0 c) inp)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.hd 0 c) inp)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.hd 0 c))
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.hd 0 c))
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun c : list Z => List.hd 0 c)
reify_preprocess : Attempting to preprocess: (fun c : list Z => List.hd 0 c)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd 0 c)
reify_preprocess : Attempting to preprocess: (List.hd 0 c)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (List.hd 0)
reify_preprocess : Attempting to preprocess: (List.hd 0)
reify_base_type : Attempting to reify: (list Z -> Z)
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd (A:=Z))
reify_preprocess : Attempting to preprocess: (List.hd (A:=Z))
reify_base_type : Attempting to reify: (Z -> list Z -> Z)
reify_in_context : Attempting to reify: List.hd
reify_preprocess : Attempting to preprocess: List.hd
reify_base_type : Attempting to reify: (forall A : Type, A -> list A -> A)
reify_base_type : Attempting to reify: (Z -> list Z -> Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_in_context : Attempting to reify:
(fun (default : Z) (l : list Z) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (default : Z) (l : list Z) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l : list Z => match l with
                   | nil => default
                   | (x :: _)%list => x
                   end)
reify_preprocess : Attempting to preprocess:
(fun l : list Z => match l with
                   | nil => default
                   | (x :: _)%list => x
                   end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case Z (fun _ : unit => default)
   (fun (x : Z) (_ : list Z) => x) l)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case Z (fun _ : unit => default)
   (fun (x : Z) (_ : list Z) => x))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case Z (fun _ : unit => default)
   (fun (x : Z) (_ : list Z) => x))
reify_base_type : Attempting to reify: (list Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun (x : Z) (_ : list Z) => x)
reify_preprocess : Attempting to preprocess: (fun (x : Z) (_ : list Z) => x)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : list Z => x)
reify_preprocess : Attempting to preprocess: (fun _ : list Z => x)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case Z (fun _ : unit => default))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case Z (fun _ : unit => default))
reify_base_type : Attempting to reify: ((Z -> list Z -> Z) -> list Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => default)
reify_preprocess : Attempting to preprocess: (fun _ : unit => default)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case Z)
reify_preprocess : Attempting to preprocess: (ListUtil.Thunked.list_case Z)
reify_base_type : Attempting to reify:
((unit -> Z) -> (Z -> list Z -> Z) -> list Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=list Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=list Z) (B:=Z))
reify_base_type : Attempting to reify:
((list Z -> Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(pair (List.map (fun c : list Z => List.tl c) inp))
reify_preprocess : Attempting to preprocess:
(pair (List.map (fun c : list Z => List.tl c) inp))
reify_base_type : Attempting to reify: (list Z -> list (list Z) * list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun c : list Z => List.tl c) inp)
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.tl c) inp)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.map (fun c : list Z => List.tl c))
reify_preprocess : Attempting to preprocess:
(List.map (fun c : list Z => List.tl c))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun c : list Z => List.tl c)
reify_preprocess : Attempting to preprocess: (fun c : list Z => List.tl c)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.tl c)
reify_preprocess : Attempting to preprocess: (List.tl c)
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: c
reify_in_context : Attempting to reify: (List.tl (A:=Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list Z => match l with
                   | nil => nil
                   | (_ :: m)%list => m
                   end)
reify_preprocess : Attempting to preprocess:
(fun l : list Z => match l with
                   | nil => nil
                   | (_ :: m)%list => m
                   end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil)
   (fun (_ : Z) (m : list Z) => m) l)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil)
   (fun (_ : Z) (m : list Z) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil)
   (fun (_ : Z) (m : list Z) => m))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun (_ : Z) (m : list Z) => m)
reify_preprocess : Attempting to preprocess: (fun (_ : Z) (m : list Z) => m)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list Z => m)
reify_preprocess : Attempting to preprocess: (fun m : list Z => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((Z -> list Z -> list Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case (list Z))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) -> (Z -> list Z -> list Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.map (A:=list Z) (B:=list Z))
reify_preprocess : Attempting to preprocess: (List.map (A:=list Z) (B:=list Z))
reify_base_type : Attempting to reify:
((list Z -> list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (list Z) -> list Z -> list (list Z) * list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun cols'_row : list (list Z) * list Z =>
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_preprocess : Attempting to preprocess:
(fun cols'_row : list (list Z) * list Z =>
 (fst cols'_row, (snd state ++ snd cols'_row :: nil)%list))
reify_type : Attempting to reify: (list (list Z) * list Z)%type
reify_base_type : Attempting to reify: (list (list Z) * list Z)%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)
reify_preprocess : Attempting to preprocess:
(fst cols'_row, (snd state ++ snd cols'_row :: nil)%list)
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd state ++ snd cols'_row :: nil)%list
reify_preprocess : Attempting to preprocess:
(snd state ++ snd cols'_row :: nil)%list
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd cols'_row :: nil)%list
reify_preprocess : Attempting to preprocess: (snd cols'_row :: nil)%list
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (snd cols'_row))
reify_preprocess : Attempting to preprocess: (cons (snd cols'_row))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd cols'_row)
reify_preprocess : Attempting to preprocess: (snd cols'_row)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cols'_row
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list (list Z) * list Z -> list Z)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify:
(list Z -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app (snd state))
reify_preprocess : Attempting to preprocess: (app (snd state))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd state)
reify_preprocess : Attempting to preprocess: (snd state)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app (A:=list Z))
reify_preprocess : Attempting to preprocess: (app (A:=list Z))
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (fst cols'_row))
reify_preprocess : Attempting to preprocess: (pair (fst cols'_row))
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst cols'_row)
reify_preprocess : Attempting to preprocess: (fst cols'_row)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cols'_row
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list (list Z) * list Z -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify:
(list (list Z) -> list (list Z) -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (A:=list (list Z) * list (list Z)) (B:=Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list (list Z) * list (list Z)) (B:=Z))
reify_base_type : Attempting to reify:
((Z -> list (list Z) * list (list Z) -> list (list Z) * list (list Z)) ->
 list (list Z) * list (list Z) -> list Z -> list (list Z) * list (list Z))
reify_base_type : Attempting to reify: (list (list Z) * list (list Z))%type
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify:
(list (list Z) * list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun r_rows : list (list Z) =>
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun r_rows : list (list Z) =>
 let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(let r_flat0 := Rows.flatten weight (S n) r_rows in
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
((fun r_flat0 : list Z * Z =>
  let bound := (0, 2 ^ machine_wordsize - 1) in
  if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
  then fst r_flat0
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
   (Rows.flatten weight (S n) r_rows))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (Rows.flatten weight (S n) r_rows)
reify_preprocess : Attempting to preprocess: (Rows.flatten weight (S n) r_rows)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: r_rows
reify_in_context : Attempting to reify: (Rows.flatten weight (S n))
reify_preprocess : Attempting to preprocess: (Rows.flatten weight (S n))
reify_base_type : Attempting to reify: (list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (Rows.flatten weight)
reify_preprocess : Attempting to preprocess: (Rows.flatten weight)
reify_base_type : Attempting to reify: (nat -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.flatten
reify_preprocess : Attempting to preprocess: Rows.flatten
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify:
((nat -> Z) -> nat -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun (n : nat) (inp : list (list Z)) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(let default := Positional.zeros n in
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
((fun default : list Z =>
  Rows.flatten' weight (List.hd default inp, 0)
    (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
   (Positional.zeros n))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (Positional.zeros n)
reify_preprocess : Attempting to preprocess: (Positional.zeros n)
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: Positional.zeros
reify_preprocess : Attempting to preprocess: Positional.zeros
reify_base_type : Attempting to reify: (nat -> list Z)
reify_base_type : Attempting to reify: (nat -> list Z)
reify_in_context : Attempting to reify: (fun n : nat => List.repeat 0 n)
reify_preprocess : Attempting to preprocess: (fun n : nat => List.repeat 0 n)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (List.repeat 0 n)
reify_preprocess : Attempting to preprocess: (List.repeat 0 n)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: (List.repeat 0)
reify_preprocess : Attempting to preprocess: (List.repeat 0)
reify_base_type : Attempting to reify: (nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.repeat (A:=Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=Z))
reify_base_type : Attempting to reify: (Z -> nat -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun default : list Z =>
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(fun default : list Z =>
 Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(Rows.flatten' weight (List.hd default inp, 0)
   (List.hd default (List.tl inp) :: List.tl (List.tl inp)))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify:
(List.hd default (List.tl inp) :: List.tl (List.tl inp))%list
reify_preprocess : Attempting to preprocess:
(List.hd default (List.tl inp) :: List.tl (List.tl inp))%list
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.tl (List.tl inp))
reify_preprocess : Attempting to preprocess: (List.tl (List.tl inp))
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: (List.tl inp)
reify_preprocess : Attempting to preprocess: (List.tl inp)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.tl (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m) l)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_preprocess : Attempting to preprocess:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list (list Z) => m)
reify_preprocess : Attempting to preprocess: (fun m : list (list Z) => m)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)))
reify_base_type : Attempting to reify:
((unit -> list (list Z)) ->
 (list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.tl (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m) l)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_preprocess : Attempting to preprocess:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list (list Z) => m)
reify_preprocess : Attempting to preprocess: (fun m : list (list Z) => m)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)))
reify_base_type : Attempting to reify:
((unit -> list (list Z)) ->
 (list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (List.hd default (List.tl inp)))
reify_preprocess : Attempting to preprocess:
(cons (List.hd default (List.tl inp)))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd default (List.tl inp))
reify_preprocess : Attempting to preprocess: (List.hd default (List.tl inp))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (List.tl inp)
reify_preprocess : Attempting to preprocess: (List.tl inp)
reify_base_type : Attempting to reify: (list (list Z))
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.tl (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.tl (A:=list Z))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify: List.tl
reify_preprocess : Attempting to preprocess: List.tl
reify_base_type : Attempting to reify: (forall A : Type, list A -> list A)
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_in_context : Attempting to reify:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (l : list A) =>
 match l with
 | nil => nil
 | (_ :: m)%list => m
 end)
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => nil
                          | (_ :: m)%list => m
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => nil
| (_ :: m)%list => m
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m) l)
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil)
   (fun (_ : list Z) (m : list (list Z)) => m))
reify_base_type : Attempting to reify: (list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_preprocess : Attempting to preprocess:
(fun (_ : list Z) (m : list (list Z)) => m)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun m : list (list Z) => m)
reify_preprocess : Attempting to preprocess: (fun m : list (list Z) => m)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: m
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)) (fun _ : unit => nil))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => nil)
reify_preprocess : Attempting to preprocess: (fun _ : unit => nil)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list (list Z)))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list (list Z)))
reify_base_type : Attempting to reify:
((unit -> list (list Z)) ->
 (list Z -> list (list Z) -> list (list Z)) -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd default)
reify_preprocess : Attempting to preprocess: (List.hd default)
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (List.hd (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.hd (A:=list Z))
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify: List.hd
reify_preprocess : Attempting to preprocess: List.hd
reify_base_type : Attempting to reify: (forall A : Type, A -> list A -> A)
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_in_context : Attempting to reify:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x) l)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_preprocess : Attempting to preprocess:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : list (list Z) => x)
reify_preprocess : Attempting to preprocess: (fun _ : list (list Z) => x)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => default)
reify_preprocess : Attempting to preprocess: (fun _ : unit => default)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case (list Z))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) ->
 (list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify:
(list Z -> list (list Z) -> list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rows.flatten' weight (List.hd default inp, 0))
reify_preprocess : Attempting to preprocess:
(Rows.flatten' weight (List.hd default inp, 0))
reify_base_type : Attempting to reify: (list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: (List.hd default inp, 0)
reify_preprocess : Attempting to preprocess: (List.hd default inp, 0)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair (List.hd default inp))
reify_preprocess : Attempting to preprocess: (pair (List.hd default inp))
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.hd default inp)
reify_preprocess : Attempting to preprocess: (List.hd default inp)
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify: (List.hd default)
reify_preprocess : Attempting to preprocess: (List.hd default)
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (List.hd (A:=list Z))
reify_preprocess : Attempting to preprocess: (List.hd (A:=list Z))
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify: List.hd
reify_preprocess : Attempting to preprocess: List.hd
reify_base_type : Attempting to reify: (forall A : Type, A -> list A -> A)
reify_base_type : Attempting to reify: (list Z -> list (list Z) -> list Z)
reify_in_context : Attempting to reify:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (A : Type) (default : A) (l : list A) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_in_context : Attempting to reify:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_preprocess : Attempting to preprocess:
(fun (default : list Z) (l : list (list Z)) =>
 match l with
 | nil => default
 | (x :: _)%list => x
 end)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_preprocess : Attempting to preprocess:
(fun l : list (list Z) => match l with
                          | nil => default
                          | (x :: _)%list => x
                          end)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
match l with
| nil => default
| (x :: _)%list => x
end
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x) l)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default)
   (fun (x : list Z) (_ : list (list Z)) => x))
reify_base_type : Attempting to reify: (list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_preprocess : Attempting to preprocess:
(fun (x : list Z) (_ : list (list Z)) => x)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : list (list Z) => x)
reify_preprocess : Attempting to preprocess: (fun _ : list (list Z) => x)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z) (fun _ : unit => default))
reify_base_type : Attempting to reify:
((list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => default)
reify_preprocess : Attempting to preprocess: (fun _ : unit => default)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: default
reify_in_context : Attempting to reify: (ListUtil.Thunked.list_case (list Z))
reify_preprocess : Attempting to preprocess:
(ListUtil.Thunked.list_case (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) ->
 (list Z -> list (list Z) -> list Z) -> list (list Z) -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Rows.flatten' weight)
reify_preprocess : Attempting to preprocess: (Rows.flatten' weight)
reify_base_type : Attempting to reify:
(list Z * Z -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.flatten'
reify_preprocess : Attempting to preprocess: Rows.flatten'
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z -> list (list Z) -> list Z * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(fun (start_state : list Z * Z) (inp : list (list Z)) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun inp : list (list Z) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(fun inp : list (list Z) =>
 List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list (list Z))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state inp)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: inp
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)) start_state)
reify_base_type : Attempting to reify: (list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: start_state
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next_row : list Z) (state : list Z * Z) =>
    let out_carry := Rows.sum_rows weight (fst state) next_row in
    (fst out_carry, snd state + snd out_carry)))
reify_base_type : Attempting to reify:
(list Z * Z -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (next_row : list Z) (state : list Z * Z) =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(fun (next_row : list Z) (state : list Z * Z) =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun state : list Z * Z =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(fun state : list Z * Z =>
 let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(let out_carry := Rows.sum_rows weight (fst state) next_row in
 (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
((fun out_carry : list Z * Z => (fst out_carry, snd state + snd out_carry))
   (Rows.sum_rows weight (fst state) next_row))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify:
(Rows.sum_rows weight (fst state) next_row)
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows weight (fst state) next_row)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: next_row
reify_in_context : Attempting to reify: (Rows.sum_rows weight (fst state))
reify_preprocess : Attempting to preprocess: (Rows.sum_rows weight (fst state))
reify_base_type : Attempting to reify: (list Z -> list Z * Z)
reify_in_context : Attempting to reify: (fst state)
reify_preprocess : Attempting to preprocess: (fst state)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Rows.sum_rows weight)
reify_preprocess : Attempting to preprocess: (Rows.sum_rows weight)
reify_base_type : Attempting to reify: (list Z -> list Z -> list Z * Z)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.sum_rows
reify_preprocess : Attempting to preprocess: Rows.sum_rows
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z -> list Z -> list Z * Z)
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z -> list Z -> list Z * Z)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (row1 row2 : list Z) =>
 fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (row1 row2 : list Z) =>
 fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun row1 row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fun row1 row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fun row2 : list Z => fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_preprocess : Attempting to preprocess:
(fst (Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2)
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1 row2)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_in_context : Attempting to reify: row2
reify_in_context : Attempting to reify:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1)
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows' weight (nil, 0, 0%nat) row1)
reify_base_type : Attempting to reify: (list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify: row1
reify_in_context : Attempting to reify: (Rows.sum_rows' weight (nil, 0, 0%nat))
reify_preprocess : Attempting to preprocess:
(Rows.sum_rows' weight (nil, 0, 0%nat))
reify_base_type : Attempting to reify: (list Z -> list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify: (nil, 0, 0%nat)
reify_preprocess : Attempting to preprocess: (nil, 0, 0%nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (pair (nil, 0))
reify_preprocess : Attempting to preprocess: (pair (nil, 0))
reify_base_type : Attempting to reify: (nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (nil, 0)
reify_preprocess : Attempting to preprocess: (nil, 0)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (pair nil)
reify_preprocess : Attempting to preprocess: (pair nil)
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z * Z -> nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (Rows.sum_rows' weight)
reify_preprocess : Attempting to preprocess: (Rows.sum_rows' weight)
reify_base_type : Attempting to reify:
(list Z * Z * nat -> list Z -> list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Rows.sum_rows'
reify_preprocess : Attempting to preprocess: Rows.sum_rows'
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z * nat -> list Z -> list Z -> list Z * Z * nat)
reify_base_type : Attempting to reify:
((nat -> Z) -> list Z * Z * nat -> list Z -> list Z -> list Z * Z * nat)
reify_in_context : Attempting to reify:
(fun (weight : nat -> Z) (start_state : list Z * Z * nat) (row1 row2 : list Z)
 =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun (weight : nat -> Z) (start_state : list Z * Z * nat) (row1 row2 : list Z)
 =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (nat -> Z)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (start_state : list Z * Z * nat) (row1 row2 : list Z) =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun (start_state : list Z * Z * nat) (row1 row2 : list Z) =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun row1 row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun row1 row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(fun row2 : list Z =>
 List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state (List.rev (List.combine row1 row2)))
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.rev (List.combine row1 row2))
reify_preprocess : Attempting to preprocess: (List.rev (List.combine row1 row2))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.combine row1 row2)
reify_preprocess : Attempting to preprocess: (List.combine row1 row2)
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: row2
reify_in_context : Attempting to reify: (List.combine (B:=Z) row1)
reify_preprocess : Attempting to preprocess: (List.combine (B:=Z) row1)
reify_base_type : Attempting to reify: (list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: row1
reify_in_context : Attempting to reify: (List.combine (A:=Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.combine (A:=Z) (B:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z -> list (Z * Z))
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (List.rev (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.rev (A:=Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z) -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state)
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)) start_state)
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: start_state
reify_in_context : Attempting to reify:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)))
reify_preprocess : Attempting to preprocess:
(List.fold_right
   (fun (next : Z * Z) (state : list Z * Z * nat) =>
    let i := snd state in
    let low_high' :=
      let low_high := fst state in
      let low := fst low_high in
      let high := snd low_high in
      Rewriter.Util.LetIn.Let_In
        (Definitions.Z.add_with_get_carry_full
           ((fun i0 : nat => weight (S i0) / weight i0) i) high
           (fst next) (snd next))
        (fun sum_carry : Z * Z =>
         ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
    (low_high', S i)))
reify_base_type : Attempting to reify:
(list Z * Z * nat -> list (Z * Z) -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun (next : Z * Z) (state : list Z * Z * nat) =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun (next : Z * Z) (state : list Z * Z * nat) =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun state : list Z * Z * nat =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun state : list Z * Z * nat =>
 let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(let i := snd state in
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
((fun i : nat =>
  let low_high' :=
    let low_high := fst state in
    let low := fst low_high in
    let high := snd low_high in
    Rewriter.Util.LetIn.Let_In
      (Definitions.Z.add_with_get_carry_full
         ((fun i0 : nat => weight (S i0) / weight i0) i) high
         (fst next) (snd next))
      (fun sum_carry : Z * Z =>
       ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
  (low_high', S i)) (snd state))
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_in_context : Attempting to reify: (snd state)
reify_preprocess : Attempting to preprocess: (snd state)
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z * nat -> nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun i : nat =>
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun i : nat =>
 let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i0 : nat => weight (S i0) / weight i0) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i : nat => weight (S i) / weight i) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(let low_high' :=
   let low_high := fst state in
   let low := fst low_high in
   let high := snd low_high in
   Rewriter.Util.LetIn.Let_In
     (Definitions.Z.add_with_get_carry_full
        ((fun i : nat => weight (S i) / weight i) i) high
        (fst next) (snd next))
     (fun sum_carry : Z * Z =>
      ((low ++ fst sum_carry :: nil)%list, snd sum_carry)) in
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
((fun
    low_high' : (fun _ : Z * Z => (list Z * Z)%type)
                  (Definitions.Z.add_with_get_carry_full
                     ((fun i : nat => weight (S i) / weight i) i)
                     (snd (fst state)) (fst next) (snd next)) =>
  (low_high', S i))
   (let low_high := fst state in
    let low := fst low_high in
    let high := snd low_high in
    Rewriter.Util.LetIn.Let_In
      (Definitions.Z.add_with_get_carry_full
         ((fun i : nat => weight (S i) / weight i) i) high
         (fst next) (snd next))
      (fun sum_carry : Z * Z =>
       ((low ++ fst sum_carry :: nil)%list, snd sum_carry))))
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_in_context : Attempting to reify:
(let low_high := fst state in
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(let low_high := fst state in
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
((fun low_high : list Z * Z =>
  let low := fst low_high in
  let high := snd low_high in
  Rewriter.Util.LetIn.Let_In
    (Definitions.Z.add_with_get_carry_full
       ((fun i : nat => weight (S i) / weight i) i) high
       (fst next) (snd next))
    (fun sum_carry : Z * Z =>
     ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
   (fst state))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (fst state)
reify_preprocess : Attempting to preprocess: (fst state)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z * nat -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun low_high : list Z * Z =>
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(fun low_high : list Z * Z =>
 let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(let low := fst low_high in
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
((fun low : list Z =>
  let high := snd low_high in
  Rewriter.Util.LetIn.Let_In
    (Definitions.Z.add_with_get_carry_full
       ((fun i : nat => weight (S i) / weight i) i) high
       (fst next) (snd next))
    (fun sum_carry : Z * Z =>
     ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
   (fst low_high))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (fst low_high)
reify_preprocess : Attempting to preprocess: (fst low_high)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: low_high
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun low : list Z =>
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(fun low : list Z =>
 let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(let high := snd low_high in
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
((fun high : Z =>
  Rewriter.Util.LetIn.Let_In
    (Definitions.Z.add_with_get_carry_full
       ((fun i : nat => weight (S i) / weight i) i) high
       (fst next) (snd next))
    (fun sum_carry : Z * Z =>
     ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
   (snd low_high))
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_in_context : Attempting to reify: (snd low_high)
reify_preprocess : Attempting to preprocess: (snd low_high)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: low_high
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun high : Z =>
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(fun high : Z =>
 Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_preprocess : Attempting to preprocess:
(Rewriter.Util.LetIn.Let_In
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) high
      (fst next) (snd next))
   (fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry)))
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next) (snd next))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next) (snd next))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_in_context : Attempting to reify: (snd next)
reify_preprocess : Attempting to preprocess: (snd next)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: next
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high
   (fst next))
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_in_context : Attempting to reify: (fst next)
reify_preprocess : Attempting to preprocess: (fst next)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: next
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high)
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i) high)
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_in_context : Attempting to reify: high
reify_in_context : Attempting to reify:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i))
reify_preprocess : Attempting to preprocess:
(Definitions.Z.add_with_get_carry_full
   ((fun i : nat => weight (S i) / weight i) i))
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
((fun i : nat => weight (S i) / weight i) i)
reify_preprocess : Attempting to preprocess:
((fun i : nat => weight (S i) / weight i) i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: (fun i : nat => weight (S i) / weight i)
reify_preprocess : Attempting to preprocess:
(fun i : nat => weight (S i) / weight i)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (weight (S i) / weight i)
reify_preprocess : Attempting to preprocess: (weight (S i) / weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (weight i)
reify_preprocess : Attempting to preprocess: (weight i)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: (Z.div (weight (S i)))
reify_preprocess : Attempting to preprocess: (Z.div (weight (S i)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (weight (S i))
reify_preprocess : Attempting to preprocess: (weight (S i))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (S i)
reify_preprocess : Attempting to preprocess: (S i)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Z.div
reify_preprocess : Attempting to preprocess: Z.div
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Definitions.Z.add_with_get_carry_full
reify_preprocess : Attempting to preprocess:
Definitions.Z.add_with_get_carry_full
reify_base_type : Attempting to reify: (Z -> Z -> Z -> Z -> Z * Z)
reify_in_context : Attempting to reify:
(fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry))
reify_preprocess : Attempting to preprocess:
(fun sum_carry : Z * Z => ((low ++ fst sum_carry :: nil)%list, snd sum_carry))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
((low ++ fst sum_carry :: nil)%list, snd sum_carry)
reify_preprocess : Attempting to preprocess:
((low ++ fst sum_carry :: nil)%list, snd sum_carry)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd sum_carry)
reify_preprocess : Attempting to preprocess: (snd sum_carry)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: sum_carry
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(pair (low ++ fst sum_carry :: nil)%list)
reify_preprocess : Attempting to preprocess:
(pair (low ++ fst sum_carry :: nil)%list)
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (low ++ fst sum_carry :: nil)%list
reify_preprocess : Attempting to preprocess: (low ++ fst sum_carry :: nil)%list
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst sum_carry :: nil)%list
reify_preprocess : Attempting to preprocess: (fst sum_carry :: nil)%list
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: nil
reify_preprocess : Attempting to preprocess: nil
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (cons (fst sum_carry))
reify_preprocess : Attempting to preprocess: (cons (fst sum_carry))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst sum_carry)
reify_preprocess : Attempting to preprocess: (fst sum_carry)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: sum_carry
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: cons
reify_preprocess : Attempting to preprocess: cons
reify_base_type : Attempting to reify: (Z -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (app low)
reify_preprocess : Attempting to preprocess: (app low)
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: low
reify_in_context : Attempting to reify: (app (A:=Z))
reify_preprocess : Attempting to preprocess: (app (A:=Z))
reify_base_type : Attempting to reify: (list Z -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun
   low_high' : (fun _ : Z * Z => (list Z * Z)%type)
                 (Definitions.Z.add_with_get_carry_full
                    ((fun i : nat => weight (S i) / weight i) i)
                    (snd (fst state)) (fst next) (snd next)) =>
 (low_high', S i))
reify_preprocess : Attempting to preprocess:
(fun
   low_high' : (fun _ : Z * Z => (list Z * Z)%type)
                 (Definitions.Z.add_with_get_carry_full
                    ((fun i : nat => weight (S i) / weight i) i)
                    (snd (fst state)) (fst next) (snd next)) =>
 (low_high', S i))
reify_type : Attempting to reify:
((fun _ : Z * Z => (list Z * Z)%type)
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) (snd (fst state))
      (fst next) (snd next)))
reify_base_type : Attempting to reify:
((fun _ : Z * Z => (list Z * Z)%type)
   (Definitions.Z.add_with_get_carry_full
      ((fun i : nat => weight (S i) / weight i) i) (snd (fst state))
      (fst next) (snd next)))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (low_high', S i)
reify_preprocess : Attempting to preprocess: (low_high', S i)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: (S i)
reify_preprocess : Attempting to preprocess: (S i)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (pair low_high')
reify_preprocess : Attempting to preprocess: (pair low_high')
reify_base_type : Attempting to reify: (nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: low_high'
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z * Z -> nat -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(List.fold_right (A:=list Z * Z * nat) (B:=Z * Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list Z * Z * nat) (B:=Z * Z))
reify_base_type : Attempting to reify:
((Z * Z -> list Z * Z * nat -> list Z * Z * nat) ->
 list Z * Z * nat -> list (Z * Z) -> list Z * Z * nat)
reify_base_type : Attempting to reify: (list Z * Z * nat)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z * nat -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun out_carry : list Z * Z => (fst out_carry, snd state + snd out_carry))
reify_preprocess : Attempting to preprocess:
(fun out_carry : list Z * Z => (fst out_carry, snd state + snd out_carry))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fst out_carry, snd state + snd out_carry)
reify_preprocess : Attempting to preprocess:
(fst out_carry, snd state + snd out_carry)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd state + snd out_carry)
reify_preprocess : Attempting to preprocess: (snd state + snd out_carry)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd out_carry)
reify_preprocess : Attempting to preprocess: (snd out_carry)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: out_carry
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.add (snd state))
reify_preprocess : Attempting to preprocess: (Z.add (snd state))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (snd state)
reify_preprocess : Attempting to preprocess: (snd state)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: state
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.add
reify_preprocess : Attempting to preprocess: Z.add
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair (fst out_carry))
reify_preprocess : Attempting to preprocess: (pair (fst out_carry))
reify_base_type : Attempting to reify: (Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fst out_carry)
reify_preprocess : Attempting to preprocess: (fst out_carry)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: out_carry
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (list Z -> Z -> list Z * Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right (A:=list Z * Z) (B:=list Z))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=list Z * Z) (B:=list Z))
reify_base_type : Attempting to reify:
((list Z -> list Z * Z -> list Z * Z) ->
 list Z * Z -> list (list Z) -> list Z * Z)
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun r_flat0 : list Z * Z =>
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(fun r_flat0 : list Z * Z =>
 let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat)
 then fst r_flat0
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat0) (fst r_flat0))
reify_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z * Z)%type
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat0)
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(let bound := (0, 2 ^ machine_wordsize - 1) in
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat0)
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
((fun bound : Z * Z =>
  if is_bounded_by (List.repeat bound (S n)) (fst r_flat0)
  then fst r_flat
  else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   (0, 2 ^ machine_wordsize - 1))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (0, 2 ^ machine_wordsize - 1)
reify_preprocess : Attempting to preprocess: (0, 2 ^ machine_wordsize - 1)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (2 ^ machine_wordsize - 1)
reify_preprocess : Attempting to preprocess: (2 ^ machine_wordsize - 1)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 1
reify_preprocess : Attempting to preprocess: 1
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.sub (2 ^ machine_wordsize))
reify_preprocess : Attempting to preprocess: (Z.sub (2 ^ machine_wordsize))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (2 ^ machine_wordsize)
reify_preprocess : Attempting to preprocess: (2 ^ machine_wordsize)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: machine_wordsize
reify_in_context : Attempting to reify: (Z.pow 2)
reify_preprocess : Attempting to preprocess: (Z.pow 2)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: 2
reify_preprocess : Attempting to preprocess: 2
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.pow
reify_preprocess : Attempting to preprocess: Z.pow
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: Z.sub
reify_preprocess : Attempting to preprocess: Z.sub
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (pair 0)
reify_preprocess : Attempting to preprocess: (pair 0)
reify_base_type : Attempting to reify: (Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: 0
reify_preprocess : Attempting to preprocess: 0
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: pair
reify_preprocess : Attempting to preprocess: pair
reify_base_type : Attempting to reify: (Z -> Z -> Z * Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun bound : Z * Z =>
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat0)
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(fun bound : Z * Z =>
 if is_bounded_by (List.repeat bound (S n)) (fst r_flat0)
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(if is_bounded_by (List.repeat bound (S n)) (fst r_flat0)
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(if is_bounded_by (List.repeat bound (S n)) (fst r_flat0)
 then fst r_flat
 else Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list Z) (fun _ : unit => fst r_flat)
   (fun _ : unit =>
    Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
   (is_bounded_by (List.repeat bound (S n)) (fst r_flat0)))
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(is_bounded_by (List.repeat bound (S n)) (fst r_flat0))
reify_preprocess : Attempting to preprocess:
(is_bounded_by (List.repeat bound (S n)) (fst r_flat0))
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fst r_flat0)
reify_preprocess : Attempting to preprocess: (fst r_flat0)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat0
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(is_bounded_by (List.repeat bound (S n)))
reify_preprocess : Attempting to preprocess:
(is_bounded_by (List.repeat bound (S n)))
reify_base_type : Attempting to reify: (list Z -> bool)
reify_in_context : Attempting to reify: (List.repeat bound (S n))
reify_preprocess : Attempting to preprocess: (List.repeat bound (S n))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: (List.repeat bound)
reify_preprocess : Attempting to preprocess: (List.repeat bound)
reify_base_type : Attempting to reify: (nat -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: bound
reify_in_context : Attempting to reify: (List.repeat (A:=Z * Z))
reify_preprocess : Attempting to preprocess: (List.repeat (A:=Z * Z))
reify_base_type : Attempting to reify: (Z * Z -> nat -> list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: is_bounded_by
reify_preprocess : Attempting to preprocess: is_bounded_by
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> bool)
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify:
(fun (bounds : list (Z * Z)) (ls : list Z) =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_preprocess : Attempting to preprocess:
(fun (bounds : list (Z * Z)) (ls : list Z) =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls : list Z =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_preprocess : Attempting to preprocess:
(fun ls : list Z =>
 fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_preprocess : Attempting to preprocess:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds ls)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: ls
reify_in_context : Attempting to reify:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds)
reify_preprocess : Attempting to preprocess:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)) bounds)
reify_base_type : Attempting to reify: (list Z -> bool)
reify_in_context : Attempting to reify: bounds
reify_in_context : Attempting to reify:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)))
reify_preprocess : Attempting to preprocess:
(fold_andb_map'
   (fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r)))
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify:
(fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r))
reify_preprocess : Attempting to preprocess:
(fun (r : Z * Z) (v'' : Z) => (fst r <=? v'') && (v'' <=? snd r))
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun v'' : Z => (fst r <=? v'') && (v'' <=? snd r))
reify_preprocess : Attempting to preprocess:
(fun v'' : Z => (fst r <=? v'') && (v'' <=? snd r))
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: ((fst r <=? v'') && (v'' <=? snd r))
reify_preprocess : Attempting to preprocess:
((fst r <=? v'') && (v'' <=? snd r))
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (v'' <=? snd r)
reify_preprocess : Attempting to preprocess: (v'' <=? snd r)
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (snd r)
reify_preprocess : Attempting to preprocess: (snd r)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.leb v'')
reify_preprocess : Attempting to preprocess: (Z.leb v'')
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: v''
reify_in_context : Attempting to reify: Z.leb
reify_preprocess : Attempting to preprocess: Z.leb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify: (andb (fst r <=? v''))
reify_preprocess : Attempting to preprocess: (andb (fst r <=? v''))
reify_base_type : Attempting to reify: (bool -> bool)
reify_in_context : Attempting to reify: (fst r <=? v'')
reify_preprocess : Attempting to preprocess: (fst r <=? v'')
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: v''
reify_in_context : Attempting to reify: (Z.leb (fst r))
reify_preprocess : Attempting to preprocess: (Z.leb (fst r))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst r)
reify_preprocess : Attempting to preprocess: (fst r)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z -> Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: Z.leb
reify_preprocess : Attempting to preprocess: Z.leb
reify_base_type : Attempting to reify: (Z -> Z -> bool)
reify_in_context : Attempting to reify: andb
reify_preprocess : Attempting to preprocess: andb
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_in_context : Attempting to reify:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false) b1)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: b1
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_base_type : Attempting to reify: (bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => false)
reify_preprocess : Attempting to preprocess: (fun _ : unit => false)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: false
reify_preprocess : Attempting to preprocess: false
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_base_type : Attempting to reify: ((unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => b2)
reify_preprocess : Attempting to preprocess: (fun _ : unit => b2)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: b2
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect bool)
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect bool)
reify_base_type : Attempting to reify:
((unit -> bool) -> (unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: fold_andb_map'
reify_preprocess : Attempting to preprocess: fold_andb_map'
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify: (@fold_andb_map' (Z * Z))
reify_preprocess : Attempting to preprocess: (@fold_andb_map' (Z * Z))
reify_base_type : Attempting to reify:
(forall B : Type, (Z * Z -> B -> bool) -> list (Z * Z) -> list B -> bool)
reify_in_context : Attempting to reify: @fold_andb_map'
reify_preprocess : Attempting to preprocess: @fold_andb_map'
reify_base_type : Attempting to reify:
(forall A B : Type, (A -> B -> bool) -> list A -> list B -> bool)
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> bool)
reify_in_context : Attempting to reify:
(fun (A B : Type) (f : A -> B -> bool) (ls1 : list A) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (A B : Type) (f : A -> B -> bool) (ls1 : list A) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_in_context : Attempting to reify:
(fun (B : Type) (f : Z * Z -> B -> bool) (ls1 : list (Z * Z)) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (B : Type) (f : Z * Z -> B -> bool) (ls1 : list (Z * Z)) (ls2 : list B) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_in_context : Attempting to reify:
(fun (f : Z * Z -> Z -> bool) (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (f : Z * Z -> Z -> bool) (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_type : Attempting to reify: (Z * Z -> Z -> bool)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: (Z -> bool)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun (ls1 : list (Z * Z)) (ls2 : list Z) =>
 List.fold_right andb true (dual_map f ls1 ls2))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls2 : list Z => List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(fun ls2 : list Z => List.fold_right andb true (dual_map f ls1 ls2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.fold_right andb true (dual_map f ls1 ls2))
reify_preprocess : Attempting to preprocess:
(List.fold_right andb true (dual_map f ls1 ls2))
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (dual_map f ls1 ls2)
reify_preprocess : Attempting to preprocess: (dual_map f ls1 ls2)
reify_base_type : Attempting to reify: (list bool)
reify_in_context : Attempting to reify: ls2
reify_in_context : Attempting to reify: (dual_map f ls1)
reify_preprocess : Attempting to preprocess: (dual_map f ls1)
reify_base_type : Attempting to reify: (list Z -> list bool)
reify_in_context : Attempting to reify: ls1
reify_in_context : Attempting to reify: (dual_map f)
reify_preprocess : Attempting to preprocess: (dual_map f)
reify_base_type : Attempting to reify: (list (Z * Z) -> list Z -> list bool)
reify_in_context : Attempting to reify: f
reify_in_context : Attempting to reify: dual_map
reify_preprocess : Attempting to preprocess: dual_map
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> list bool)
reify_in_context : Attempting to reify: (@dual_map (Z * Z))
reify_preprocess : Attempting to preprocess: (@dual_map (Z * Z))
reify_base_type : Attempting to reify:
(forall B : Type, (Z * Z -> B -> bool) -> list (Z * Z) -> list B -> list bool)
reify_in_context : Attempting to reify: @dual_map
reify_preprocess : Attempting to preprocess: @dual_map
reify_base_type : Attempting to reify:
(forall A B : Type, (A -> B -> bool) -> list A -> list B -> list bool)
reify_base_type : Attempting to reify:
((Z * Z -> Z -> bool) -> list (Z * Z) -> list Z -> list bool)
reify_in_context : Attempting to reify:
(fun (A B : Type) (f : A -> B -> bool) (l1 : list A) (l2 : list B) =>
 List.map (fun x : A * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (A B : Type) (f : A -> B -> bool) (l1 : list A) (l2 : list B) =>
 List.map (fun x : A * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_in_context : Attempting to reify:
(fun (B : Type) (f : Z * Z -> B -> bool) (l1 : list (Z * Z)) (l2 : list B) =>
 List.map (fun x : Z * Z * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (B : Type) (f : Z * Z -> B -> bool) (l1 : list (Z * Z)) (l2 : list B) =>
 List.map (fun x : Z * Z * B => f (fst x) (snd x)) (List.combine l1 l2))
reify_in_context : Attempting to reify:
(fun (f : Z * Z -> Z -> bool) (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (f : Z * Z -> Z -> bool) (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_type : Attempting to reify: (Z * Z -> Z -> bool)
reify_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: (Z -> bool)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun (l1 : list (Z * Z)) (l2 : list Z) =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (list (Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun l2 : list Z =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(fun l2 : list Z =>
 List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_preprocess : Attempting to preprocess:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)) (List.combine l1 l2))
reify_base_type : Attempting to reify: (list bool)
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.combine l1 l2)
reify_preprocess : Attempting to preprocess: (List.combine l1 l2)
reify_base_type : Attempting to reify: (list (Z * Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l2
reify_in_context : Attempting to reify: (List.combine (B:=Z) l1)
reify_preprocess : Attempting to preprocess: (List.combine (B:=Z) l1)
reify_base_type : Attempting to reify: (list Z -> list (Z * Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: l1
reify_in_context : Attempting to reify: (List.combine (A:=Z * Z) (B:=Z))
reify_preprocess : Attempting to preprocess: (List.combine (A:=Z * Z) (B:=Z))
reify_base_type : Attempting to reify:
(list (Z * Z) -> list Z -> list (Z * Z * Z))
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)))
reify_preprocess : Attempting to preprocess:
(List.map (fun x : Z * Z * Z => f (fst x) (snd x)))
reify_base_type : Attempting to reify: (list (Z * Z * Z) -> list bool)
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun x : Z * Z * Z => f (fst x) (snd x))
reify_preprocess : Attempting to preprocess:
(fun x : Z * Z * Z => f (fst x) (snd x))
reify_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (f (fst x) (snd x))
reify_preprocess : Attempting to preprocess: (f (fst x) (snd x))
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (snd x)
reify_preprocess : Attempting to preprocess: (snd x)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (Z * Z * Z -> Z)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (f (fst x))
reify_preprocess : Attempting to preprocess: (f (fst x))
reify_base_type : Attempting to reify: (Z -> bool)
reify_in_context : Attempting to reify: (fst x)
reify_preprocess : Attempting to preprocess: (fst x)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (Z * Z * Z -> Z * Z)
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: f
reify_in_context : Attempting to reify: (List.map (A:=Z * Z * Z) (B:=bool))
reify_preprocess : Attempting to preprocess: (List.map (A:=Z * Z * Z) (B:=bool))
reify_base_type : Attempting to reify:
((Z * Z * Z -> bool) -> list (Z * Z * Z) -> list bool)
reify_base_type : Attempting to reify: (Z * Z * Z)%type
reify_base_type : Attempting to reify: (Z * Z)%type
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right andb true)
reify_preprocess : Attempting to preprocess: (List.fold_right andb true)
reify_base_type : Attempting to reify: (list bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: true
reify_preprocess : Attempting to preprocess: true
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right andb)
reify_preprocess : Attempting to preprocess: (List.fold_right andb)
reify_base_type : Attempting to reify: (bool -> list bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: andb
reify_preprocess : Attempting to preprocess: andb
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_base_type : Attempting to reify: (bool -> bool -> bool)
reify_in_context : Attempting to reify:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b1 b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(fun b2 : bool => if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(fun b2 : bool => if b1 then b2 else false)
reify_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess: (if b1 then b2 else false)
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false) b1)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: b1
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2) (fun _ : unit => false))
reify_base_type : Attempting to reify: (bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => false)
reify_preprocess : Attempting to preprocess: (fun _ : unit => false)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: false
reify_preprocess : Attempting to preprocess: false
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect bool (fun _ : unit => b2))
reify_base_type : Attempting to reify: ((unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (fun _ : unit => b2)
reify_preprocess : Attempting to preprocess: (fun _ : unit => b2)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: b2
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect bool)
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect bool)
reify_base_type : Attempting to reify:
((unit -> bool) -> (unit -> bool) -> bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify: (List.fold_right (A:=bool) (B:=bool))
reify_preprocess : Attempting to preprocess:
(List.fold_right (A:=bool) (B:=bool))
reify_base_type : Attempting to reify:
((bool -> bool -> bool) -> bool -> list bool -> bool)
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_base_type : Attempting to reify: bool
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list Z) (fun _ : unit => fst r_flat)
   (fun _ : unit =>
    Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list Z) (fun _ : unit => fst r_flat)
   (fun _ : unit =>
    Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat)))
reify_base_type : Attempting to reify: (bool -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun _ : unit =>
 Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(fun _ : unit =>
 Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_preprocess : Attempting to preprocess:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat) (fst r_flat))
reify_base_type : Attempting to reify: (list Z)
reify_in_context : Attempting to reify: (fst r_flat)
reify_preprocess : Attempting to preprocess: (fst r_flat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat))
reify_preprocess : Attempting to preprocess:
(Positional.add_to_nth 0 (weight (S n) * snd r_flat))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_in_context : Attempting to reify: (weight (S n) * snd r_flat)
reify_preprocess : Attempting to preprocess: (weight (S n) * snd r_flat)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (snd r_flat)
reify_preprocess : Attempting to preprocess: (snd r_flat)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat
reify_in_context : Attempting to reify: snd
reify_preprocess : Attempting to preprocess: snd
reify_base_type : Attempting to reify: (list Z * Z -> Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Z.mul (weight (S n)))
reify_preprocess : Attempting to preprocess: (Z.mul (weight (S n)))
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: (weight (S n))
reify_preprocess : Attempting to preprocess: (weight (S n))
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (S n)
reify_preprocess : Attempting to preprocess: (S n)
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: n
reify_in_context : Attempting to reify: S
reify_preprocess : Attempting to preprocess: S
reify_base_type : Attempting to reify: (nat -> nat)
reify_in_context : Attempting to reify: weight
reify_in_context : Attempting to reify: Z.mul
reify_preprocess : Attempting to preprocess: Z.mul
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (Positional.add_to_nth 0)
reify_preprocess : Attempting to preprocess: (Positional.add_to_nth 0)
reify_base_type : Attempting to reify: (Z -> list Z -> list Z)
reify_in_context : Attempting to reify: 0%nat
reify_preprocess : Attempting to preprocess: 0%nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify: Positional.add_to_nth
reify_preprocess : Attempting to preprocess: Positional.add_to_nth
reify_base_type : Attempting to reify: (nat -> Z -> list Z -> list Z)
reify_base_type : Attempting to reify: (nat -> Z -> list Z -> list Z)
reify_in_context : Attempting to reify:
(fun (i : nat) (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun (i : nat) (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_base_type : Attempting to reify: nat
reify_in_context : Attempting to reify:
(fun (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun (x : Z) (ls : list Z) =>
 Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(fun ls : list Z => Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(fun ls : list Z => Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y) ls)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: ls
reify_in_context : Attempting to reify:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y))
reify_preprocess : Attempting to preprocess:
(Crypto.Util.ListUtil.update_nth i (fun y : Z => x + y))
reify_base_type : Attempting to reify: (list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun y : Z => x + y)
reify_preprocess : Attempting to preprocess: (fun y : Z => x + y)
reify_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (x + y)
reify_preprocess : Attempting to preprocess: (x + y)
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: y
reify_in_context : Attempting to reify: (Z.add x)
reify_preprocess : Attempting to preprocess: (Z.add x)
reify_base_type : Attempting to reify: (Z -> Z)
reify_in_context : Attempting to reify: x
reify_in_context : Attempting to reify: Z.add
reify_preprocess : Attempting to preprocess: Z.add
reify_base_type : Attempting to reify: (Z -> Z -> Z)
reify_in_context : Attempting to reify: (Crypto.Util.ListUtil.update_nth i)
reify_preprocess : Attempting to preprocess: (Crypto.Util.ListUtil.update_nth i)
reify_base_type : Attempting to reify: ((Z -> Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: i
reify_in_context : Attempting to reify: Crypto.Util.ListUtil.update_nth
reify_preprocess : Attempting to preprocess: Crypto.Util.ListUtil.update_nth
reify_base_type : Attempting to reify: (nat -> (Z -> Z) -> list Z -> list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify:
(Bool.Thunked.bool_rect (list Z) (fun _ : unit => fst r_flat))
reify_preprocess : Attempting to preprocess:
(Bool.Thunked.bool_rect (list Z) (fun _ : unit => fst r_flat))
reify_base_type : Attempting to reify: ((unit -> list Z) -> bool -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (fun _ : unit => fst r_flat)
reify_preprocess : Attempting to preprocess: (fun _ : unit => fst r_flat)
reify_type : Attempting to reify: unit
reify_base_type : Attempting to reify: unit
reify_in_context : Attempting to reify: (fst r_flat)
reify_preprocess : Attempting to preprocess: (fst r_flat)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: r_flat
reify_in_context : Attempting to reify: fst
reify_preprocess : Attempting to preprocess: fst
reify_base_type : Attempting to reify: (list Z * Z -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list Z))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) -> (unit -> list Z) -> bool -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
reify_in_context : Attempting to reify: (Bool.Thunked.bool_rect (list Z))
reify_preprocess : Attempting to preprocess: (Bool.Thunked.bool_rect (list Z))
reify_base_type : Attempting to reify:
((unit -> list Z) -> (unit -> list Z) -> bool -> list Z)
reify_base_type : Attempting to reify: (list Z)
reify_base_type : Attempting to reify: Z
reify_base_type : Attempting to reify: Z
Tactic call transitivity ran for 0.103 secs (0.101u,0.001s) (success)
Tactic call reflexivity ran for 11.55 secs (11.525u,0.023s) (success)
